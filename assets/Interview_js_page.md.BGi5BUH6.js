import{_ as e,a as l,o as i,b0 as a}from"./chunks/framework.BBy0ZaTh.js";const u=JSON.parse('{"title":"JavaScript","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/js/page.md","filePath":"Interview/js/page.md","lastUpdated":1752408143000}'),s={name:"Interview/js/page.md"};function o(d,t,c,r,n,h){return i(),l("div",null,t[0]||(t[0]=[a('<h1 id="javascript" tabindex="-1">JavaScript <a class="header-anchor" href="#javascript" aria-label="Permalink to &quot;JavaScript&quot;">​</a></h1><h2 id="_1-js基本数据类型有哪些及它们的区别" tabindex="-1">1.js基本数据类型有哪些及它们的区别 <a class="header-anchor" href="#_1-js基本数据类型有哪些及它们的区别" aria-label="Permalink to &quot;1.js基本数据类型有哪些及它们的区别&quot;">​</a></h2><details class="details custom-block" open=""><summary>Details</summary><ul><li><p>基本数据类型：<code>Undefined、Null、Boolean、Number、String、Symbol、BigInt</code></p></li><li><p>引入数据类型：<code>Object</code></p></li><li><p>其中 <code>Symbol</code> 和 <code>BigInt</code> 是 <code>ES6</code> 中新增的数据类型：</p><ul><li><code>Symbol</code> 代表创建后独一无二且不可变的数据类型，它主要是为了解决可能出现的全局变量冲突的问题。</li><li><code>BigInt</code> 是一种数字类型的数据，它可以表示任意精度格式的整数，使用 <code>BigInt</code> 可以安全地存储和操作大整数，即使这个数已经超出了 <code>Number</code> 能够表示的安全整数范围。</li></ul></li></ul></details><h2 id="_2-数据类型检测的方式有哪些" tabindex="-1">2. 数据类型检测的方式有哪些 <a class="header-anchor" href="#_2-数据类型检测的方式有哪些" aria-label="Permalink to &quot;2. 数据类型检测的方式有哪些&quot;">​</a></h2><details class="details custom-block" open=""><summary>Details</summary><ul><li><code>typeof</code></li><li><code>instanceof</code></li><li><code>Object.prototype.toString.call</code></li><li><code>Array.isArray</code></li><li><code>=== null / === undefined</code></li><li><code>Number.isNaN()</code></li></ul></details><h2 id="_3-判断数组的方式有哪些" tabindex="-1">3. 判断数组的方式有哪些 <a class="header-anchor" href="#_3-判断数组的方式有哪些" aria-label="Permalink to &quot;3. 判断数组的方式有哪些&quot;">​</a></h2><details class="details custom-block" open=""><summary>Details</summary><ul><li><code>obj.__proto__ === Array.prototype</code></li><li><code>Array.isArrray(obj)</code></li><li><code>Object.prototype.toString.call</code></li><li><code>obj instanceof Array</code></li><li><code>Array.prototype.isPrototypeOf</code></li></ul></details><h2 id="_4-请简述javascript中的this" tabindex="-1">4.请简述JavaScript中的this <a class="header-anchor" href="#_4-请简述javascript中的this" aria-label="Permalink to &quot;4.请简述JavaScript中的this&quot;">​</a></h2><details class="details custom-block" open=""><summary>Details</summary><p>this 是执行上下文中的一个属性，它指向最后一次调用这个方法的对象。在实际开发中，this 的指向可以通过四种调用模式来判断。</p><ul><li>第一种是<code>函数调用模式</code>，当一个函数不是一个对象的属性时，直接作为函数来调用时，this 指向全局对象。</li><li>第二种是<code>方法调用模式</code>，如果一个函数作为一个对象的方法来调用时，this 指向这个对象。</li><li>第三种是<code>构造器调用模式</code>，如果一个函数用 new 调用时，函数执行前会新创建一个对象，this 指向这个新创建的对象。</li><li>第四种是 <code>apply 、 call 和 bind 调用模式</code>，这三个方法都可以显示的指定调用函数的 this 指向。其中 apply 方法接收两个参数：一个是 this 绑定的对象，一个是参数数组。call 方法接收的参数，第一个是 this 绑定的对象，后面的其余参数是传入函数执行的参数。也就是说，在使用 call() 方法时，传递给函数的参数必须逐个列举出来。bind 方法通过传入一个对象，返回一个 this 绑定了传入对象的新函数。这个函数的 this 指向除了使用 new 时会被改变，其他情况下都不会改变。</li></ul><p>这四种方式，使用构造器调用模式的优先级最高，然后是 apply、call 和 bind 调用模式，然后是方法调用模式，然后是函数调用模式。</p></details><h2 id="_5-let、const、var的区别" tabindex="-1">5. let、const、var的区别 <a class="header-anchor" href="#_5-let、const、var的区别" aria-label="Permalink to &quot;5. let、const、var的区别&quot;">​</a></h2><details class="details custom-block" open=""><summary>Details</summary><ul><li><code>块级作用域</code>： 块作用域由 { }包括，let和const具有块级作用域，var不存在块级作用域。块级作用域解决了ES5中的两个问题： <ul><li>内层变量可能覆盖外层变量</li><li>用来计数的循环变量泄露为全局变量</li></ul></li><li><code>变量提升</code>： var存在变量提升，let和const不存在变量提升，即在变量只能在声明之后使用，否在会报错。</li><li><code>给全局添加属性</code>： 浏览器的全局对象是window，Node的全局对象是global。var声明的变量为全局变量，并且会将该变量添加为全局对象的属性，但是let和const不会。</li><li><code>重复声明</code>： var声明变量时，可以重复声明变量，后声明的同名变量会覆盖之前声明的遍历。const和let不允许重复声明变量。</li><li><code>暂时性死区</code>： 在使用let、const命令声明变量之前，该变量都是不可用的。这在语法上，称为暂时性死区。使用var声明的变量不存在暂时性死区。</li><li><code>初始值设置</code>： 在变量声明时，var 和 let 可以不用设置初始值。而const声明变量必须设置初始值。</li><li><code>指针指向</code>： let和const都是ES6新增的用于创建变量的语法。 let创建的变量是可以更改指针指向（可以重新赋值）。但const声明的变量是不允许改变指针的指向。</li></ul></details><h3 id="_6-原型和原型链" tabindex="-1">6.原型和原型链 <a class="header-anchor" href="#_6-原型和原型链" aria-label="Permalink to &quot;6.原型和原型链&quot;">​</a></h3><details class="details custom-block" open=""><summary>Details</summary><p>在JavaScript中是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 <code>prototype</code> 属性，它的属性值是一个对象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造函数的 <code>prototype</code> 属性对应的值，在 <code>ES5</code> 中这个指针被称为对象的原型。一般来说不应该能够获取到这个值的，但是现在浏览器中都实现了 proto 属性来访问这个属性，但是最好不要使用这个属性，因为它不是规范中规定的。ES5 中新增了一个 <code>Object.getPrototypeOf()</code> 方法，可以通过这个方法来获取对象的原型。</p><p>当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 <code>Object.prototype</code> 所以这就是新建的对象为什么能够使用 <code>toString()</code> 等方法的原因。 特点： <code>JavaScript</code> 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。</p></details><h2 id="_7-对闭包的理解" tabindex="-1">7. 对闭包的理解 <a class="header-anchor" href="#_7-对闭包的理解" aria-label="Permalink to &quot;7. 对闭包的理解&quot;">​</a></h2><details class="details custom-block" open=""><summary>Details</summary><p><code>闭包是指有权访问另一个函数作用域中变量的函数</code>，创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以访问到当前函数的局部变量。</p><p><strong>闭包有两个常用的用途</strong></p><ul><li>闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，可以通过在外部调用闭包函数，从而在外部访问到函数内部的变量，可以使用这种方法来创建私有变量。</li><li>闭包的另一个用途是使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以这个变量对象不会被回收。</li></ul><p>PS: 闭包容易引起内存泄漏，谨慎使用</p></details><h2 id="_8-浏览器的垃圾回收机制" tabindex="-1">8. 浏览器的垃圾回收机制 <a class="header-anchor" href="#_8-浏览器的垃圾回收机制" aria-label="Permalink to &quot;8. 浏览器的垃圾回收机制&quot;">​</a></h2><details class="details custom-block" open=""><summary>Details</summary><p><strong>垃圾回收</strong>：JavaScript代码运行时，需要分配内存空间来储存变量和值。当变量不在参与运行时，就需要系统收回被占用的内存空间，这就是垃圾回收。</p><p><strong>回收机制</strong>：</p><ul><li>Javascript 具有自动垃圾回收机制，会定期对那些不再使用的变量、对象所占用的内存进行释放，原理就是找到不再使用的变量，然后释放掉其占用的内存。</li><li>JavaScript中存在两种变量：局部变量和全局变量。全局变量的生命周期会持续要页面卸载；而局部变量声明在函数中，它的生命周期从函数执行开始，直到函数执行结束，在这个过程中，局部变量会在堆或栈中存储它们的值，当函数执行结束后，这些局部变量不再被使用，它们所占有的空间就会被释放。</li><li>不过，当局部变量被外部函数使用时，其中一种情况就是闭包，在函数执行结束后，函数外部的变量依然指向函数内部的局部变量，此时局部变量依然在被使用，所以不会回收。</li></ul><h4 id="_2-垃圾回收的方式" tabindex="-1">（2）垃圾回收的方式 <a class="header-anchor" href="#_2-垃圾回收的方式" aria-label="Permalink to &quot;（2）垃圾回收的方式&quot;">​</a></h4><p>浏览器通常使用的垃圾回收方法有两种：标记清除，引用计数。</p><p><strong>1）标记清除</strong></p><ul><li>标记清除是浏览器常见的垃圾回收方式，当变量进入执行环境时，就标记这个变量“进入环境”，被标记为“进入环境”的变量是不能被回收的，因为他们正在被使用。当变量离开环境时，就会被标记为“离开环境”，被标记为“离开环境”的变量会被内存释放。</li><li>垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记。然后，它会去掉环境中的变量以及被环境中的变量引用的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后。垃圾收集器完成内存清除工作，销毁那些带标记的值，并回收他们所占用的内存空间。</li></ul><p><strong>2）引用计数</strong></p><ul><li>另外一种垃圾回收机制就是引用计数，这个用的相对较少。引用计数就是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型赋值给该变量时，则这个值的引用次数就是1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数就减1。当这个引用次数变为0时，说明这个变量已经没有价值，因此，在在机回收期下次再运行时，这个变量所占有的内存空间就会被释放出来。</li><li>这种方法会引起<strong>循环引用</strong>的问题：例如：<code>obj1</code>和<code>obj2</code>通过属性进行相互引用，两个对象的引用次数都是2。当使用循环计数时，由于函数执行完后，两个对象都离开作用域，函数执行结束，<code>obj1</code>和<code>obj2</code>还将会继续存在，因此它们的引用次数永远不会是0，就会引起循环引用。</li></ul></details><h2 id="_9-哪些情况会导致内存泄漏" tabindex="-1">9. 哪些情况会导致内存泄漏 <a class="header-anchor" href="#_9-哪些情况会导致内存泄漏" aria-label="Permalink to &quot;9. 哪些情况会导致内存泄漏&quot;">​</a></h2><blockquote><p>前端内存泄漏指的是 JavaScript 中已分配的内存，由于代码逻辑或引用关系的问题，不再需要却无法被垃圾回收机制回收的情况。随着时间推移，泄漏的内存不断累积，会导致页面性能下降、卡顿、崩溃，甚至影响整个浏览器或设备的稳定性</p></blockquote><details class="details custom-block" open=""><summary>Details</summary><ul><li>未清理的定时器 (Timers) 和回调 (Callbacks)</li><li>未移除的事件监听器 (Event Listeners)</li><li>闭包 (Closures) 引用</li><li>游离的 DOM 引用 (Dangling DOM References)</li><li>全局变量 (Global Variables)</li><li>console.log 持有引用</li><li>第三方库管理不当，如echarts 提供了销毁方法</li><li>未关闭的连接和订阅 (WebSockets, Observables, Event Emitters)</li><li>缓存管理不当</li></ul></details><h2 id="_10-es6有哪些新特性" tabindex="-1">10. ES6有哪些新特性 <a class="header-anchor" href="#_10-es6有哪些新特性" aria-label="Permalink to &quot;10. ES6有哪些新特性&quot;">​</a></h2><details class="details custom-block" open=""><summary>Details</summary><ul><li><code>箭头函数</code></li><li><code>解构赋值</code></li><li><code>模板字符串</code></li><li><code>promise</code></li><li><code>symbol</code> Symbol是ES6中引入的一种新的基本数据类型,用于表示一个独一无二的值,不能与其他数据类型进行运算</li><li>新的变量声明方式-<code>let</code>和<code>const</code></li><li>模块化-es6新增了<code>模块化</code>，根据功能封装模块，通过<code>import导入</code>，然后通过<code>export导出</code>也可以使用<code>export default导出</code></li><li><code>for…of</code> 循环,用于遍历可迭代对象(如数组、Map 和 Set)中的元素</li><li><code>扩展运算符</code>:使用 <code>...</code> 可以将数组或对象展开成多个参数,或者将多个参数合并成一个数组</li><li><code>展开运算符:</code>在ES6中用<code>...</code>来表示展开运算符,它可以将数组或者对象进行展开</li><li><code>Map 和 Set</code>，引入了两种新的数据结构，分别用于存储键值对和唯一值</li><li><code>Proxy</code>，允许在对象和函数调用等操作前后添加自定义的行为</li><li>类（<code>Class</code>），引入了面向对象编程中类的概念</li><li><code>默认参数</code>（Default Parameter），在定义函数时可以给参数设置默认值</li></ul></details><h2 id="_11-延迟加载js的方法" tabindex="-1">11. 延迟加载js的方法 <a class="header-anchor" href="#_11-延迟加载js的方法" aria-label="Permalink to &quot;11. 延迟加载js的方法&quot;">​</a></h2><p>async 和 defer 属性（推荐）</p><p><strong>async：异步加载，不阻塞渲染，加载完成后立即执行（无序）</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script.js&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><strong>defer：异步加载，延迟到HTML解析完成后执行（按顺序）</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script.js&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><table tabindex="0"><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">是否阻塞渲染</th><th style="text-align:left;">执行顺序</th><th style="text-align:left;">适用场景</th></tr></thead><tbody><tr><td style="text-align:left;">async</td><td style="text-align:left;">❌ 非阻塞</td><td style="text-align:left;">❌ 无序</td><td style="text-align:left;">独立脚本（如分析代码）</td></tr><tr><td style="text-align:left;">defer</td><td style="text-align:left;">❌ 非阻塞</td><td style="text-align:left;">✅ 顺序</td><td style="text-align:left;">依赖 DOM/其他脚本的代码</td></tr><tr><td style="text-align:left;">动态注入</td><td style="text-align:left;">❌ 非阻塞</td><td style="text-align:left;">可控</td><td style="text-align:left;">精准控制加载时机</td></tr><tr><td style="text-align:left;">IntersectionObserver</td><td style="text-align:left;">❌ 非阻塞</td><td style="text-align:left;">可控 图片/组件懒加载</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">import()</td><td style="text-align:left;">❌ 非阻塞</td><td style="text-align:left;">✅ 顺序</td><td style="text-align:left;">现代框架路由懒加载（React/Vue）</td></tr></tbody></table><h2 id="_12-es6-的箭头函数-和-es5-的普通函数-function-区别" tabindex="-1">12. ES6 的箭头函数 (=&gt;) 和 ES5 的普通函数 (function) 区别 <a class="header-anchor" href="#_12-es6-的箭头函数-和-es5-的普通函数-function-区别" aria-label="Permalink to &quot;12. ES6 的箭头函数 (=&gt;) 和 ES5 的普通函数 (function) 区别&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">特性</th><th style="text-align:left;">箭头函数 (=&gt;)</th><th style="text-align:left;">ES5 普通函数 (function)</th></tr></thead><tbody><tr><td style="text-align:left;">语法</td><td style="text-align:left;">更简洁（可省略 return、{}、()）</td><td style="text-align:left;">标准语法 (function() {})</td></tr><tr><td style="text-align:left;">this 绑定</td><td style="text-align:left;">继承自外层作用域（词法作用域）</td><td style="text-align:left;">动态绑定（取决于调用方式）</td></tr><tr><td style="text-align:left;">构造函数</td><td style="text-align:left;">❌ 不可用作构造函数（new 会报错）</td><td style="text-align:left;">✅ 可用作构造函数</td></tr><tr><td style="text-align:left;">arguments 对象</td><td style="text-align:left;">❌ 不存在</td><td style="text-align:left;">✅ 存在</td></tr><tr><td style="text-align:left;">prototype 属性</td><td style="text-align:left;">❌ 不存在</td><td style="text-align:left;">✅ 存在</td></tr><tr><td style="text-align:left;">方法定义</td><td style="text-align:left;">适合无独立 this 需求的场景</td><td style="text-align:left;">适合需要动态 this 的方法</td></tr></tbody></table><h2 id="_13-前端性能优化" tabindex="-1">13.前端性能优化 <a class="header-anchor" href="#_13-前端性能优化" aria-label="Permalink to &quot;13.前端性能优化&quot;">​</a></h2><ul><li>路由懒加载</li></ul><blockquote><p>SPA 项目，一个路由对应一个页面，如果不做处理，项目打包后，会把所有页面打包成一个文件，当用户打开首页时，会一次性加载所有的资源，造成首页加载很慢，降低用户体验</p></blockquote><ul><li>组件懒加载</li><li>骨架屏</li><li>长列表虚拟滚动</li><li>图片优化 <ul><li>图片懒加载</li><li>字体图标</li><li>转base64</li></ul></li></ul><h2 id="_14-前端资源加载方式" tabindex="-1">14.前端资源加载方式 <a class="header-anchor" href="#_14-前端资源加载方式" aria-label="Permalink to &quot;14.前端资源加载方式&quot;">​</a></h2><blockquote><p>async、defer 是 script 标签的专属属性，对于网页中的其他资源，可以通过 link 的 preload、prefetch 属性来预加载 如今现代框架已经将 preload、prefetch 添加到打包流程中了，通过灵活的配置，去使用这些预加载功能，同时我们也可以审时度势地向 script 标签添加 async、defer 属性去处理资源，这样可以显著提升性能</p></blockquote>',37)]))}const y=e(s,[["render",o]]);export{u as __pageData,y as default};
