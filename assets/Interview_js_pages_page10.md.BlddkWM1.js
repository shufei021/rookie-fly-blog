import{_ as t,a as i,o as a,b0 as e}from"./chunks/framework.BBy0ZaTh.js";const E=JSON.parse('{"title":"延迟加载js的方法","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/js/pages/page10.md","filePath":"Interview/js/pages/page10.md","lastUpdated":1752457654000}'),l={name:"Interview/js/pages/page10.md"};function n(h,s,p,d,k,r){return a(),i("div",null,s[0]||(s[0]=[e(`<h1 id="延迟加载js的方法" tabindex="-1">延迟加载js的方法 <a class="header-anchor" href="#延迟加载js的方法" aria-label="Permalink to &quot;延迟加载js的方法&quot;">​</a></h1><h2 id="async-和-defer-属性-推荐" tabindex="-1">async 和 defer 属性（推荐） <a class="header-anchor" href="#async-和-defer-属性-推荐" aria-label="Permalink to &quot;async 和 defer 属性（推荐）&quot;">​</a></h2><p><strong>async：异步加载，不阻塞渲染，加载完成后立即执行（无序）</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script.js&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><strong>defer：异步加载，延迟到HTML解析完成后执行（按顺序）</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script.js&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="动态脚本注入" tabindex="-1">动态脚本注入 <a class="header-anchor" href="#动态脚本注入" aria-label="Permalink to &quot;动态脚本注入&quot;">​</a></h2><p><strong>通过JavaScript动态创建标签script</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadScript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;script&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  script.src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> src;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(script); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 添加到DOM后开始加载</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 按需调用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadScript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path/to/script.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="事件触发加载" tabindex="-1">事件触发加载 <a class="header-anchor" href="#事件触发加载" aria-label="Permalink to &quot;事件触发加载&quot;">​</a></h2><p><strong>在特定用户行为（如点击、滚动）后加载：</strong></p><table tabindex="0"><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">是否阻塞渲染</th><th style="text-align:left;">执行顺序</th><th style="text-align:left;">适用场景</th></tr></thead><tbody><tr><td style="text-align:left;">async</td><td style="text-align:left;">❌ 非阻塞</td><td style="text-align:left;">❌ 无序</td><td style="text-align:left;">独立脚本（如分析代码）</td></tr><tr><td style="text-align:left;">defer</td><td style="text-align:left;">❌ 非阻塞</td><td style="text-align:left;">✅ 顺序</td><td style="text-align:left;">依赖 DOM/其他脚本的代码</td></tr><tr><td style="text-align:left;">动态注入</td><td style="text-align:left;">❌ 非阻塞</td><td style="text-align:left;">可控</td><td style="text-align:left;">精准控制加载时机</td></tr><tr><td style="text-align:left;">IntersectionObserver</td><td style="text-align:left;">❌ 非阻塞</td><td style="text-align:left;">可控 图片/组件懒加载</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">import()</td><td style="text-align:left;">❌ 非阻塞</td><td style="text-align:left;">✅ 顺序</td><td style="text-align:left;">现代框架路由懒加载（React/Vue）</td></tr></tbody></table>`,12)]))}const c=t(l,[["render",n]]);export{E as __pageData,c as default};
