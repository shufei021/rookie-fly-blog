import{_ as i,a,o as e,b0 as l}from"./chunks/framework.BBy0ZaTh.js";const d=JSON.parse('{"title":"事件轮询（Event Loop）","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/js/pages/page11.md","filePath":"Interview/js/pages/page11.md","lastUpdated":1752403471000}'),t={name:"Interview/js/pages/page11.md"};function n(p,s,h,k,o,r){return e(),a("div",null,s[0]||(s[0]=[l(`<h1 id="事件轮询-event-loop" tabindex="-1">事件轮询（Event Loop） <a class="header-anchor" href="#事件轮询-event-loop" aria-label="Permalink to &quot;事件轮询（Event Loop）&quot;">​</a></h1><h2 id="🧠-简要定义" tabindex="-1">🧠 简要定义 <a class="header-anchor" href="#🧠-简要定义" aria-label="Permalink to &quot;🧠 简要定义&quot;">​</a></h2><blockquote><p>JavaScript 是一门单线程语言，为了不阻塞主线程，它采用了一种叫做事件轮询（Event Loop）的机制来处理异步操作。简单来说，<code>事件轮询就是 JavaScript 引擎中用来协调代码执行、处理事件和回调函数的一种机制</code>。</p></blockquote><blockquote><p>js代码执行流程是：同步执行完了，才会走到事件轮询，进入到事件轮询：请求、事件、宏任务 事件轮询中包含：宏任务、微任务</p></blockquote><h2 id="🧱-基本组成与流程" tabindex="-1">🧱 基本组成与流程 <a class="header-anchor" href="#🧱-基本组成与流程" aria-label="Permalink to &quot;🧱 基本组成与流程&quot;">​</a></h2><p>我们可以将 Event Loop 拆解为几个核心部分来理解：</p><p><strong>1. 调用栈（Call Stack）</strong></p><ul><li>JavaScript 主线程中的一个数据结构，用于记录当前正在执行的函数。</li><li>后进先出（LIFO）结构。</li></ul><p><strong>2. 堆（Heap）</strong> 存放对象等动态数据的地方。</p><p><strong>3. 队列（Callback Queue）</strong></p><ul><li>包括： <ul><li>宏任务队列（Macro Task Queue）如 setTimeout, setInterval, I/O 等。</li><li>微任务队列（Micro Task Queue）如 Promise.then, MutationObserver, queueMicrotask 等。</li></ul></li></ul><details class="details custom-block" open=""><summary>Details</summary><ul><li>宏任务： script （主代码块）、setTimeout 、setInterval 、setImmediate 、I/O 、UI rendering</li><li>微任务：process.nextTick（Nodejs） 、Promise 、Object.observe 、MutationObserver</li></ul></details><p><strong>4. 事件循环本身（Event Loop）</strong></p><p>负责监听调用栈是否为空，一旦为空就从队列中取出任务放入调用栈执行。</p><h2 id="🔁-事件轮询的工作流程" tabindex="-1">🔁 事件轮询的工作流程 <a class="header-anchor" href="#🔁-事件轮询的工作流程" aria-label="Permalink to &quot;🔁 事件轮询的工作流程&quot;">​</a></h2><ul><li>所有同步代码首先在调用栈中执行完毕。</li><li>遇到异步操作（如 setTimeout, fetch, DOM 事件），交给浏览器其他线程处理。</li><li>当这些异步任务完成时，它们的回调会被放入相应的任务队列中： <ul><li>宏任务 → 宏任务队列</li><li>微任务 → 微任务队列</li></ul></li><li>当调用栈清空后，事件循环会： <ul><li>先检查微任务队列，全部执行完；</li><li>然后从宏任务队列中取出一个任务执行；</li><li>重复这个过程。</li></ul></li></ul><h2 id="⚠️-关键点-微任务优先于宏任务" tabindex="-1">⚠️ 关键点：微任务优先于宏任务 <a class="header-anchor" href="#⚠️-关键点-微任务优先于宏任务" aria-label="Permalink to &quot;⚠️ 关键点：微任务优先于宏任务&quot;">​</a></h2><p>举个例子说明一下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Timeout&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Promise&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;End&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>输出顺序是：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Start</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">End</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Promise</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Timeout</span></span></code></pre></div><p>解释：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.then 是微任务，会在本轮事件循环结束前执行；</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">setTimeout 是宏任务，会在下一轮事件循环中执行。</span></span></code></pre></div><h2 id="✅-总结" tabindex="-1">✅ 总结 <a class="header-anchor" href="#✅-总结" aria-label="Permalink to &quot;✅ 总结&quot;">​</a></h2><blockquote><p>事件轮询是 JavaScript 实现异步非阻塞编程的核心机制。理解宏任务与微任务的区别，以及它们的执行顺序，对于写出高性能、无阻塞的应用至关重要。</p></blockquote>`,25)]))}const c=i(t,[["render",n]]);export{d as __pageData,c as default};
