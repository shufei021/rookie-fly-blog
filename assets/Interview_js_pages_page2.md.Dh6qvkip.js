import{_ as i,a as e,o as l,b0 as t}from"./chunks/framework.BBy0ZaTh.js";const u=JSON.parse('{"title":"浏览器输入URL到页面加载的过程","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/js/pages/page2.md","filePath":"Interview/js/pages/page2.md","lastUpdated":1750600161000}'),s={name:"Interview/js/pages/page2.md"};function r(n,a,h,o,p,d){return l(),e("div",null,a[0]||(a[0]=[t(`<h1 id="浏览器输入url到页面加载的过程" tabindex="-1">浏览器输入URL到页面加载的过程 <a class="header-anchor" href="#浏览器输入url到页面加载的过程" aria-label="Permalink to &quot;浏览器输入URL到页面加载的过程&quot;">​</a></h1><h2 id="一、用户输入-url" tabindex="-1">一、用户输入 URL <a class="header-anchor" href="#一、用户输入-url" aria-label="Permalink to &quot;一、用户输入 URL&quot;">​</a></h2><p>例如：<a href="https://www.example.com/index.html" target="_blank" rel="noreferrer">https://www.example.com/index.html</a></p><h2 id="二、浏览器解析-url" tabindex="-1">二、浏览器解析 URL <a class="header-anchor" href="#二、浏览器解析-url" aria-label="Permalink to &quot;二、浏览器解析 URL&quot;">​</a></h2><p>浏览器首先会解析 URL，提取出协议（如 HTTPS）、域名（如 www.example.com）、端口号（默认为 443 或 80）和路径（如 /index.html）等信息。</p><h2 id="三、dns-解析-域名解析" tabindex="-1">三、DNS 解析（域名解析） <a class="header-anchor" href="#三、dns-解析-域名解析" aria-label="Permalink to &quot;三、DNS 解析（域名解析）&quot;">​</a></h2><ul><li>检查本地缓存：浏览器是否有该域名的缓存记录。</li><li>系统缓存：操作系统中是否缓存了这个域名对应的 IP 地址。</li><li>路由器缓存：如果前面没找到，可能会查询路由器的 DNS 缓存。</li><li>运营商 DNS 服务器：最终向 ISP 提供的 DNS 服务器发起查询。</li><li>递归/迭代查询：DNS 服务器可能需要通过根域名服务器、顶级域名服务器、权威域名服务器来获取最终 IP。</li></ul><p><strong>目标：将 www.example.com 转换为一个 IP 地址，比如 93.184.216.34。</strong></p><h2 id="四、建立-tcp-连接-三次握手" tabindex="-1">四、建立 TCP 连接（三次握手） <a class="header-anchor" href="#四、建立-tcp-连接-三次握手" aria-label="Permalink to &quot;四、建立 TCP 连接（三次握手）&quot;">​</a></h2><p>浏览器与目标服务器建立 TCP 连接：</p><ul><li>客户端发送 SYN（同步）报文；</li><li>服务端响应 SYN-ACK（同步-确认）；</li><li>客户端再发 ACK（确认）报文。</li></ul><p><strong>如果是 HTTPS，还会进行 TLS 握手加密通信。</strong></p><h2 id="五、发送-http-s-请求" tabindex="-1">五、发送 HTTP(S) 请求 <a class="header-anchor" href="#五、发送-http-s-请求" aria-label="Permalink to &quot;五、发送 HTTP(S) 请求&quot;">​</a></h2><p>浏览器发送一个 HTTP 请求，例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /index.html</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HTTP/1.1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Host:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> www.example.com</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User-Agent:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Accept:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text/html,...</span></span></code></pre></div><h2 id="六、服务器接收请求并处理" tabindex="-1">六、服务器接收请求并处理 <a class="header-anchor" href="#六、服务器接收请求并处理" aria-label="Permalink to &quot;六、服务器接收请求并处理&quot;">​</a></h2><ul><li>服务器收到请求后，根据路径 /index.html 查找资源；</li><li>如果是静态资源，直接返回；</li><li>如果是动态内容（如 PHP、Node.js），服务器执行脚本生成 HTML 响应内容；</li><li>服务器构建 HTTP 响应，包括状态码（如 200 OK）、响应头和响应体。</li></ul><h2 id="七、浏览器接收响应并解析渲染页面" tabindex="-1">七、浏览器接收响应并解析渲染页面 <a class="header-anchor" href="#七、浏览器接收响应并解析渲染页面" aria-label="Permalink to &quot;七、浏览器接收响应并解析渲染页面&quot;">​</a></h2><ul><li>解析 HTML：构建 DOM 树；</li><li>解析 CSS：构建 CSSOM 树；</li><li>合并生成 Render Tree：决定哪些节点可见及其样式；</li><li>布局（Layout）：计算每个元素在页面上的位置；</li><li>绘制（Paint）：将像素绘制到屏幕上；</li></ul><h2 id="八、加载子资源-js、css、图片等" tabindex="-1">八、加载子资源（JS、CSS、图片等） <a class="header-anchor" href="#八、加载子资源-js、css、图片等" aria-label="Permalink to &quot;八、加载子资源（JS、CSS、图片等）&quot;">​</a></h2><ul><li>页面中的 &lt; script&gt;、&lt; link&gt;、&lt; img&gt; 等标签会触发额外的 HTTP 请求；</li><li>JavaScript 可能会修改 DOM/CSSOM，导致重新渲染；</li><li>异步请求（AJAX）也可能在此阶段发起，用于局部更新或数据加载。</li></ul><h2 id="九、页面加载完成" tabindex="-1">九、页面加载完成 <a class="header-anchor" href="#九、页面加载完成" aria-label="Permalink to &quot;九、页面加载完成&quot;">​</a></h2><ul><li>所有资源加载完毕；</li><li>window.onload 事件被触发；</li><li>用户可以开始与页面交互。</li></ul><h2 id="十、断开连接-四次挥手" tabindex="-1">十、断开连接（四次挥手） <a class="header-anchor" href="#十、断开连接-四次挥手" aria-label="Permalink to &quot;十、断开连接（四次挥手）&quot;">​</a></h2><p>TCP 连接在一定时间内没有数据传输后，双方协商关闭连接。</p><h2 id="拓展知识点-加分项" tabindex="-1">拓展知识点（加分项） <a class="header-anchor" href="#拓展知识点-加分项" aria-label="Permalink to &quot;拓展知识点（加分项）&quot;">​</a></h2><ul><li>CDN 加速：资源可能从 CDN 获取，提高访问速度；</li><li>HTTP/2 &amp; HTTP/3：使用更高效的协议减少延迟；</li><li>预加载策略：如 DNS Prefetch、Preconnect、Prefetch、Prerender；</li><li>Service Worker &amp; PWA：离线缓存和增强用户体验；</li><li>安全相关：如 CSP、SameSite Cookie 属性、HTTPS 的作用等。</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><blockquote><p>当我在浏览器中输入一个 URL 后，整个过程涉及到了 DNS 解析、TCP 建立连接、发送 HTTP 请求、服务器处理请求并返回响应、浏览器解析 HTML 和渲染页面等多个步骤。同时，现代浏览器还优化了加载性能，比如异步加载资源、使用缓存、利用 CDN 等技术手段。整个过程背后体现了客户端与服务器端的协作，也涉及到网络、操作系统、前端渲染等多个层面的知识。</p></blockquote>`,29)]))}const k=i(s,[["render",r]]);export{u as __pageData,k as default};
