import{_ as e,a,o as l,b0 as o}from"./chunks/framework.D10JOWeE.js";const g=JSON.parse('{"title":"你能说说缓存吗","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/js/pages/page4.md","filePath":"Interview/js/pages/page4.md","lastUpdated":1752997743000}'),i={name:"Interview/js/pages/page4.md"};function r(n,t,d,h,s,c){return l(),a("div",null,t[0]||(t[0]=[o('<h1 id="你能说说缓存吗" tabindex="-1">你能说说缓存吗 <a class="header-anchor" href="#你能说说缓存吗" aria-label="Permalink to &quot;你能说说缓存吗&quot;">​</a></h1><h2 id="一、从缓存的概念谈起-建立基础" tabindex="-1">一、从缓存的概念谈起（建立基础） <a class="header-anchor" href="#一、从缓存的概念谈起-建立基础" aria-label="Permalink to &quot;一、从缓存的概念谈起（建立基础）&quot;">​</a></h2><blockquote><p>缓存是一种将数据临时存储再更快访问位置的技术，目的是为了提高系统的响应速度和性能。在前端开发中，缓存主要分为客户端缓存（浏览器缓存）和服务端缓存，其中客户端缓存是我们更常接触的部分。</p></blockquote><h2 id="二、重点讲浏览器缓存-体现专业性" tabindex="-1">二、重点讲浏览器缓存（体现专业性） <a class="header-anchor" href="#二、重点讲浏览器缓存-体现专业性" aria-label="Permalink to &quot;二、重点讲浏览器缓存（体现专业性）&quot;">​</a></h2><p><strong>继续深入：</strong></p><blockquote><p>“浏览器缓存主要分为两大类：强缓存和协商缓存。”</p></blockquote><p><strong>1. 强缓存（不请求服务器）</strong></p><ul><li>使用 HTTP 头字段 Expires 和 Cache-Control</li><li>Cache-Control: max-age=3600 表示资源可以在本地缓存一个小时，期间不会发起任何请求</li><li>优点是速度快，完全不需要网络请求</li></ul><p><strong>2. 协商缓存（需要请求服务器，但可能返回 304）</strong></p><ul><li>使用 Last-Modified / If-Modified-Since 或 ETag / If-None-Match</li><li>浏览器会向服务器发送请求，服务器根据资源是否变化决定是否返回新内容</li><li>如果没有变化，返回状态码 304 Not Modified</li></ul><blockquote><p>我还会结合项目经验举例说明如何设置合适的缓存策略，比如静态资源（如 JS/CSS/图片）设置较长的强缓存时间，而 HTML 文件通常使用协商缓存，以确保用户能获取最新的页面入口。</p></blockquote><h2 id="三、谈谈-cdn-缓存-体现架构思维" tabindex="-1">三、谈谈 CDN 缓存（体现架构思维） <a class="header-anchor" href="#三、谈谈-cdn-缓存-体现架构思维" aria-label="Permalink to &quot;三、谈谈 CDN 缓存（体现架构思维）&quot;">​</a></h2><p><strong>继续扩展：</strong></p><blockquote><p>“除了浏览器缓存之外，CDN 缓存也是前端优化的重要手段。通过将资源部署到离用户更近的边缘节点，CDN 可以大幅减少加载延迟，并利用其全局缓存能力提升访问效率。”</p></blockquote><h2 id="四、再说本地存储相关的缓存技术-体现多方面理解" tabindex="-1">四、再说本地存储相关的缓存技术（体现多方面理解） <a class="header-anchor" href="#四、再说本地存储相关的缓存技术-体现多方面理解" aria-label="Permalink to &quot;四、再说本地存储相关的缓存技术（体现多方面理解）&quot;">​</a></h2><p>“此外，我们还可以利用浏览器提供的本地存储机制来实现缓存功能，例如：”</p><ul><li>LocalStorage / SessionStorage：适合缓存一些用户数据或接口结果，提升用户体验</li><li>Service Worker + Cache API：实现离线缓存和 PWA 应用的关键技术</li><li>IndexedDB：用于缓存大量结构化数据，适合复杂应用的数据持久化</li></ul><blockquote><p>我会在实际项目中使用这些技术来减少重复请求，提升首屏加载速度，同时处理好版本更新和缓存失效的问题。</p></blockquote><h2 id="五、最后总结缓存的价值与注意事项-体现全面思考" tabindex="-1">五、最后总结缓存的价值与注意事项（体现全面思考） <a class="header-anchor" href="#五、最后总结缓存的价值与注意事项-体现全面思考" aria-label="Permalink to &quot;五、最后总结缓存的价值与注意事项（体现全面思考）&quot;">​</a></h2><p>“总的来说，合理使用缓存可以显著提升网页性能、降低服务器压力、改善用户体验。但在使用过程中也要注意以下几点：”</p><ul><li>缓存更新策略（比如上线新版本时如何让旧缓存失效）</li><li>不同类型资源的缓存策略差异（HTML、JS、CSS、图片等）</li><li>用户隐私与安全问题（避免敏感信息被缓存）</li><li>缓存穿透、缓存雪崩等问题的预防措施（虽然更多属于后端范畴，但前端也应有基本认知）</li></ul><blockquote><p>在我之前参与的某个项目中，我们通过合理设置 Cache-Control 和 ETag，使首页加载速度提升了 40%，同时也减少了服务器带宽消耗。</p></blockquote><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><blockquote><p>所以我认为，缓存不仅是性能优化的核心手段之一，更是构建高质量 Web 应用不可或缺的一部分。</p></blockquote><p>✅ 推荐组合方案（优雅又实用）</p><table tabindex="0"><thead><tr><th style="text-align:right;">资源类型</th><th style="text-align:right;">策略</th></tr></thead><tbody><tr><td style="text-align:right;">HTML 页面</td><td style="text-align:right;">设置 Cache-Control: no-cache</td></tr><tr><td style="text-align:right;">JS/CSS/图片</td><td style="text-align:right;">使用 [name].[contenthash].ext 命名</td></tr><tr><td style="text-align:right;">版本控制</td><td style="text-align:right;">客户端配合 localStorage 标记</td></tr><tr><td style="text-align:right;">CDN 加速</td><td style="text-align:right;">启用缓存，但基于文件名 hash 控制更新</td></tr></tbody></table>',26)]))}const u=e(i,[["render",r]]);export{g as __pageData,u as default};
