import{_ as t,a,o as s,b0 as o}from"./chunks/framework.BBy0ZaTh.js";const m=JSON.parse('{"title":"事件轮询（Event Loop）","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/js/pages/page7.md","filePath":"Interview/js/pages/page7.md","lastUpdated":1752457654000}'),i={name:"Interview/js/pages/page7.md"};function r(l,e,n,p,c,d){return s(),a("div",null,e[0]||(e[0]=[o('<h1 id="事件轮询-event-loop" tabindex="-1">事件轮询（Event Loop） <a class="header-anchor" href="#事件轮询-event-loop" aria-label="Permalink to &quot;事件轮询（Event Loop）&quot;">​</a></h1><p>事件触发线程管理的任务队列是如何产生的呢？事实上这些任务就是从JS引擎线程本身产生的，主线程在运行时会产生执行栈，栈中的代码调用某些异步API时会在任务队列中添加事件，栈中的代码执行完毕后，就会读取任务队列中的事件，去执行事件对应的回调函数，如此循环往复，形成事件循环机制。JS中有两种任务类型：微任务（microtask）和宏任务（macrotask），在ES6中，microtask称为 jobs，macrotask称为 task：</p><ul><li><strong>宏任务</strong>： script （主代码块）、setTimeout 、setInterval 、setImmediate 、I/O 、UI rendering</li><li><strong>微任务</strong>：process.nextTick（Nodejs） 、Promise 、Object.observe 、MutationObserver</li></ul><p>Node.js中Event Loop和浏览器中Event Loop有什么区别？</p><p>Node.js中宏任务分成了几种类型，并且放在了不同的task queue里。不同的task queue在执行顺序上也有区别，微任务放在了每个task queue的末尾：</p><ul><li>setTimeout/setInterval 属于 timers 类型；</li><li>setImmediate 属于 check 类型；</li><li>socket 的 close 事件属于 close callbacks 类型；</li><li>其他 MacroTask 都属于 poll 类型。</li><li>process.nextTick 本质上属于 MicroTask，但是它先于所有其他 MicroTask 执行；</li><li>所有 MicroTask 的执行时机在不同类型的 MacroTask 切换后。</li><li>idle/prepare 仅供内部调用，我们可以忽略。</li><li>pending callbacks 不太常见，我们也可以忽略。</li></ul>',6)]))}const _=t(i,[["render",r]]);export{m as __pageData,_ as default};
