import{_ as a,a as i,o as e,b0 as t}from"./chunks/framework.BBy0ZaTh.js";const p=JSON.parse('{"title":"浏览器输入URL到渲染的过程","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/old/pages/page1.md","filePath":"Interview/old/pages/page1.md","lastUpdated":1751439771000}'),r={name:"Interview/old/pages/page1.md"};function o(h,l,n,s,d,u){return e(),i("div",null,l[0]||(l[0]=[t('<h1 id="浏览器输入url到渲染的过程" tabindex="-1">浏览器输入URL到渲染的过程 <a class="header-anchor" href="#浏览器输入url到渲染的过程" aria-label="Permalink to &quot;浏览器输入URL到渲染的过程&quot;">​</a></h1><p><a href="../../../.vitepress/theme/pdf/1.pdf" target="_blank">PDF查看流程</a></p><h2 id="输入-url" tabindex="-1">输入 URL <a class="header-anchor" href="#输入-url" aria-label="Permalink to &quot;输入 URL&quot;">​</a></h2><h2 id="解析-url-域名解析" tabindex="-1">解析 URL（域名解析） <a class="header-anchor" href="#解析-url-域名解析" aria-label="Permalink to &quot;解析 URL（域名解析）&quot;">​</a></h2><blockquote><p>从URL提取出协议、域名、端口和路径等信息</p></blockquote><h2 id="dns-解析" tabindex="-1">DNS 解析 <a class="header-anchor" href="#dns-解析" aria-label="Permalink to &quot;DNS 解析&quot;">​</a></h2><blockquote><p>获取 IP 地址</p></blockquote><ul><li>浏览器缓存查询</li><li>操作系统缓存查询</li><li>路由器缓存查询</li><li>ISP DNS 缓存服务器 查询</li><li>ISP 的 DNS 服务器通过根域名、顶级域名、权威域名服务器，递归或迭代查询找到目标域名的IP地址，查询结果会缓存到各级服务器和客户端</li></ul><h2 id="建立-tcp-连接-三次握手" tabindex="-1">建立 TCP 连接（三次握手） <a class="header-anchor" href="#建立-tcp-连接-三次握手" aria-label="Permalink to &quot;建立 TCP 连接（三次握手）&quot;">​</a></h2><blockquote><p>为发起请求做准备</p></blockquote><ul><li>客户端发送 SYN包：请求建立连接</li><li>服务端响应 SYN-ACK 包： 确认收到请求，并同意建立连接</li><li>客户端再发 ACK包：确认收到服务器的回复，连接建立。</li><li>TLS握手（HTTPS） <ul><li>ClientHello： 客户端发送支持的TLS版本、加密套件列表、随机数等信息</li><li>ServerHello: 服务器选择加密套件、发送随机数、证书（包含公钥）</li><li>密钥交换：客户端生成主密钥，用服务器公钥加密发送</li><li>完成握手：双方生成会话密钥，后续通信使用对称加密</li></ul></li></ul><h2 id="发起-http-s-请求" tabindex="-1">发起 HTTP(S) 请求 <a class="header-anchor" href="#发起-http-s-请求" aria-label="Permalink to &quot;发起 HTTP(S) 请求&quot;">​</a></h2><h2 id="服务器接收请求并返回响应" tabindex="-1">服务器接收请求并返回响应 <a class="header-anchor" href="#服务器接收请求并返回响应" aria-label="Permalink to &quot;服务器接收请求并返回响应&quot;">​</a></h2><ul><li>304：可能协商缓存</li><li>负载均衡：请求可能被分发到多台服务器中的一台</li><li>业务逻辑处理：执行相应的应用逻辑，如数据库查询、模板渲染等</li><li>返回响应：服务器生成 HTTP 响应，包含状态码、响应头、响应体</li></ul><h2 id="浏览器接收响应解析" tabindex="-1">浏览器接收响应解析 <a class="header-anchor" href="#浏览器接收响应解析" aria-label="Permalink to &quot;浏览器接收响应解析&quot;">​</a></h2><ul><li>解析 HTML：构建 DOM 树</li><li>解析 CSS：构建 CSSOM 树</li><li>合并生成 Render Tree：将 DOM 树 和 CSSOM 树 合并生成渲染树，只包含需要渲染的节点及其样式信息</li><li>布局（Layout）：计算每个元素在页面上的位置和大小</li><li>绘制（Paint）：将像素绘制到屏幕上</li><li>合成（Composite）：将多个图层合并，优化渲染性能，最终显示在屏幕上</li></ul><h2 id="加载子资源-js-css-图片等" tabindex="-1">加载子资源（JS CSS 图片等） <a class="header-anchor" href="#加载子资源-js-css-图片等" aria-label="Permalink to &quot;加载子资源（JS CSS 图片等）&quot;">​</a></h2><ul><li>页面中的 &lt; script&gt;、&lt; link&gt;、&lt; img&gt; 等标签会触发额外的 HTTP 请求</li><li>JavaScript 可能会修改 DOM/CSSOM，导致重新渲染；</li><li>异步请求（AJAX）也可能在此阶段发起，用于局部更新或数据加载。</li></ul><h2 id="页面加载完成" tabindex="-1">页面加载完成 <a class="header-anchor" href="#页面加载完成" aria-label="Permalink to &quot;页面加载完成&quot;">​</a></h2><ul><li>所有资源加载完毕；</li><li>window.onload 事件被触发；</li><li>用户可以开始与页面交互。</li></ul><h2 id="断开连接-四次挥手" tabindex="-1">断开连接（四次挥手） <a class="header-anchor" href="#断开连接-四次挥手" aria-label="Permalink to &quot;断开连接（四次挥手）&quot;">​</a></h2><ul><li>客户端发送FIN包：请求关闭连接</li><li>服务器回复ACK包：确认收到关闭请求</li><li>服务器发送FIN包：服务器也请求关闭连接</li><li>客户端回复ACK包：确认服务器的关闭请求，连接断开</li></ul>',22)]))}const S=a(r,[["render",o]]);export{p as __pageData,S as default};
