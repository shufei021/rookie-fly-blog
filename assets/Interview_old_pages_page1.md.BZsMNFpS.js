import{_ as l,a,o as i,b0 as o}from"./chunks/framework.BBy0ZaTh.js";const S=JSON.parse('{"title":"浏览器输入URL到渲染的过程","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/old/pages/page1.md","filePath":"Interview/old/pages/page1.md","lastUpdated":1752457654000}'),t={name:"Interview/old/pages/page1.md"};function r(d,e,n,c,s,h){return i(),a("div",null,e[0]||(e[0]=[o('<h1 id="浏览器输入url到渲染的过程" tabindex="-1">浏览器输入URL到渲染的过程 <a class="header-anchor" href="#浏览器输入url到渲染的过程" aria-label="Permalink to &quot;浏览器输入URL到渲染的过程&quot;">​</a></h1><h2 id="一、输入url" tabindex="-1">一、输入URL <a class="header-anchor" href="#一、输入url" aria-label="Permalink to &quot;一、输入URL&quot;">​</a></h2><p><strong>输入URL，按下Enter，浏览器会检查输入的是否是关键词，如果URL不完整则跳转到默认搜索引擎</strong></p><h2 id="二、解析-url-域名解析" tabindex="-1">二、解析 URL（域名解析） <a class="header-anchor" href="#二、解析-url-域名解析" aria-label="Permalink to &quot;二、解析 URL（域名解析）&quot;">​</a></h2><p><strong>从URL提取出协议、域名、端口和路径等信息</strong></p><h2 id="三、dns-解析" tabindex="-1">三、DNS 解析 <a class="header-anchor" href="#三、dns-解析" aria-label="Permalink to &quot;三、DNS 解析&quot;">​</a></h2><p><strong>依次按 <code>浏览器缓存</code>、<code>操作系统缓存</code>、<code>路由器缓存</code>、<code>ISP DNS 服务器缓存</code>查询，如果都没有命中，则依次按<code>根域名</code>、<code>顶级域名</code>、<code>权威域名服务器</code>递归或迭代最终找到IP，获取IP后更新各级缓存。</strong></p><p><strong><code>优化机制：</code> dns-prefetch 提前解析跨域域名</strong></p><h2 id="四、建立-tcp-连接-三次握手" tabindex="-1">四、建立 TCP 连接（三次握手） <a class="header-anchor" href="#四、建立-tcp-连接-三次握手" aria-label="Permalink to &quot;四、建立 TCP 连接（三次握手）&quot;">​</a></h2><ul><li><strong>客户端 → 服务端：SYN（序列号=x）请求建立连接</strong></li><li><strong>服务端 → 客户端：SYN-ACK（序列号=y, 确认号=x+1）收到请求，并同意建立连接</strong></li><li><strong>客户端 → 服务端：ACK（确认号=y+1）收到确认，连接建立</strong></li><li><strong>TLS握手（HTTPS）</strong><ul><li>客户端发送 ClientHello（TLS版本、加密套件列表、随机数）</li><li>服务端回复 ServerHello（选定加密套件、随机数）、Certificate（证书）、ServerKeyExchange（服务端在需要时发送 ServerKeyExchange（包含密钥交换参数））</li><li>客户端验证证书，用公钥加密生成主密钥发送 → 双方生成会话密钥</li><li>后续通信使用对称加密（如AES）</li></ul></li></ul><h2 id="五、发起-http-s-请求" tabindex="-1">五、发起 HTTP(S) 请求 <a class="header-anchor" href="#五、发起-http-s-请求" aria-label="Permalink to &quot;五、发起 HTTP(S) 请求&quot;">​</a></h2><p>浏览器构造 HTTP请求报文，发送请求行、请求头、请求体</p><h2 id="六、服务器接收请求并返回响应" tabindex="-1">六、服务器接收请求并返回响应 <a class="header-anchor" href="#六、服务器接收请求并返回响应" aria-label="Permalink to &quot;六、服务器接收请求并返回响应&quot;">​</a></h2><ul><li><code>CDN分发</code>：请求可能被分发到就近的CDN节点服务器。</li><li><code>缓存检查</code>：强缓存（Cache-Control: max-age=3600）→ 直接返回本地缓存（200 OK from cache）或 协商缓存（If-Modified-Since/ETag）→ 未修改时返回 304 Not Modified</li><li><code>业务逻辑</code>：服务端处理请求（如数据库查询、SSR渲染）等</li><li><code>重定向处理:</code><ul><li>若响应状态码为 301（永久重定向） 或 302（临时重定向），浏览器会根据响应头的 Location 字段自动跳转到新URL，并重新发起请求。</li><li>区别 <ul><li>301：旧URL永久失效，后续请求直接访问新URL（浏览器可能缓存跳转）。</li><li>302：旧URL仍有效，下次请求可能再次触发重定向。</li></ul></li></ul></li><li><code>返回响应</code>： 构建响应报文（状态行、响应头、响应体）。</li></ul><h2 id="七、浏览器接收响应解析" tabindex="-1">七、浏览器接收响应解析 <a class="header-anchor" href="#七、浏览器接收响应解析" aria-label="Permalink to &quot;七、浏览器接收响应解析&quot;">​</a></h2><ul><li>解析HTML -&gt; 构建DOM树 (遇到资源加载)</li><li>解析CSS -&gt; 构建CSSOM树 (CSSOM 构建会阻塞 JavaScript 执行（除非JS未依赖CSSOM），并阻塞渲染树的构建)</li><li>合并DOM树 + CSSOM树 -&gt; 构建渲染树(Render Tree)</li><li>布局(Layout) 计算渲染树节点几何信息(位置、大小)</li><li>绘制(Painting): 将节点绘制成像素，填充到多个图层(Layers)上</li><li>合成(Compositing): 合成线程将图层合并、光栅化(如果需要)，并最终绘制到屏幕上。</li></ul><h2 id="八、加载子资源" tabindex="-1">八、加载子资源 <a class="header-anchor" href="#八、加载子资源" aria-label="Permalink to &quot;八、加载子资源&quot;">​</a></h2><ul><li>HTML解析中遇到 &lt; script&gt;, &lt; link&gt;, &lt; img&gt; 时 立即发起请求</li><li>JS/CSS加载 → 可能阻塞关键渲染路径</li><li>图片加载 → 异步不阻塞，但可能触发回流（未设置尺寸时）</li></ul><p><strong><code>优化机制</code>：预加载 <code>Preload</code> 提前发现资源，HTTP/2多路复用降低请求开销，建议使用 <code>async</code>（异步加载，执行时不阻塞）或 <code>defer</code>（延迟加载，按顺序执行）</strong></p><h2 id="九、页面加载完成" tabindex="-1">九、页面加载完成 <a class="header-anchor" href="#九、页面加载完成" aria-label="Permalink to &quot;九、页面加载完成&quot;">​</a></h2><ul><li>DOMContentLoaded：DOM树构建完成时触发（无需等待图片）</li><li>window.onload 事件触发</li></ul><h2 id="十、断开连接-四次挥手" tabindex="-1">十、断开连接（四次挥手） <a class="header-anchor" href="#十、断开连接-四次挥手" aria-label="Permalink to &quot;十、断开连接（四次挥手）&quot;">​</a></h2><ul><li>浏览器 → 服务器：FIN（请求关闭，进入 FIN_WAIT_1）</li><li>服务器 → 浏览器：ACK（确认请求，进入 CLOSE_WAIT；浏览器进入 FIN_WAIT_2）</li><li>服务器 → 浏览器：FIN（数据发送完毕，请求关闭，进入 LAST_ACK）</li><li>浏览器 → 服务器：ACK（确认关闭，进入 TIME_WAIT；服务器关闭连接）</li><li>等待 2MSL（报文最大生存时间）（确保最后一个ACK到达）后关闭，网络延迟保险期</li></ul><p><strong>等待 2MSL 的三大原因：</strong></p><ul><li>确保最后一个 ACK 可靠到达</li><li>消除旧连接的“迷途报文”</li><li>保证全双工通道完全关闭</li></ul>',25)]))}const g=l(t,[["render",r]]);export{S as __pageData,g as default};
