import{_ as r,a,o,b0 as e}from"./chunks/framework.BBy0ZaTh.js";const u=JSON.parse('{"title":"前端性能优化","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/old/pages/page2.md","filePath":"Interview/old/pages/page2.md","lastUpdated":1752457654000}'),l={name:"Interview/old/pages/page2.md"};function n(i,t,s,d,g,h){return o(),a("div",null,t[0]||(t[0]=[e('<h1 id="前端性能优化" tabindex="-1">前端性能优化 <a class="header-anchor" href="#前端性能优化" aria-label="Permalink to &quot;前端性能优化&quot;">​</a></h1><p><a href="../pdf/2.pdf" target="_blank">PDF查看流程</a></p><h2 id="一、加载优化" tabindex="-1">一、加载优化 <a class="header-anchor" href="#一、加载优化" aria-label="Permalink to &quot;一、加载优化&quot;">​</a></h2><ul><li><strong>懒加载（Lazy Load）</strong>：延迟加载非首屏资源，如图片、组件等。</li><li><strong>预加载（Preload / Prefetch）</strong>：提前加载关键资源或后续页面资源。</li><li><strong>异步加载脚本</strong>：通过给标签添加async或defer属性，或者使用动态脚本注入的方式，避免JavaScript文件阻塞页面渲染。</li><li><strong>资源合并（Concatenate）</strong>：合并 CSS、JS 文件以减少请求次数。</li><li><strong>压缩资源（Gzip / Brotli）</strong>：对文本资源进行压缩，减小传输体积。</li><li><strong>使用 CDN 加速静态资源加载</strong></li><li><strong>启用 HTTP/2 / HTTP/3 协议</strong>：提升多资源并发加载效率。</li><li><strong>合理使用浏览器缓存（Cache-Control、ETag）</strong></li></ul><h2 id="二、构建优化" tabindex="-1">二、构建优化 <a class="header-anchor" href="#二、构建优化" aria-label="Permalink to &quot;二、构建优化&quot;">​</a></h2><ul><li><strong>Tree Shaking</strong>：移除未使用的 JavaScript / CSS 代码。</li><li><strong>代码拆分（Code Splitting）</strong>：按需加载模块或路由组件。</li><li><strong>按需引入第三方库（如 Lodash、Ant Design）</strong></li><li><strong>避免内存泄漏</strong>：及时清理定时器、事件监听器和闭包引用。</li><li><strong>封装通用组件 / 工具函数</strong>：提高复用性，减少冗余代码。</li></ul><h2 id="三、渲染优化" tabindex="-1">三、渲染优化 <a class="header-anchor" href="#三、渲染优化" aria-label="Permalink to &quot;三、渲染优化&quot;">​</a></h2><ul><li><strong>骨架屏（Skeleton Screen）</strong>：提升用户等待时的视觉体验。</li><li><strong>服务端渲染（SSR） / 静态生成（SSG）</strong>：加快首屏展示速度。</li><li><strong>虚拟滚动（Virtual Scrolling）</strong>：仅渲染可视区域内容，适用于长列表。</li><li><strong>减少重绘与回流（Repaint &amp; Reflow）</strong>：批量更新样式、避免频繁操作DOM。</li><li><strong>使用防抖与节流（Debounce / Throttle）</strong>：控制高频事件触发频率。</li><li><strong>CSS 动画优化</strong>：使用 <code>transform</code> 和 <code>opacity</code> 实现 GPU 加速动画。</li></ul><h2 id="四、图像优化" tabindex="-1">四、图像优化 <a class="header-anchor" href="#四、图像优化" aria-label="Permalink to &quot;四、图像优化&quot;">​</a></h2><ul><li><strong>选择合适格式（WebP / AVIF / SVG）</strong></li><li><strong>图片尺寸适配（响应式图片 srcset）</strong></li><li><strong>图片懒加载 + 占位图</strong></li><li><strong>使用 Web Workers 处理复杂计算任务</strong></li></ul><h2 id="五、监控分析" tabindex="-1">五、监控分析 <a class="header-anchor" href="#五、监控分析" aria-label="Permalink to &quot;五、监控分析&quot;">​</a></h2><ul><li><strong>Lighthouse / Chrome DevTools Performance 面板</strong></li><li><strong>Web Vitals 指标监控（FCP、CLS、FID 等）</strong></li><li><strong>错误日志收集（Sentry / Bugsnag）</strong></li><li><strong>前端埋点与性能上报</strong></li></ul><h2 id="总结-五大核心维度" tabindex="-1">总结：五大核心维度 <a class="header-anchor" href="#总结-五大核心维度" aria-label="Permalink to &quot;总结：五大核心维度&quot;">​</a></h2><table tabindex="0"><thead><tr><th>类别</th><th>核心目标</th></tr></thead><tbody><tr><td>加载优化</td><td>提升首次访问速度</td></tr><tr><td>渲染优化</td><td>提高页面交互流畅度</td></tr><tr><td>构建优化</td><td>减小包体积、提升可维护性</td></tr><tr><td>图像优化</td><td>减少带宽占用、提升视觉体验</td></tr><tr><td>监控分析</td><td>持续优化性能瓶颈</td></tr></tbody></table>',14)]))}const p=r(l,[["render",n]]);export{u as __pageData,p as default};
