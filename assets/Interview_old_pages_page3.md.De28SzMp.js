import{_ as a,a as t,o as r,b0 as o}from"./chunks/framework.BBy0ZaTh.js";const p=JSON.parse('{"title":"前端首屏优化","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/old/pages/page3.md","filePath":"Interview/old/pages/page3.md","lastUpdated":1751439771000}'),l={name:"Interview/old/pages/page3.md"};function i(n,e,s,d,g,c){return r(),t("div",null,e[0]||(e[0]=[o('<h1 id="前端首屏优化" tabindex="-1">前端首屏优化 <a class="header-anchor" href="#前端首屏优化" aria-label="Permalink to &quot;前端首屏优化&quot;">​</a></h1><p><a href="../../../.vitepress/theme/pdf/3.pdf" target="_blank">PDF查看流程</a></p><h2 id="资源加载优化" tabindex="-1">资源加载优化 <a class="header-anchor" href="#资源加载优化" aria-label="Permalink to &quot;资源加载优化&quot;">​</a></h2><ul><li><strong>压缩资源</strong>：使用Gzip或Brotli对JS、CSS和HTML进行压缩。</li><li><strong>图片懒加载</strong>：延迟加载非首屏图片，可以使用<code>loading=&quot;lazy&quot;</code>属性或者Intersection Observer API。</li><li><strong>CDN加速</strong>：将静态资源部署到内容分发网络(CDN)，缩短请求路径。</li><li><strong>字体优化</strong>：仅加载必要的字体子集，避免阻塞页面渲染。</li><li><strong>关键资源优先级</strong>：通过<code>rel=&quot;preload&quot;</code>预加载关键CSS、JS和字体。</li><li><strong>按需加载(Code Splitting)</strong>：采用动态<code>import()</code>拆分非首屏模块。</li></ul><h2 id="构建优化" tabindex="-1">构建优化 <a class="header-anchor" href="#构建优化" aria-label="Permalink to &quot;构建优化&quot;">​</a></h2><ul><li><strong>Tree Shaking</strong>：移除未使用的代码以减小包体积。</li><li><strong>SplitChunks</strong>：分离第三方库和业务代码，以便更好地利用缓存。</li><li><strong>服务端渲染(SSR)或预渲染(Prerendering)</strong>：提前生成HTML内容，加快首屏显示速度。</li><li><strong>HTTP/2/HTTP/3协议</strong>：利用多路复用技术减少请求耗时。</li></ul><h2 id="服务端配合" tabindex="-1">服务端配合 <a class="header-anchor" href="#服务端配合" aria-label="Permalink to &quot;服务端配合&quot;">​</a></h2><ul><li><strong>服务端缓存策略</strong>：合理设置缓存头（如Cache-Control、ETag），减少重复请求。</li><li><strong>最小化资源数量和大小</strong>：减少不必要的资源请求，并通过合并和压缩CSS、JavaScript文件以及图像压缩来减小传输时间。</li></ul><h2 id="关键渲染路径-crp-优化" tabindex="-1">关键渲染路径(CRP)优化 <a class="header-anchor" href="#关键渲染路径-crp-优化" aria-label="Permalink to &quot;关键渲染路径(CRP)优化&quot;">​</a></h2><ul><li><strong>内联关键CSS(Critical CSS)</strong>：提前注入首屏需要的样式，防止无样式内容闪烁(FOUC)。</li><li><strong>避免阻塞渲染的脚本</strong>：不将JS放在<code>&lt;head&gt;</code>中同步加载，而是使用<code>async</code>或<code>defer</code>。</li></ul><h2 id="浏览器渲染优化" tabindex="-1">浏览器渲染优化 <a class="header-anchor" href="#浏览器渲染优化" aria-label="Permalink to &quot;浏览器渲染优化&quot;">​</a></h2><ul><li>使用工具评估性能指标，比如Lighthouse、PageSpeed Insights和Web Vitals等，关注核心指标包括FCP（首次内容绘制）、LCP（最大内容绘制）、FID（首次输入延迟）和CLS（累计布局偏移）。</li></ul><p>这个分类涵盖了从资源加载、构建过程、服务端支持到浏览器渲染等多个方面的优化措施</p>',13)]))}const u=a(l,[["render",i]]);export{p as __pageData,u as default};
