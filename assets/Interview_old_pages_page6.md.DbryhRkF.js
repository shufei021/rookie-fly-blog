import{_ as i,a as s,o as l,b0 as e}from"./chunks/framework.BBy0ZaTh.js";const c=JSON.parse('{"title":"前端事件轮询","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/old/pages/page6.md","filePath":"Interview/old/pages/page6.md","lastUpdated":1752408143000}'),t={name:"Interview/old/pages/page6.md"};function n(h,a,r,o,p,k){return l(),s("div",null,a[0]||(a[0]=[e(`<h1 id="前端事件轮询" tabindex="-1">前端事件轮询 <a class="header-anchor" href="#前端事件轮询" aria-label="Permalink to &quot;前端事件轮询&quot;">​</a></h1><h2 id="一、什么是事件轮询-event-loop" tabindex="-1">一、什么是事件轮询（Event Loop）？ <a class="header-anchor" href="#一、什么是事件轮询-event-loop" aria-label="Permalink to &quot;一、什么是事件轮询（Event Loop）？&quot;">​</a></h2><p>事件轮询是 JavaScript 引擎处理异步操作的一种机制。它使得 JavaScript 在单线程的限制下依然可以处理并发任务，比如定时器、网络请求、用户交互等。</p><p>JavaScript 最初设计为单线程语言，主要是为了避免多线程带来的复杂性（如死锁）。但这也意味着同一时间只能执行一个任务。为了在不阻塞主线程的前提下处理异步任务，JavaScript 引入了 <strong>事件轮询机制</strong>。</p><h2 id="二、事件轮询的核心组成部分" tabindex="-1">二、事件轮询的核心组成部分 <a class="header-anchor" href="#二、事件轮询的核心组成部分" aria-label="Permalink to &quot;二、事件轮询的核心组成部分&quot;">​</a></h2><p>事件轮询依赖于几个关键的概念：</p><h3 id="_1-调用栈-call-stack" tabindex="-1">1. 调用栈（Call Stack） <a class="header-anchor" href="#_1-调用栈-call-stack" aria-label="Permalink to &quot;1. 调用栈（Call Stack）&quot;">​</a></h3><ul><li>是 JavaScript 执行代码的地方。</li><li>函数被调用时会被压入调用栈，执行完毕后弹出。</li></ul><h3 id="_2-消息队列-callback-queue-task-queue" tabindex="-1">2. 消息队列（Callback Queue / Task Queue） <a class="header-anchor" href="#_2-消息队列-callback-queue-task-queue" aria-label="Permalink to &quot;2. 消息队列（Callback Queue / Task Queue）&quot;">​</a></h3><ul><li>存放等待执行的回调函数。</li><li>比如：<code>setTimeout</code>、<code>setInterval</code>、<code>DOM 事件</code>触发后的回调。</li></ul><h3 id="_3-微任务队列-microtask-queue" tabindex="-1">3. 微任务队列（Microtask Queue） <a class="header-anchor" href="#_3-微任务队列-microtask-queue" aria-label="Permalink to &quot;3. 微任务队列（Microtask Queue）&quot;">​</a></h3><ul><li>存放优先级更高的任务，比如： <ul><li><code>Promise.then</code> / <code>catch</code> / <code>finally</code></li><li><code>MutationObserver</code></li><li><code>queueMicrotask</code></li></ul></li><li>微任务会在当前宏任务结束后立即执行所有微任务，然后再继续下一个宏任务。</li></ul><h3 id="_4-事件轮询-event-loop" tabindex="-1">4. 事件轮询（Event Loop） <a class="header-anchor" href="#_4-事件轮询-event-loop" aria-label="Permalink to &quot;4. 事件轮询（Event Loop）&quot;">​</a></h3><ul><li>不断检查调用栈是否为空。</li><li>如果为空，则从消息队列或微任务队列中取出第一个任务推入调用栈执行。</li></ul><hr><h2 id="三、事件轮询的工作流程" tabindex="-1">三、事件轮询的工作流程 <a class="header-anchor" href="#三、事件轮询的工作流程" aria-label="Permalink to &quot;三、事件轮询的工作流程&quot;">​</a></h2><ol><li>所有同步代码先执行，进入调用栈。</li><li>遇到异步操作（如 setTimeout、Promise），交给浏览器其他线程（如定时器线程、网络线程）处理。</li><li>当这些异步任务完成后，它们的回调会被放入相应的任务队列： <ul><li>宏任务 → 宏任务队列（如 setTimeout 回调）</li><li>微任务 → 微任务队列（如 Promise.then 回调）</li></ul></li><li>当调用栈为空时，事件循环会： <ul><li>先清空微任务队列中的所有任务</li><li>然后从宏任务队列中取一个任务执行</li></ul></li><li>这个过程不断重复，形成了“事件轮询”。</li></ol><p><strong>执行顺序</strong></p><ul><li>1、先执行主线程</li><li>2、遇到宏队列（macrotask）放到宏队列（macrotask）</li><li>3、遇到微队列（microtask）放到微队列（microtask）</li><li>4、主线程执行完毕</li><li>5、执行微队列（microtask），微队列（microtask）执行完毕</li><li>6、执行一次宏队列（macrotask）中的一个任务，执行完毕</li><li>7、执行微队列（microtask），执行完毕</li><li>8、依次循环。。。</li></ul><h2 id="四、宏任务-vs-微任务" tabindex="-1">四、宏任务 vs 微任务 <a class="header-anchor" href="#四、宏任务-vs-微任务" aria-label="Permalink to &quot;四、宏任务 vs 微任务&quot;">​</a></h2><table tabindex="0"><thead><tr><th>类型</th><th>示例</th><th>特点</th></tr></thead><tbody><tr><td>宏任务</td><td>setTimeout, setInterval, I/O</td><td>每次事件循环处理一个宏任务</td></tr><tr><td>微任务</td><td>Promise.then, MutationObserver</td><td>优先级更高，宏任务之后立即清空所有微任务</td></tr></tbody></table><p>举个例子：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;setTimeout&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Promise.then&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;End&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>输出顺序为：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Start</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">End</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Promise.then</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span></span></code></pre></div><p>解释：</p><ul><li>同步代码先执行（Start、End）</li><li>setTimeout 是宏任务，Promise.then 是微任务</li><li>所以微任务先执行，宏任务最后执行</li></ul><hr><h2 id="五、实际应用和常见问题" tabindex="-1">五、实际应用和常见问题 <a class="header-anchor" href="#五、实际应用和常见问题" aria-label="Permalink to &quot;五、实际应用和常见问题&quot;">​</a></h2><h3 id="_1-避免长时间阻塞主线程" tabindex="-1">1. 避免长时间阻塞主线程 <a class="header-anchor" href="#_1-避免长时间阻塞主线程" aria-label="Permalink to &quot;1. 避免长时间阻塞主线程&quot;">​</a></h3><ul><li>大量计算或长循环会影响页面渲染和响应用户交互，应使用 Web Worker 或分片执行。</li></ul><h3 id="_2-微任务过多可能影响性能" tabindex="-1">2. 微任务过多可能影响性能 <a class="header-anchor" href="#_2-微任务过多可能影响性能" aria-label="Permalink to &quot;2. 微任务过多可能影响性能&quot;">​</a></h3><ul><li>如果微任务链太长，可能会导致 UI 渲染延迟，因为微任务会在每个宏任务之间全部执行完。</li></ul><h3 id="_3-vue-react-中的-nexttick-microtask-使用" tabindex="-1">3. Vue/React 中的 nextTick/Microtask 使用 <a class="header-anchor" href="#_3-vue-react-中的-nexttick-microtask-使用" aria-label="Permalink to &quot;3. Vue/React 中的 nextTick/Microtask 使用&quot;">​</a></h3><ul><li>Vue 的 <code>$nextTick()</code> 和 React 的某些更新机制都利用了微任务来确保 DOM 更新完成后再执行回调。</li></ul><hr><h2 id="六、总结" tabindex="-1">六、总结 <a class="header-anchor" href="#六、总结" aria-label="Permalink to &quot;六、总结&quot;">​</a></h2><p>事件轮询是 JavaScript 实现异步编程的核心机制，理解它有助于我们写出更高效、无阻塞的代码。其核心在于：</p><ul><li>JavaScript 是单线程的</li><li>异步任务由浏览器其他线程处理</li><li>回调进入任务队列</li><li>事件轮询负责将任务推入调用栈执行</li><li>微任务优先于宏任务执行</li></ul>`,39)]))}const u=i(t,[["render",n]]);export{c as __pageData,u as default};
