import{_ as o,a as t,o as d,b0 as a}from"./chunks/framework.BBy0ZaTh.js";const u=JSON.parse('{"title":"vue的生命周期有哪些及每个生命周期做了什么","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/vue/pages/page1.md","filePath":"Interview/vue/pages/page1.md","lastUpdated":1750206274000}'),p={name:"Interview/vue/pages/page1.md"};function c(r,e,i,l,s,n){return d(),t("div",null,e[0]||(e[0]=[a('<h1 id="vue的生命周期有哪些及每个生命周期做了什么" tabindex="-1">vue的生命周期有哪些及每个生命周期做了什么 <a class="header-anchor" href="#vue的生命周期有哪些及每个生命周期做了什么" aria-label="Permalink to &quot;vue的生命周期有哪些及每个生命周期做了什么&quot;">​</a></h1><ul><li><p><code>beforeCreate</code>是<code>new Vue()</code>之后触发的第一个钩子，在当前阶段<code>data、methods、computed以及watch</code>上的数据和方法都不能被访问。</p></li><li><p><code>created</code>在实例创建完成后发生，当前阶段已经完成了数据观测，也就是可以使用数据，更改数据，在这里更改数据不会触发updated函数。可以做一些初始数据的获取，在当前阶段无法与Dom进行交互，如果非要想，可以通过vm.$nextTick来访问Dom。</p></li><li><p><code>beforeMount</code>发生在挂载之前，在这之前template模板已导入渲染函数编译。而当前阶段虚拟Dom已经创建完成，即将开始渲染。在此时也可以对数据进行更改，不会触发updated。</p></li><li><p><code>mounted</code>在挂载完成后发生，在当前阶段，真实的Dom挂载完毕，数据完成双向绑定，可以访问到Dom节点，使用$refs属性对Dom进行操作。</p></li><li><p><code>beforeUpdate</code>发生在更新之前，也就是响应式数据发生更新，虚拟dom重新渲染之前被触发，你可以在当前阶段进行更改数据，不会造成重渲染。</p></li><li><p><code>updated</code>发生在更新完成之后，当前阶段组件Dom已完成更新。要注意的是避免在此期间更改数据，因为这可能会导致无限循环的更新。</p></li><li><p><code>beforeDestroy</code>发生在实例销毁之前，在当前阶段实例完全可以被使用，我们可以在这时进行善后收尾工作，比如清除计时器。</p></li><li><p><code>destroyed</code>发生在实例销毁之后，这个时候只剩下了dom空壳。组件已被拆解，数据绑定被卸除，监听被移出，子实例也统统被销毁。</p></li></ul>',2)]))}const _=o(p,[["render",c]]);export{u as __pageData,_ as default};
