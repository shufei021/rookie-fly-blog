import{_ as e,a as i,o as t,b0 as a}from"./chunks/framework.BBy0ZaTh.js";const d=JSON.parse('{"title":"vue 修饰符","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/vue/pages/page19.md","filePath":"Interview/vue/pages/page19.md","lastUpdated":1750600161000}'),r={name:"Interview/vue/pages/page19.md"};function o(p,l,n,s,u,c){return t(),i("div",null,l[0]||(l[0]=[a('<h1 id="vue-修饰符" tabindex="-1">vue 修饰符 <a class="header-anchor" href="#vue-修饰符" aria-label="Permalink to &quot;vue 修饰符&quot;">​</a></h1><p><strong>在 vue 中修饰符可以分为 3 类：</strong></p><ul><li>事件修饰符</li><li>按键修饰符</li><li>表单修饰符</li></ul><p><strong>事件修饰符</strong></p><blockquote><p>在事件处理程序中调用 event.preventDefault 或 event.stopPropagation 方法是非常常见的需求。尽管可以在 methods 中轻松实现这点，但更好的方式是：methods 只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。 为了解决这个问题，vue 为 v-on 提供了事件修饰符。通过由点 . 表示的指令后缀来调用修饰符。</p></blockquote><p>常见的事件修饰符如下：</p><ul><li>.stop：阻止冒泡。</li><li>.prevent：阻止默认事件。</li><li>.capture：使用事件捕获模式。</li><li>.self：只在当前元素本身触发。</li><li>.once：只触发一次。</li><li>.passive：默认行为将会立即触发。</li></ul><p><strong>按键修饰符</strong></p><p>除了事件修饰符以外，在 vue 中还提供了有鼠标修饰符，键值修饰符，系统修饰符等功能。</p><ul><li>.left：左键</li><li>.right：右键</li><li>.middle：滚轮</li><li>.enter：回车</li><li>.tab：制表键</li><li>.delete：捕获 “删除” 和 “退格” 键</li><li>.esc：返回</li><li>.space：空格</li><li>.up：上</li><li>.down：下</li><li>.left：左</li><li>.right：右</li><li>.ctrl：ctrl 键</li><li>.alt：alt 键</li><li>.shift：shift 键</li><li>.meta：meta 键</li></ul><p><strong>表单修饰符</strong></p><blockquote><p>vue 同样也为表单控件也提供了修饰符，常见的有 .lazy、 .number 和 .trim。</p></blockquote><ul><li>.lazy：在文本框失去焦点时才会渲染</li><li>.number：将文本框中所输入的内容转换为number类型</li><li>.trim：可以自动过滤输入首尾的空格</li></ul>',13)]))}const _=e(r,[["render",o]]);export{d as __pageData,_ as default};
