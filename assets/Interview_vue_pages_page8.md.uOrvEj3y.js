import{_ as a,a as i,o as s,b0 as t}from"./chunks/framework.BBy0ZaTh.js";const k=JSON.parse('{"title":"vue组件通信方式有哪些及原理","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/vue/pages/page8.md","filePath":"Interview/vue/pages/page8.md","lastUpdated":1752408143000}'),l={name:"Interview/vue/pages/page8.md"};function n(o,e,d,h,r,p){return s(),i("div",null,e[0]||(e[0]=[t(`<h1 id="vue组件通信方式有哪些及原理" tabindex="-1">vue组件通信方式有哪些及原理 <a class="header-anchor" href="#vue组件通信方式有哪些及原理" aria-label="Permalink to &quot;vue组件通信方式有哪些及原理&quot;">​</a></h1><h2 id="父传后代" tabindex="-1">父传后代 <a class="header-anchor" href="#父传后代" aria-label="Permalink to &quot;父传后代&quot;">​</a></h2><blockquote><p>后代拿到了父的数据</p></blockquote><ul><li><code>props</code>：父传子很方便，父传孙很麻烦（父=&gt;子=&gt;孙），这种方式子不能修改父组件的数据</li><li><code>$parent</code>: 这种方式子能修改父组件的数据</li><li><code>provide</code>&amp;<code>inject</code>：依赖注入，优势父组件可以直接向某个后代传值，不用一级一级的传递,官方不推荐使用，但是写组件库时很常用</li><li><code>$attrs</code> &amp;<code>$listeners</code>：透传属性/事件 <ul><li><code>$attrs</code>：接收父组件非 props 的属性</li><li><code>$listeners</code>：接收父组件所有事件监听器。</li></ul><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- 中间组件 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Grandchild</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$attrs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$listeners</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div></li></ul><h2 id="后代传父" tabindex="-1">后代传父 <a class="header-anchor" href="#后代传父" aria-label="Permalink to &quot;后代传父&quot;">​</a></h2><blockquote><p>父拿到了后代的数据</p></blockquote><ul><li>子组件传给父组件用 <code>this.$emit</code></li><li>父组件直接拿子组件数据 <code>this.$refs.子组件ref</code></li></ul><h2 id="兄弟间传值" tabindex="-1">兄弟间传值 <a class="header-anchor" href="#兄弟间传值" aria-label="Permalink to &quot;兄弟间传值&quot;">​</a></h2><ul><li><code>eventBus</code>，实际上就是 <code>new Vue()</code></li></ul><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><p><strong>Vuex</strong></p>`,11)]))}const u=a(l,[["render",n]]);export{k as __pageData,u as default};
