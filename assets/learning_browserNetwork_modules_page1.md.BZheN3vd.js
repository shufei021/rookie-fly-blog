import{_ as t,a,o as l,b0 as e}from"./chunks/framework.BBy0ZaTh.js";const k=JSON.parse('{"title":"浏览器输入 URL 到渲染过程","description":"","frontmatter":{},"headers":[],"relativePath":"learning/browserNetwork/modules/page1.md","filePath":"learning/browserNetwork/modules/page1.md","lastUpdated":1752408143000}'),s={name:"learning/browserNetwork/modules/page1.md"};function o(h,i,r,n,d,c){return l(),a("div",null,i[0]||(i[0]=[e('<h1 id="浏览器输入-url-到渲染过程" tabindex="-1">浏览器输入 URL 到渲染过程 <a class="header-anchor" href="#浏览器输入-url-到渲染过程" aria-label="Permalink to &quot;浏览器输入 URL 到渲染过程&quot;">​</a></h1><h2 id="一、输入-url" tabindex="-1">一、输入 URL <a class="header-anchor" href="#一、输入-url" aria-label="Permalink to &quot;一、输入 URL&quot;">​</a></h2><ul><li>输入 URL，按下 Enter 键。</li><li>浏览器检查是否为搜索关键词。</li><li>如果 URL 不完整，则跳转到默认的搜索引擎。</li></ul><h2 id="二、解析-url" tabindex="-1">二、解析 URL <a class="header-anchor" href="#二、解析-url" aria-label="Permalink to &quot;二、解析 URL&quot;">​</a></h2><ul><li>提取出协议（如 <code>http</code>、<code>https</code>）、域名、端口和路径等信息。</li></ul><h2 id="三、dns-解析-域名解析" tabindex="-1">三、DNS 解析（域名解析） <a class="header-anchor" href="#三、dns-解析-域名解析" aria-label="Permalink to &quot;三、DNS 解析（域名解析）&quot;">​</a></h2><ol><li>按照以下顺序依次查询缓存： <ul><li>浏览器缓存</li><li>操作系统缓存</li><li>路由器缓存</li><li>ISP DNS 服务器缓存</li></ul></li><li>如果都未命中，则通过递归和迭代方式向根域名、顶级域名、权威域名服务器请求 IP 地址。</li><li>最终找到 IP 并更新各级缓存。</li></ol><h4 id="优化点" tabindex="-1">优化点： <a class="header-anchor" href="#优化点" aria-label="Permalink to &quot;优化点：&quot;">​</a></h4><ul><li>使用 <code>&lt;link rel=&quot;dns-prefetch&quot;&gt;</code> 和 <code>&lt;link rel=&quot;preconnect&quot;&gt;</code> 预先提取解析 DNS 并建立连接。</li></ul><h2 id="四、tcp-连接" tabindex="-1">四、TCP 连接 <a class="header-anchor" href="#四、tcp-连接" aria-label="Permalink to &quot;四、TCP 连接&quot;">​</a></h2><ul><li><p><strong>三次握手</strong>：</p><ol><li>客户端 → 服务端：发送 <code>SYN</code> 请求建立连接。</li><li>服务端 → 客户端：发送 <code>SYN-ACK</code> 表示收到并同意建立连接。</li><li>客户端 → 服务端：发送 <code>ACK</code> 确认连接建立。</li></ol></li><li><p><strong>TLS 握手（HTTPS）</strong>：</p><ol><li>客户端 → 服务端：发送随机数、加密套件列表、TLS 版本。</li><li>服务端 → 客户端：发送随机数、选择的加密套件、含公钥的证书。</li><li>客户端生成主密钥，使用公钥加密后发送给服务端。</li><li>双方生成会话密钥，后续通信使用对称加密。</li></ol></li></ul><h2 id="五、发起请求" tabindex="-1">五、发起请求 <a class="header-anchor" href="#五、发起请求" aria-label="Permalink to &quot;五、发起请求&quot;">​</a></h2><ul><li>发送请求报文，包括： <ul><li>请求行（如 GET /index.html HTTP/1.1）</li><li>请求头（如 Host、User-Agent）</li><li>请求体（可选）</li></ul></li></ul><h2 id="六、接收请求并响应" tabindex="-1">六、接收请求并响应 <a class="header-anchor" href="#六、接收请求并响应" aria-label="Permalink to &quot;六、接收请求并响应&quot;">​</a></h2><ul><li><p><strong>CDN 分发</strong>：请求可能被分发到就近 CDN 节点服务器。</p></li><li><p><strong>缓存检查</strong>：</p><ul><li>强缓存：<code>Cache-Control: max-age=xxx</code>，直接返回 <code>200</code></li><li>协商缓存： <ul><li><code>Last-Modified</code> / <code>If-Modified-Since</code></li><li><code>ETag</code> / <code>If-None-Match</code></li><li>若未修改则返回 <code>304 Not Modified</code></li></ul></li></ul></li><li><p><strong>重定向</strong>：</p><ul><li><code>301</code> 永久重定向：下次不再走重定向</li><li><code>302</code> 临时重定向：每次请求都会走重定向</li></ul></li><li><p><strong>业务逻辑处理</strong>：</p><ul><li>查询数据库</li><li>模板渲染（SSR）</li><li>返回响应报文（状态码、响应头、响应体）</li></ul></li></ul><h4 id="优化点-1" tabindex="-1">优化点： <a class="header-anchor" href="#优化点-1" aria-label="Permalink to &quot;优化点：&quot;">​</a></h4><ul><li>尽量避免重定向，减少网络往返时间。</li><li>合理设置缓存以加快页面加载速度。</li><li>使用 CDN 加速资源加载。</li></ul><h2 id="七、接收响应并解析" tabindex="-1">七、接收响应并解析 <a class="header-anchor" href="#七、接收响应并解析" aria-label="Permalink to &quot;七、接收响应并解析&quot;">​</a></h2><ul><li><strong>HTML 解析</strong>：构建 DOM 树。</li><li><strong>CSS 解析</strong>：构建 CSSOM 树。 <ul><li>JS 加载可能会阻塞 CSSOM 构建，进而阻塞页面渲染。</li><li>可使用 <code>async</code> 或 <code>defer</code> 属性解决。</li></ul></li><li><strong>合并 DOM 和 CSSOM</strong>：生成 Render Tree。</li><li><strong>布局（Layout）</strong>：计算元素大小和位置。</li><li><strong>绘制（Paint）</strong>：将像素绘制到屏幕上。</li><li><strong>合成（Composite）</strong>：多个图层合并，提升渲染性能。</li></ul><h2 id="八、加载子资源" tabindex="-1">八、加载子资源 <a class="header-anchor" href="#八、加载子资源" aria-label="Permalink to &quot;八、加载子资源&quot;">​</a></h2><ul><li>HTML 解析过程中可能触发 JS、CSS、图片等资源请求。</li><li>可能引起页面“重绘（Repaint）”和“回流（Reflow）”。</li></ul><h4 id="优化点-2" tabindex="-1">优化点： <a class="header-anchor" href="#优化点-2" aria-label="Permalink to &quot;优化点：&quot;">​</a></h4><ul><li>将 JS 放在 <code>&lt;body&gt;</code> 底部，避免阻塞渲染。</li><li>给 JS 添加 <code>async</code> 或 <code>defer</code> 属性，defer 按顺序执行，async 是异步无序执行，适用于不依赖页面 DOM 的脚本。</li><li>减少 DOM 嵌套层级，提高查找效率。</li><li>对关键资源使用 <code>&lt;link rel=&quot;preload&quot;&gt;</code> 预加载。</li><li>使用 <code>&lt;link rel=&quot;prefetch&quot;&gt;</code> 和 <code>&lt;link rel=&quot;preconnect&quot;&gt;</code> 提前请求和建立连接。</li><li>图片压缩与懒加载。</li><li>使用 SSR（服务端渲染）或 SSG（静态生成）。</li><li>使用 HTTP/2 或 HTTP/3 提升性能（多路复用、头部压缩等），多路复用解决了 HOL blocking，头部压缩减少传输体积。</li><li>使用内联CSS，减少 HTTP 请求。</li></ul><h2 id="九、页面加载完成" tabindex="-1">九、页面加载完成 <a class="header-anchor" href="#九、页面加载完成" aria-label="Permalink to &quot;九、页面加载完成&quot;">​</a></h2><ul><li>触发 <code>window.onload</code> 事件。</li></ul><h2 id="十、断开连接" tabindex="-1">十、断开连接 <a class="header-anchor" href="#十、断开连接" aria-label="Permalink to &quot;十、断开连接&quot;">​</a></h2><ul><li><strong>四次挥手</strong>： <ol><li>客户端 → 服务端：发送 <code>FIN</code> 请求断开连接。</li><li>服务端 → 客户端：发送 <code>ACK</code> 确认。</li><li>服务端 → 客户端：发送 <code>FIN</code> 请求断开连接。</li><li>客户端 → 服务端：发送 <code>ACK</code> 确认。</li></ol></li><li>等待 2MSL（最大报文段生存时间），确保最后一个 ACK 被接收，连接正式断开。</li></ul><h2 id="🚀-更全面的优化建议-按流程补充" tabindex="-1">🚀 更全面的优化建议（按流程补充） <a class="header-anchor" href="#🚀-更全面的优化建议-按流程补充" aria-label="Permalink to &quot;🚀 更全面的优化建议（按流程补充）&quot;">​</a></h2><h3 id="_1-dns-解析阶段优化" tabindex="-1">1. <strong>DNS 解析阶段优化</strong> <a class="header-anchor" href="#_1-dns-解析阶段优化" aria-label="Permalink to &quot;1. **DNS 解析阶段优化**&quot;">​</a></h3><h4 id="✅-dns-prefetch-和-preconnect" tabindex="-1">✅ <code>dns-prefetch</code> 和 <code>preconnect</code> <a class="header-anchor" href="#✅-dns-prefetch-和-preconnect" aria-label="Permalink to &quot;✅ `dns-prefetch` 和 `preconnect`&quot;">​</a></h4><ul><li><code>&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//example.com&quot;&gt;</code>：提前解析目标域名的 DNS。</li><li><code>&lt;link rel=&quot;preconnect&quot; href=&quot;//example.com&quot;&gt;</code>：不仅解析 DNS，还建立 TCP 连接（甚至 TLS 握手）。</li></ul><blockquote><p><strong>适用场景</strong>：跨域资源较多时（如 CDN、第三方库、统计脚本），提前预连接能显著减少后续请求延迟。</p></blockquote><h4 id="✅-使用-http-2-或更高版本" tabindex="-1">✅ 使用 HTTP/2 或更高版本 <a class="header-anchor" href="#✅-使用-http-2-或更高版本" aria-label="Permalink to &quot;✅ 使用 HTTP/2 或更高版本&quot;">​</a></h4><ul><li>支持多路复用，避免多个请求阻塞在同一个 TCP 连接上。</li></ul><hr><h3 id="_2-tcp-tls-握手阶段优化" tabindex="-1">2. <strong>TCP &amp; TLS 握手阶段优化</strong> <a class="header-anchor" href="#_2-tcp-tls-握手阶段优化" aria-label="Permalink to &quot;2. **TCP &amp; TLS 握手阶段优化**&quot;">​</a></h3><h4 id="✅-启用-ocsp-stapling-证书吊销状态查询" tabindex="-1">✅ 启用 OCSP Stapling（证书吊销状态查询） <a class="header-anchor" href="#✅-启用-ocsp-stapling-证书吊销状态查询" aria-label="Permalink to &quot;✅ 启用 OCSP Stapling（证书吊销状态查询）&quot;">​</a></h4><ul><li>服务器将证书吊销信息附加到 TLS 握手中，客户端无需单独去验证证书有效性，节省时间。</li></ul><h4 id="✅-使用会话恢复-session-resumption" tabindex="-1">✅ 使用会话恢复（Session Resumption） <a class="header-anchor" href="#✅-使用会话恢复-session-resumption" aria-label="Permalink to &quot;✅ 使用会话恢复（Session Resumption）&quot;">​</a></h4><ul><li>包括 Session ID 和 Session Ticket 机制，避免每次握手都进行完整的密钥交换。</li></ul><hr><h3 id="_3-http-请求与响应阶段优化" tabindex="-1">3. <strong>HTTP 请求与响应阶段优化</strong> <a class="header-anchor" href="#_3-http-请求与响应阶段优化" aria-label="Permalink to &quot;3. **HTTP 请求与响应阶段优化**&quot;">​</a></h3><h4 id="✅-启用缓存策略" tabindex="-1">✅ 启用缓存策略 <a class="header-anchor" href="#✅-启用缓存策略" aria-label="Permalink to &quot;✅ 启用缓存策略&quot;">​</a></h4><table tabindex="0"><thead><tr><th>缓存方式</th><th>响应头</th><th>特点</th></tr></thead><tbody><tr><td>强缓存</td><td><code>Cache-Control: max-age=xxx</code></td><td>不发起请求，直接使用本地缓存</td></tr><tr><td>协商缓存</td><td><code>ETag/If-None-Match</code> 或 <code>Last-Modified/If-Modified-Since</code></td><td>若未修改则返回 304</td></tr></tbody></table><blockquote><p>推荐优先使用 ETag，因为 Last-Modified 精度低且可能误判。</p></blockquote><h4 id="✅-使用-cdn-加速静态资源" tabindex="-1">✅ 使用 CDN 加速静态资源 <a class="header-anchor" href="#✅-使用-cdn-加速静态资源" aria-label="Permalink to &quot;✅ 使用 CDN 加速静态资源&quot;">​</a></h4><ul><li>将图片、CSS、JS 等静态资源托管至 CDN，根据用户地理位置就近分发。</li></ul><h4 id="✅-减少重定向次数" tabindex="-1">✅ 减少重定向次数 <a class="header-anchor" href="#✅-减少重定向次数" aria-label="Permalink to &quot;✅ 减少重定向次数&quot;">​</a></h4><ul><li>避免不必要的 301/302 跳转，尤其是首页加载时。</li><li>可通过工具检测是否存在链式重定向（如 <code>/a → /b → /c</code>）。</li></ul><hr><h3 id="_4-页面渲染阶段优化" tabindex="-1">4. <strong>页面渲染阶段优化</strong> <a class="header-anchor" href="#_4-页面渲染阶段优化" aria-label="Permalink to &quot;4. **页面渲染阶段优化**&quot;">​</a></h3><h4 id="✅-避免-js-阻塞-html-解析" tabindex="-1">✅ 避免 JS 阻塞 HTML 解析 <a class="header-anchor" href="#✅-避免-js-阻塞-html-解析" aria-label="Permalink to &quot;✅ 避免 JS 阻塞 HTML 解析&quot;">​</a></h4><ul><li>不要在 <code>&lt;head&gt;</code> 中加载同步 JS，可改用： <ul><li><code>async</code>：异步加载并立即执行，顺序不确定。</li><li><code>defer</code>：异步加载，等到 HTML 解析完成后按顺序执行。</li></ul></li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main.js&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;init.js&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="✅-提前加载关键资源" tabindex="-1">✅ 提前加载关键资源 <a class="header-anchor" href="#✅-提前加载关键资源" aria-label="Permalink to &quot;✅ 提前加载关键资源&quot;">​</a></h4><ul><li>使用 <code>&lt;link rel=&quot;preload&quot;&gt;</code> 预加载关键字体、CSS、JS、图片等：</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preload&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;critical.css&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;style&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preload&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;font.woff2&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;font&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;font/woff2&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> crossorigin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="✅-使用-link-rel-prefetch-预取未来页面资源" tabindex="-1">✅ 使用 <code>&lt;link rel=&quot;prefetch&quot;&gt;</code> 预取未来页面资源 <a class="header-anchor" href="#✅-使用-link-rel-prefetch-预取未来页面资源" aria-label="Permalink to &quot;✅ 使用 `&lt;link rel=&quot;prefetch&quot;&gt;` 预取未来页面资源&quot;">​</a></h4><ul><li>适用于下一页或用户可能访问的内容，例如点击后跳转的页面所需资源。</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prefetch&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/next-page.html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><hr><h3 id="_5-子资源加载阶段优化" tabindex="-1">5. <strong>子资源加载阶段优化</strong> <a class="header-anchor" href="#_5-子资源加载阶段优化" aria-label="Permalink to &quot;5. **子资源加载阶段优化**&quot;">​</a></h3><h4 id="✅-图片优化" tabindex="-1">✅ 图片优化 <a class="header-anchor" href="#✅-图片优化" aria-label="Permalink to &quot;✅ 图片优化&quot;">​</a></h4><table tabindex="0"><thead><tr><th>技术</th><th>说明</th></tr></thead><tbody><tr><td>懒加载</td><td>使用 <code>loading=&quot;lazy&quot;</code> 属性懒加载图片和 iframe</td></tr><tr><td>格式压缩</td><td>使用 WebP 替代 JPEG/PNG，体积更小</td></tr><tr><td>响应式图片</td><td>使用 <code>&lt;img srcset=&quot;...&quot;&gt;</code> 提供不同分辨率图片</td></tr><tr><td>Base64 内联</td><td>小图标可使用 base64 编码内嵌，减少请求数</td></tr></tbody></table><h4 id="✅-css-优化" tabindex="-1">✅ CSS 优化 <a class="header-anchor" href="#✅-css-优化" aria-label="Permalink to &quot;✅ CSS 优化&quot;">​</a></h4><ul><li><strong>Critical CSS</strong>：将首屏所需的 CSS 内联到 HTML 中，加快首次渲染速度。</li><li><strong>CSS Tree Shaking</strong>：使用工具（如 PurgeCSS）移除无用样式。</li><li><strong>媒体查询分离</strong>：使用 <code>media</code> 属性加载特定设备样式，避免一次性加载全部 CSS。</li></ul><h4 id="✅-js-优化" tabindex="-1">✅ JS 优化 <a class="header-anchor" href="#✅-js-优化" aria-label="Permalink to &quot;✅ JS 优化&quot;">​</a></h4><ul><li><strong>代码分割（Code Splitting）</strong>：按需加载模块（如 React 的 <code>React.lazy()</code> + <code>Suspense</code>）。</li><li><strong>防抖节流（Debounce/Throttle）</strong>：减少频繁触发的事件对性能的影响。</li><li><strong>避免全局污染</strong>：使用模块化开发（ES Modules）提升可维护性和加载效率。</li></ul><hr><h3 id="_6-整体性能监控与调试" tabindex="-1">6. <strong>整体性能监控与调试</strong> <a class="header-anchor" href="#_6-整体性能监控与调试" aria-label="Permalink to &quot;6. **整体性能监控与调试**&quot;">​</a></h3><h4 id="✅-使用-lighthouse-性能评分工具" tabindex="-1">✅ 使用 Lighthouse 性能评分工具 <a class="header-anchor" href="#✅-使用-lighthouse-性能评分工具" aria-label="Permalink to &quot;✅ 使用 Lighthouse 性能评分工具&quot;">​</a></h4><ul><li>Chrome DevTools 内置 Lighthouse 工具，可评估性能、可访问性、SEO 等维度，并提供优化建议。</li></ul><h4 id="✅-监控-fcp、lcp、cls、fid-等核心指标" tabindex="-1">✅ 监控 FCP、LCP、CLS、FID 等核心指标 <a class="header-anchor" href="#✅-监控-fcp、lcp、cls、fid-等核心指标" aria-label="Permalink to &quot;✅ 监控 FCP、LCP、CLS、FID 等核心指标&quot;">​</a></h4><ul><li><strong>FCP</strong>（First Contentful Paint）：内容首次绘制时间</li><li><strong>LCP</strong>（Largest Contentful Paint）：最大内容绘制时间</li><li><strong>CLS</strong>（Cumulative Layout Shift）：布局偏移得分</li><li><strong>FID</strong>（First Input Delay）：用户首次交互延迟</li></ul><hr><h3 id="_7-构建与部署优化" tabindex="-1">7. <strong>构建与部署优化</strong> <a class="header-anchor" href="#_7-构建与部署优化" aria-label="Permalink to &quot;7. **构建与部署优化**&quot;">​</a></h3><h4 id="✅-使用-webpack-vite-构建工具优化" tabindex="-1">✅ 使用 Webpack/Vite 构建工具优化 <a class="header-anchor" href="#✅-使用-webpack-vite-构建工具优化" aria-label="Permalink to &quot;✅ 使用 Webpack/Vite 构建工具优化&quot;">​</a></h4><ul><li>启用 Gzip/Brotli 压缩</li><li>开启 Tree Shaking 删除未使用代码</li><li>合理配置 Code Splitting 策略</li></ul><h4 id="✅-设置合适的-http-响应头" tabindex="-1">✅ 设置合适的 HTTP 响应头 <a class="header-anchor" href="#✅-设置合适的-http-响应头" aria-label="Permalink to &quot;✅ 设置合适的 HTTP 响应头&quot;">​</a></h4><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Cache-Control</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> max-age=31536000, public, immutable</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text/html; charset=UTF-8</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Vary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Accept-Encoding</span></span></code></pre></div><h4 id="✅-启用-server-push-http-2" tabindex="-1">✅ 启用 Server Push（HTTP/2） <a class="header-anchor" href="#✅-启用-server-push-http-2" aria-label="Permalink to &quot;✅ 启用 Server Push（HTTP/2）&quot;">​</a></h4><ul><li>服务端可主动推送资源给浏览器，减少请求往返。</li></ul><hr><h2 id="📌-补充总结表格-常见优化策略一览" tabindex="-1">📌 补充总结表格：常见优化策略一览 <a class="header-anchor" href="#📌-补充总结表格-常见优化策略一览" aria-label="Permalink to &quot;📌 补充总结表格：常见优化策略一览&quot;">​</a></h2><table tabindex="0"><thead><tr><th>优化方向</th><th>技术手段</th><th>效果</th></tr></thead><tbody><tr><td>DNS 解析</td><td><code>dns-prefetch</code>, <code>preconnect</code></td><td>减少 DNS 解析时间</td></tr><tr><td>TCP/TLS 握手</td><td>OCSP Stapling、Session Resumption</td><td>缩短握手时间</td></tr><tr><td>请求响应</td><td>缓存控制、CDN、减少重定向</td><td>减少请求次数和延迟</td></tr><tr><td>页面渲染</td><td><code>defer</code>, <code>async</code>, <code>preload</code>, Critical CSS</td><td>加快首次渲染速度</td></tr><tr><td>子资源加载</td><td>图片懒加载、WebP、Base64、代码分割</td><td>减少资源大小和请求数</td></tr><tr><td>构建部署</td><td>Gzip/Brotli、Tree Shaking、Server Push</td><td>提升加载速度和运行效率</td></tr><tr><td>性能监控</td><td>Lighthouse、Core Web Vitals</td><td>持续优化用户体验</td></tr></tbody></table>',85)]))}const u=t(s,[["render",o]]);export{k as __pageData,u as default};
