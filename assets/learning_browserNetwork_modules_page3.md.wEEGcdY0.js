import{_ as i,a,o as t,b0 as e}from"./chunks/framework.BBy0ZaTh.js";const c=JSON.parse('{"title":"🎯跨域及 JSONP","description":"","frontmatter":{},"headers":[],"relativePath":"learning/browserNetwork/modules/page3.md","filePath":"learning/browserNetwork/modules/page3.md","lastUpdated":1752457654000}'),l={name:"learning/browserNetwork/modules/page3.md"};function h(n,s,d,r,o,p){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="🎯跨域及-jsonp" tabindex="-1">🎯跨域及 JSONP <a class="header-anchor" href="#🎯跨域及-jsonp" aria-label="Permalink to &quot;🎯跨域及 JSONP&quot;">​</a></h1><h3 id="一、什么是跨域" tabindex="-1">一、什么是跨域？ <a class="header-anchor" href="#一、什么是跨域" aria-label="Permalink to &quot;一、什么是跨域？&quot;">​</a></h3><blockquote><p><strong>一句话总结：</strong> 跨域（Cross-Origin）是浏览器的一种同源策略（Same-origin Policy）限制，当请求的协议、域名或端口与当前页面不一致时，就会触发跨域限制。</p></blockquote><h4 id="✅-同源三要素" tabindex="-1">✅ 同源三要素： <a class="header-anchor" href="#✅-同源三要素" aria-label="Permalink to &quot;✅ 同源三要素：&quot;">​</a></h4><p>只有当以下三个部分完全相同，才被认为是“同源”：</p><table tabindex="0"><thead><tr><th>属性</th><th>示例</th></tr></thead><tbody><tr><td>协议（Protocol）</td><td><code>http</code> vs <code>https</code></td></tr><tr><td>域名（Host）</td><td><code>www.example.com</code> vs <code>api.example.com</code></td></tr><tr><td>端口（Port）</td><td><code>8080</code> vs <code>3000</code></td></tr></tbody></table><blockquote><p>比如从 <code>http://a.com</code> 请求 <code>http://b.com/data</code> 就会跨域。</p></blockquote><hr><h3 id="二、为什么会有跨域限制" tabindex="-1">二、为什么会有跨域限制？ <a class="header-anchor" href="#二、为什么会有跨域限制" aria-label="Permalink to &quot;二、为什么会有跨域限制？&quot;">​</a></h3><blockquote><p><strong>一句话总结：</strong> 跨域是为了防止恶意网站通过脚本访问其他网站的资源，保护用户数据安全，是浏览器的安全机制。</p></blockquote><p>比如：如果浏览器不限制跨域，攻击者可以通过 <code>&lt;script&gt;</code> 或 AJAX 请求任意网站接口，获取用户的敏感信息（如 Cookie），造成 CSRF 攻击等安全问题。</p><hr><h3 id="三、常见的跨域场景和解决方案" tabindex="-1">三、常见的跨域场景和解决方案 <a class="header-anchor" href="#三、常见的跨域场景和解决方案" aria-label="Permalink to &quot;三、常见的跨域场景和解决方案&quot;">​</a></h3><table tabindex="0"><thead><tr><th>方案</th><th>说明</th><th>适用场景</th></tr></thead><tbody><tr><td>JSONP</td><td>利用 <code>&lt;script&gt;</code> 标签不受跨域限制的特点</td><td>GET 请求、兼容老浏览器</td></tr><tr><td>CORS</td><td>浏览器原生支持的跨域方案，需要后端配合设置响应头</td><td>现代浏览器推荐方案</td></tr><tr><td>代理服务器</td><td>前端请求同源后端，由后端转发请求目标服务</td><td>所有跨域场景通用</td></tr><tr><td>WebSocket</td><td>不受同源策略限制</td><td>实时通信场景</td></tr><tr><td>postMessage</td><td>跨文档通信 API，用于 iframe 或 window 间通信</td><td>多窗口/iframe 通信</td></tr></tbody></table><hr><h3 id="四、jsonp-的原理和使用方式" tabindex="-1">四、JSONP 的原理和使用方式 <a class="header-anchor" href="#四、jsonp-的原理和使用方式" aria-label="Permalink to &quot;四、JSONP 的原理和使用方式&quot;">​</a></h3><blockquote><p><strong>一句话总结：</strong> JSONP 是一种利用 <code>&lt;script&gt;</code> 标签没有跨域限制的特性，实现跨域请求的“伪异步”技术。</p></blockquote><h4 id="✅-原理" tabindex="-1">✅ 原理： <a class="header-anchor" href="#✅-原理" aria-label="Permalink to &quot;✅ 原理：&quot;">​</a></h4><ol><li>客户端定义一个回调函数，例如 <code>function handleResponse(data) { ... }</code></li><li>动态创建 <code>&lt;script src=&quot;http://api.example.com/data?callback=handleResponse&quot;&gt;</code></li><li>服务端接收到请求后，将数据包装成 <code>handleResponse({...})</code> 返回</li><li>浏览器执行返回的 JS 脚本，调用回调函数处理数据</li></ol><h4 id="✅-示例代码" tabindex="-1">✅ 示例代码： <a class="header-anchor" href="#✅-示例代码" aria-label="Permalink to &quot;✅ 示例代码：&quot;">​</a></h4><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;接收到跨域数据:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://api.example.com/data?callback=handleResponse&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="✅-优点" tabindex="-1">✅ 优点： <a class="header-anchor" href="#✅-优点" aria-label="Permalink to &quot;✅ 优点：&quot;">​</a></h4><ul><li>兼容性好，适用于 IE6+ 等老旧浏览器</li><li>不依赖现代浏览器特性</li></ul><h4 id="❌-缺点" tabindex="-1">❌ 缺点： <a class="header-anchor" href="#❌-缺点" aria-label="Permalink to &quot;❌ 缺点：&quot;">​</a></h4><ul><li>只能发送 <code>GET</code> 请求</li><li>安全性差，容易引发 XSS 攻击</li><li>错误处理困难（无法监听错误状态）</li></ul><hr><h3 id="五、jsonp-与-cors-的区别" tabindex="-1">五、JSONP 与 CORS 的区别 <a class="header-anchor" href="#五、jsonp-与-cors-的区别" aria-label="Permalink to &quot;五、JSONP 与 CORS 的区别&quot;">​</a></h3><table tabindex="0"><thead><tr><th>对比项</th><th>JSONP</th><th>CORS</th></tr></thead><tbody><tr><td>请求类型</td><td>仅支持 GET</td><td>支持所有 HTTP 方法</td></tr><tr><td>安全性</td><td>较低</td><td>更高（可控制来源、方法、头部）</td></tr><tr><td>是否需要后端配合</td><td>是</td><td>是</td></tr><tr><td>是否支持自定义 headers</td><td>否</td><td>是</td></tr><tr><td>是否支持 cookie</td><td>否</td><td>是（需设置 <code>withCredentials</code>）</td></tr><tr><td>兼容性</td><td>好（IE6+）</td><td>现代浏览器支持良好</td></tr></tbody></table><hr><h3 id="六、实际开发中的选择建议" tabindex="-1">六、实际开发中的选择建议 <a class="header-anchor" href="#六、实际开发中的选择建议" aria-label="Permalink to &quot;六、实际开发中的选择建议&quot;">​</a></h3><table tabindex="0"><thead><tr><th>场景</th><th>推荐方案</th></tr></thead><tbody><tr><td>新项目、现代浏览器环境</td><td>使用 CORS</td></tr><tr><td>老旧系统、需要兼容 IE</td><td>使用 JSONP</td></tr><tr><td>无法修改后端配置</td><td>使用代理服务器</td></tr><tr><td>实时通信需求</td><td>使用 WebSocket</td></tr><tr><td>多窗口通信</td><td>使用 <code>postMessage</code></td></tr></tbody></table><hr><h3 id="七、总结归纳-适合结尾" tabindex="-1">七、总结归纳（适合结尾） <a class="header-anchor" href="#七、总结归纳-适合结尾" aria-label="Permalink to &quot;七、总结归纳（适合结尾）&quot;">​</a></h3><blockquote><p>我可以用一句话总结跨域和 JSONP： “<strong>跨域是浏览器为了安全而施加的限制，JSONP 是早期解决跨域问题的一种变通手段，但已被更安全灵活的 CORS 所取代。</strong>”</p></blockquote><p>掌握这些知识不仅有助于理解前后端交互机制，还能在调试接口、部署项目时快速定位和解决问题。</p><h2 id="🌟-知识延伸" tabindex="-1">🌟 知识延伸 <a class="header-anchor" href="#🌟-知识延伸" aria-label="Permalink to &quot;🌟 知识延伸&quot;">​</a></h2><h3 id="_1-jsonp-的本质不是-json-格式" tabindex="-1">1. <strong>JSONP 的本质不是 JSON 格式</strong> <a class="header-anchor" href="#_1-jsonp-的本质不是-json-格式" aria-label="Permalink to &quot;1. **JSONP 的本质不是 JSON 格式**&quot;">​</a></h3><ul><li>JSONP 全称是 “JSON with Padding”，它并不是真正的 JSON 数据格式。</li><li>它的本质是一个 JavaScript 函数调用，数据是作为参数传入函数执行的。</li><li>示例返回内容：<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handleResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;age&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre></div></li><li>这个结构不是一个纯粹的 JSON 字符串，而是一个 JS 表达式。</li></ul><h3 id="_2-cors-是-w3c-标准-分为简单请求与非简单请求" tabindex="-1">2. <strong>CORS 是 W3C 标准，分为简单请求与非简单请求</strong> <a class="header-anchor" href="#_2-cors-是-w3c-标准-分为简单请求与非简单请求" aria-label="Permalink to &quot;2. **CORS 是 W3C 标准，分为简单请求与非简单请求**&quot;">​</a></h3><ul><li><strong>简单请求（Simple Request）</strong>：满足以下条件： <ul><li>请求方法是 <code>GET</code>、<code>HEAD</code>、<code>POST</code></li><li>请求头只包含 <code>Accept</code>、<code>Content-Type</code>（只能是 <code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code> 或 <code>text/plain</code>）、<code>Origin</code></li></ul></li><li><strong>非简单请求</strong>：如使用了 <code>PUT</code>、<code>DELETE</code> 方法，或设置了自定义 Header，则会触发 <strong>预检请求（preflight request）</strong>，即浏览器先发送一个 <code>OPTIONS</code> 请求询问服务器是否允许跨域操作。</li></ul><h3 id="_3-使用-fetch-和-xmlhttprequest-设置-cors-相关参数" tabindex="-1">3. <strong>使用 <code>fetch</code> 和 <code>XMLHttpRequest</code> 设置 CORS 相关参数</strong> <a class="header-anchor" href="#_3-使用-fetch-和-xmlhttprequest-设置-cors-相关参数" aria-label="Permalink to &quot;3. **使用 \`fetch\` 和 \`XMLHttpRequest\` 设置 CORS 相关参数**&quot;">​</a></h3><h4 id="使用-fetch-发送带凭据的请求" tabindex="-1">使用 <code>fetch</code> 发送带凭据的请求： <a class="header-anchor" href="#使用-fetch-发送带凭据的请求" aria-label="Permalink to &quot;使用 \`fetch\` 发送带凭据的请求：&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://api.example.com/data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;GET&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;cors&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 默认值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  credentials: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;include&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 包含 Cookie</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h4 id="使用-xmlhttprequest-设置-cors" tabindex="-1">使用 <code>XMLHttpRequest</code> 设置 CORS： <a class="header-anchor" href="#使用-xmlhttprequest-设置-cors" aria-label="Permalink to &quot;使用 \`XMLHttpRequest\` 设置 CORS：&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> xhr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XMLHttpRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;GET&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://api.example.com/data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.withCredentials </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 允许携带 Cookie</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h3 id="_4-如何在-nginx-node-js-中配置代理解决跨域" tabindex="-1">4. <strong>如何在 Nginx / Node.js 中配置代理解决跨域？</strong> <a class="header-anchor" href="#_4-如何在-nginx-node-js-中配置代理解决跨域" aria-label="Permalink to &quot;4. **如何在 Nginx / Node.js 中配置代理解决跨域？**&quot;">​</a></h3><h4 id="nginx-配置示例" tabindex="-1">Nginx 配置示例： <a class="header-anchor" href="#nginx-配置示例" aria-label="Permalink to &quot;Nginx 配置示例：&quot;">​</a></h4><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> /api/ </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    proxy_pass </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">https://backend.example.com/;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    add_header </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Access-Control-Allow-Origin&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    add_header </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Access-Control-Allow-Methods&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;GET, POST, OPTIONS&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="node-js-express-配置示例" tabindex="-1">Node.js Express 配置示例： <a class="header-anchor" href="#node-js-express-配置示例" aria-label="Permalink to &quot;Node.js Express 配置示例：&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Access-Control-Allow-Origin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Access-Control-Allow-Headers&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type, Authorization&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Access-Control-Allow-Methods&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;GET, POST, PUT, DELETE, OPTIONS&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><hr><h2 id="❓-延申问题" tabindex="-1">❓ 延申问题 <a class="header-anchor" href="#❓-延申问题" aria-label="Permalink to &quot;❓ 延申问题&quot;">​</a></h2><h3 id="_1-jsonp-是怎么工作的-为什么它能绕过跨域" tabindex="-1">1. <strong>JSONP 是怎么工作的？为什么它能绕过跨域？</strong> <a class="header-anchor" href="#_1-jsonp-是怎么工作的-为什么它能绕过跨域" aria-label="Permalink to &quot;1. **JSONP 是怎么工作的？为什么它能绕过跨域？**&quot;">​</a></h3><blockquote><p>答案： JSONP 利用了 <code>&lt;script&gt;</code> 标签不受同源策略限制的特点。浏览器允许页面加载外部 JS 资源，即使它们来自不同域名。通过动态创建 <code>&lt;script&gt;</code> 标签，并将回调函数名作为 URL 参数传递给服务端，服务端返回的是一段函数调用代码，从而实现跨域通信。</p></blockquote><h3 id="_2-jsonp-有哪些安全隐患" tabindex="-1">2. <strong>JSONP 有哪些安全隐患？</strong> <a class="header-anchor" href="#_2-jsonp-有哪些安全隐患" aria-label="Permalink to &quot;2. **JSONP 有哪些安全隐患？**&quot;">​</a></h3><blockquote><p>答案：</p><ul><li><strong>XSS 攻击风险</strong>：如果攻击者控制了目标接口，可以在响应中注入恶意脚本。</li><li><strong>无法防御 CSRF</strong>：因为 JSONP 是 GET 请求，容易被伪造请求。</li><li><strong>无法监听错误</strong>：无法判断请求失败的原因，如超时、404、500 错误等。</li></ul></blockquote><h3 id="_3-cors-的预检请求是什么-什么时候会触发" tabindex="-1">3. <strong>CORS 的预检请求是什么？什么时候会触发？</strong> <a class="header-anchor" href="#_3-cors-的预检请求是什么-什么时候会触发" aria-label="Permalink to &quot;3. **CORS 的预检请求是什么？什么时候会触发？**&quot;">​</a></h3><blockquote><p>答案：</p><ul><li>预检请求是浏览器自动发起的一个 <code>OPTIONS</code> 请求，用于确认服务器是否允许当前跨域请求。</li><li>触发时机包括：</li></ul></blockquote><ul><li>使用了除 <code>GET</code>、<code>HEAD</code>、<code>POST</code> 以外的方法（如 <code>PUT</code>、<code>DELETE</code>）</li><li>设置了自定义请求头（如 <code>Authorization</code>、<code>X-Requested-With</code>）</li><li>设置了 <code>Content-Type</code> 为非标准类型（如 <code>application/json</code>）</li></ul><h3 id="_4-如果服务端没开启-cors-前端还能怎么解决跨域" tabindex="-1">4. <strong>如果服务端没开启 CORS，前端还能怎么解决跨域？</strong> <a class="header-anchor" href="#_4-如果服务端没开启-cors-前端还能怎么解决跨域" aria-label="Permalink to &quot;4. **如果服务端没开启 CORS，前端还能怎么解决跨域？**&quot;">​</a></h3><blockquote><p>答案：</p><ul><li>使用 JSONP（仅限 GET 请求）</li><li>通过后端代理（最常用方案）</li><li>使用 Chrome 插件或本地代理临时绕过（仅开发环境）</li><li>使用 Webpack DevServer 配置 proxy 解决开发阶段跨域</li><li>使用浏览器启动参数禁用安全策略（不推荐）</li></ul></blockquote><h3 id="_5-jsonp-和-ajax-请求的区别" tabindex="-1">5. <strong>JSONP 和 Ajax 请求的区别？</strong> <a class="header-anchor" href="#_5-jsonp-和-ajax-请求的区别" aria-label="Permalink to &quot;5. **JSONP 和 Ajax 请求的区别？**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>对比点</th><th>JSONP</th><th>Ajax</th></tr></thead><tbody><tr><td>是否受跨域限制</td><td>否（利用 <code>&lt;script&gt;</code>）</td><td>是（默认受限制）</td></tr><tr><td>支持的请求方式</td><td>仅 GET</td><td>所有 HTTP 方法</td></tr><tr><td>可否设置 Headers</td><td>否</td><td>是</td></tr><tr><td>可否处理错误</td><td>否（无法捕获错误状态）</td><td>是（可监听 error、status）</td></tr><tr><td>安全性</td><td>较低</td><td>更高（配合 CORS）</td></tr></tbody></table>`,63)]))}const E=i(l,[["render",h]]);export{c as __pageData,E as default};
