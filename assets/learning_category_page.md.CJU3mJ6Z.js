import{_ as s,a,o as l,b0 as t}from"./chunks/framework.D10JOWeE.js";const c=JSON.parse('{"title":"系统性的温故而知新","description":"","frontmatter":{},"headers":[],"relativePath":"learning/category/page.md","filePath":"learning/category/page.md","lastUpdated":1753172304000}'),e={name:"learning/category/page.md"};function n(h,i,p,k,r,d){return l(),a("div",null,i[0]||(i[0]=[t(`<h1 id="系统性的温故而知新" tabindex="-1">系统性的温故而知新 <a class="header-anchor" href="#系统性的温故而知新" aria-label="Permalink to &quot;系统性的温故而知新&quot;">​</a></h1><h3 id="系统性主页" tabindex="-1"><a href="/rookie-fly-blog/learning/category/page.html">系统性主页</a> <a class="header-anchor" href="#系统性主页" aria-label="Permalink to &quot;[系统性主页](/learning/category/page)&quot;">​</a></h3><h2 id="浏览器与网络" tabindex="-1">浏览器与网络 <a class="header-anchor" href="#浏览器与网络" aria-label="Permalink to &quot;浏览器与网络&quot;">​</a></h2><h3 id="✅浏览器输入url到渲染过程" tabindex="-1">✅浏览器输入URL到渲染过程 <a class="header-anchor" href="#✅浏览器输入url到渲染过程" aria-label="Permalink to &quot;✅浏览器输入URL到渲染过程&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><h6 id="一、用户输入url" tabindex="-1">一、用户输入URL <a class="header-anchor" href="#一、用户输入url" aria-label="Permalink to &quot;一、用户输入URL&quot;">​</a></h6><ul><li>用户输入<code>URL</code>，按下<code>Enter</code>，浏览器检查输入的<code>URL</code>是否完整，如果不完整则当关键词搜索处理，跳转到默认的搜索引擎</li></ul><h6 id="二、url解析" tabindex="-1">二、URL解析 <a class="header-anchor" href="#二、url解析" aria-label="Permalink to &quot;二、URL解析&quot;">​</a></h6><ul><li>提取出协议、域名、端口和路径等信息</li></ul><h6 id="三、dns解析-域名解析" tabindex="-1">三、DNS解析(域名解析) <a class="header-anchor" href="#三、dns解析-域名解析" aria-label="Permalink to &quot;三、DNS解析(域名解析)&quot;">​</a></h6><ul><li>依次按 <code>浏览器缓存</code>、<code>操作系统缓存</code>、<code>路由器缓存</code>、<code>ISP DNS 服务器缓存</code>查询，如果都没有命中缓存，则依次从<code>根域名</code>、<code>顶级域名</code>、<code>权威域名服务器</code>递归和迭代查询，最终找到该域名的IP地址和更新各级缓存</li></ul><p><strong><code>优化点</code>：</strong> dns-prefetch 和 preconnect，让资源提前DNS 解析和 连接，首屏优化非常有效</p><h6 id="四、tcp连接-三次握手" tabindex="-1">四、TCP连接（三次握手） <a class="header-anchor" href="#四、tcp连接-三次握手" aria-label="Permalink to &quot;四、TCP连接（三次握手）&quot;">​</a></h6><ul><li>客户端-&gt;服务端发送<code>SYN</code>: 请求简历连接</li><li>服务端-&gt;客户端发送<code>SYN-ACK</code>: 接收到请求，并同意连接</li><li>客户端-&gt;服务端发送<code>ACK</code>: 连接成功</li><li>HTTPS TLS 握手 <ul><li><code>Client Hello</code>: 浏览器-&gt;服务端发送发送 TLS 版本、随机数、加密套件列表</li><li><code>Server Hello</code>: 服务端-&gt;浏览器发送 随机数、加密套件、证书（含公钥）</li><li>密钥生成：客户端生成主密钥，用含公钥加密发送给服务端</li><li>密钥会话生成后，后续通信都使用对称加密</li></ul></li></ul><h6 id="五、发起-http-s-请求" tabindex="-1">五、发起 HTTP(s) 请求 <a class="header-anchor" href="#五、发起-http-s-请求" aria-label="Permalink to &quot;五、发起 HTTP(s) 请求&quot;">​</a></h6><ul><li>发送请求报文，包含请求行(user-agent、accept、content-type)、请求头、请求体</li></ul><h6 id="六、服务端接收请求并响应" tabindex="-1">六、服务端接收请求并响应 <a class="header-anchor" href="#六、服务端接收请求并响应" aria-label="Permalink to &quot;六、服务端接收请求并响应&quot;">​</a></h6><ul><li>CDN分发 <ul><li>如果是缓存的静态资源，该请求有可能被分发到就近的服务器进行处理</li></ul></li><li>缓存检查 <ul><li>如果是强缓存（Cache-Control: max-age=xxx）的资源，则直接返回缓存，状态码200</li><li>如果是协商缓存（Last-Modified/if-Modified-Since、Etag/if-none-match）的资源，则检查缓存，返回304 Not Modified</li></ul></li><li>重定向检查 <ul><li>如果返回的是301，永久性重定向到新的URL，下次访问直接访问新地址</li><li>如果返回的是302，临时性重定向到新的URL，下次访问该网站依然还是会重定向</li></ul></li><li>业务逻辑处理 <ul><li>查询数据库、模板渲染SSR</li></ul></li><li>返回响应报文，包含状态码、响应头、响应体</li></ul><h6 id="七、接收响应并解析" tabindex="-1">七、接收响应并解析 <a class="header-anchor" href="#七、接收响应并解析" aria-label="Permalink to &quot;七、接收响应并解析&quot;">​</a></h6><ul><li>解析HTML：构建DOM树</li><li>解析CSS：构建CSSOM树</li><li>合并CSSOM树和DOM树成render树</li><li>布局：计算每个元素的大小和位置</li><li>绘制：将每个元素的绘制到屏幕上</li><li>合并：合并多个图层，优化渲染</li></ul><h6 id="八、加载子资源" tabindex="-1">八、加载子资源 <a class="header-anchor" href="#八、加载子资源" aria-label="Permalink to &quot;八、加载子资源&quot;">​</a></h6><ul><li>在HTML解析的过程中，会加载js、css、图片等资源</li><li>会重绘和回流</li><li>会请求资源和请求数据加载数据渲染</li></ul><p><strong><code>优化点：</code></strong></p><ul><li>图片优化 <ul><li>图片最好设置固定宽高，不然有闪烁问题</li><li>图片懒加载和压缩</li></ul></li><li>加载优化 <ul><li>由于多个资源加载，可以开启HTTP2/3, 多路复用，提升并发多个请求的加载速度</li><li>静态资源可以放在CDN，提升访问速度</li><li>可以设置延迟加载，比如async、defer，或者使用懒加载</li><li>静态资源可以进行压缩，比如gzip、brotli</li><li>非首屏资源可以进行懒加载</li><li>字体资源可以先设置font-display: swap</li><li>prefetch 、preconnect关键资源提前加载，非关键资源延时加载</li><li>内联CSS样式，减少请求数</li><li>使用 SSR（服务端渲染）或 SSG（静态生成）</li><li>对关键资源使用 &lt; link rel=&quot;preload&quot;&gt; 预加载。</li><li>减少 DOM 嵌套层级，提高查找效率。</li><li>将 JS 放在 &lt; body&gt; 底部，避免阻塞渲染。</li></ul></li></ul><h6 id="九、页面加载完成" tabindex="-1">九、页面加载完成 <a class="header-anchor" href="#九、页面加载完成" aria-label="Permalink to &quot;九、页面加载完成&quot;">​</a></h6><ul><li>window.onload 事件触发</li></ul><h6 id="十、断开连接" tabindex="-1">十、断开连接 <a class="header-anchor" href="#十、断开连接" aria-label="Permalink to &quot;十、断开连接&quot;">​</a></h6><ul><li>客户端-&gt;服务器发送FIN： 请求断开连接</li><li>服务器-&gt;客户端发送ACK： 同意断开连接</li><li>服务器-&gt;客户端发送FIN： 请求断开连接</li><li>客户端-&gt;服务器发送ACK： 同意断开连接</li><li>等待2MSL 时间后，等待最后一个ACK包被接收，TCP 断开连接</li></ul></details><h3 id="✅事件轮询" tabindex="-1">✅事件轮询 <a class="header-anchor" href="#✅事件轮询" aria-label="Permalink to &quot;✅事件轮询&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><h5 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h5><ul><li>事件轮询是 JavaScript 引擎用来协调代码执行、处理异步任务的一种机制，确保主线程不会被阻塞，并保证异步操作能按顺序执行</li></ul><h5 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h5><ul><li>JavaScript 是单线程语言，意味着同一时间只能做一件事。为了实现异步非阻塞的能力，JavaScript 引擎通过 调用栈（Call Stack）、消息队列（Callback Queue） 和 事件循环机制 来管理任务调度。</li></ul><h5 id="工作流程" tabindex="-1">工作流程 <a class="header-anchor" href="#工作流程" aria-label="Permalink to &quot;工作流程&quot;">​</a></h5><h6 id="_1-调用栈-call-stack" tabindex="-1">1. 调用栈（Call Stack） <a class="header-anchor" href="#_1-调用栈-call-stack" aria-label="Permalink to &quot;1. 调用栈（Call Stack）&quot;">​</a></h6><ul><li>JS 引擎用来记录当前正在执行的函数调用。</li><li>函数调用时入栈，执行完成后出栈。</li></ul><h6 id="_2-浏览器-api-web-apis" tabindex="-1">2. 浏览器 API（Web APIs） <a class="header-anchor" href="#_2-浏览器-api-web-apis" aria-label="Permalink to &quot;2. 浏览器 API（Web APIs）&quot;">​</a></h6><ul><li>包括 <code>setTimeout</code>、<code>setInterval</code>、<code>DOM 事件</code>、<code>fetch</code> 等浏览器原生功能。</li><li>当这些异步操作完成时，它们会将回调函数交给“消息队列”。</li></ul><h6 id="_3-消息队列-callback-queue" tabindex="-1">3. 消息队列（Callback Queue） <a class="header-anchor" href="#_3-消息队列-callback-queue" aria-label="Permalink to &quot;3. 消息队列（Callback Queue）&quot;">​</a></h6><ul><li>存放已经完成异步操作的回调函数。</li><li>例如：<code>setTimeout</code> 到时间后，其回调会被放入这个队列。</li></ul><h6 id="_4-事件循环-event-loop" tabindex="-1">4. 事件循环（Event Loop） <a class="header-anchor" href="#_4-事件循环-event-loop" aria-label="Permalink to &quot;4. 事件循环（Event Loop）&quot;">​</a></h6><ul><li>不断检查调用栈是否为空，如果空了，就从消息队列取出第一个回调推入调用栈执行。</li><li>这就是事件循环的核心逻辑。</li></ul><h4 id="宏任务-微任务-microtask" tabindex="-1">宏任务 &amp; 微任务（Microtask） <a class="header-anchor" href="#宏任务-微任务-microtask" aria-label="Permalink to &quot;宏任务 &amp; 微任务（Microtask）&quot;">​</a></h4><table tabindex="0"><thead><tr><th>类型</th><th>示例</th><th>特点</th></tr></thead><tbody><tr><td>宏任务（Macro Task）</td><td><code>setTimeout</code>, <code>setInterval</code>, <code>I/O</code>, <code>UI 渲染</code>, <code>script</code> 整体代码</td><td>每次事件循环执行一个宏任务</td></tr><tr><td>微任务（Micro Task）</td><td><code>Promise.then/catch/finally</code>, <code>MutationObserver</code>, <code>queueMicrotask</code></td><td>在当前宏任务结束后立即执行，优先于下一个宏任务</td></tr></tbody></table><h4 id="执行顺序规则" tabindex="-1">执行顺序规则： <a class="header-anchor" href="#执行顺序规则" aria-label="Permalink to &quot;执行顺序规则：&quot;">​</a></h4><ol><li>执行同步代码（整个 script 是宏任务）</li><li>同步代码执行完，清空微任务队列</li><li>取出一个宏任务执行，重复上述过程</li></ol></details><h3 id="✅跨域" tabindex="-1">✅跨域 <a class="header-anchor" href="#✅跨域" aria-label="Permalink to &quot;✅跨域&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><h5 id="什么是跨域-为什么会出现跨域" tabindex="-1">什么是跨域？为什么会出现跨域？ <a class="header-anchor" href="#什么是跨域-为什么会出现跨域" aria-label="Permalink to &quot;什么是跨域？为什么会出现跨域？&quot;">​</a></h5><ul><li>跨域是指浏览器因为 <strong><code>同源策略（Same-origin policy）</code></strong> 的限制，阻止从一个不同协议（HTTP/HTTPS）、不同域名、不同端口加载资源的行为。</li><li>同源策略的三个条件 <ul><li>协议相同</li><li>域名相同</li><li>端口号相同</li><li>只要有一个不相同，就会触发跨域</li></ul></li></ul><h4 id="常见解决方案" tabindex="-1">常见解决方案 <a class="header-anchor" href="#常见解决方案" aria-label="Permalink to &quot;常见解决方案&quot;">​</a></h4><ul><li>后端设置 CORS（推荐） <ul><li>CORS（Cross-Origin Resource Sharing） 是一种 W3C 标准，后端通过设置响应头允许跨域</li><li>常用响应头：</li></ul><div class="language-JS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Access</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Control</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Allow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Origin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 或 </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//example.com</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Access</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Control</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Allow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Credentials</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Access</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Control</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Allow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Methods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">POST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PUT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DELETE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Access</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Control</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Allow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Headers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Type, Authorization</span></span></code></pre></div></li><li>使用 Nginx 反向代理（上线推荐）</li><li>WebSocket 跨域 :WebSocket 本身不受同源策略限制，可以直接跨域连接。但服务端仍可做限制</li></ul><h4 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h4><ul><li><ol><li>为什么浏览器要限制跨域？</li></ol><ul><li>为了防止 <strong>CSRF（跨站请求伪造）</strong> 攻击，保护用户数据安全</li></ul></li><li>CORS 是如何工作的？</li><li>浏览器在发送请求时自动加上 Origin 头，服务器响应时带上 Access-Control-Allow-Origin，如果匹配，浏览器才允许前端访问响应内容。</li><li>OPTIONS 预检请求是什么？</li><li>对于复杂请求（如带 Authorization、Content-Type: application/json 的 POST 请求），浏览器会先发送一个 OPTIONS 请求进行预检，确认服务器是否允许该请求。</li><li>如何解决上传文件跨域 <ul><li>上传文件时使用 FormData + fetch 或 XMLHttpRequest，后端需设置 Access-Control-Allow-Origin 和允许的 Content-Type 类型。</li></ul></li></ul></details><h3 id="✅http1-1-与-http2-区别" tabindex="-1">✅HTTP1.1 与 HTTP2 区别 <a class="header-anchor" href="#✅http1-1-与-http2-区别" aria-label="Permalink to &quot;✅HTTP1.1 与 HTTP2 区别&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><ul><li>HTTP2 是二进制传输，HTTP1.1 是文本传输，HTTP1.1 是明文</li><li>HTTP2 支持开启多路复用，可以同时处理多个请求</li><li>HTTP2 支持头部HAPCK压缩</li><li>HTTP2 支持设置优先级</li><li>HTTP2 服务器推送</li><li>HTTP2 通常加密（推荐TLS）</li></ul></details><h3 id="✅options-预请求" tabindex="-1">✅OPTIONS 预请求 <a class="header-anchor" href="#✅options-预请求" aria-label="Permalink to &quot;✅OPTIONS 预请求&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><h5 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h5><p>OPTIONS 请求是浏览器在发送某些跨域请求之前，自动发起的一个“探路”请求，用于确认服务器是否允许该跨域请求，这就是 CORS 中的预检机制（Preflight）</p><h5 id="触发-options-预检请求条件" tabindex="-1">触发 OPTIONS 预检请求条件 <a class="header-anchor" href="#触发-options-预检请求条件" aria-label="Permalink to &quot;触发 OPTIONS 预检请求条件&quot;">​</a></h5><ul><li>使用了除 GET、HEAD、POST 以外的方法</li><li>设置了自定义请求头</li><li>设置了自定义的 Content-Type</li></ul><h5 id="options-请求工作流程" tabindex="-1">OPTIONS 请求工作流程 <a class="header-anchor" href="#options-请求工作流程" aria-label="Permalink to &quot;OPTIONS 请求工作流程&quot;">​</a></h5><ul><li>浏览器向目标服务器发送一个 OPTIONS 请求。</li><li>服务器根据这些options请求头信息决定是否允许请求，并返回相应的响应头</li><li>如果服务器允许，则浏览器继续发送真正的请求；否则，阻止请求并报错</li></ul></details><h3 id="✅状态码详解" tabindex="-1">✅状态码详解 <a class="header-anchor" href="#✅状态码详解" aria-label="Permalink to &quot;✅状态码详解&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><ol><li><p><strong>信息性状态码（100–199）</strong>：</p><ul><li>100 Continue：服务器已接收到请求头，客户端应继续发送请求体。</li><li>101 Switching Protocols：服务器已理解客户端的请求，并将通过升级协议来完成后续通信。</li></ul></li><li><p><strong>成功状态码（200–299）</strong>：</p><ul><li>200 OK：请求成功，所希望的回应头或数据体将随此回应返回。</li><li>201 Created：请求已被实现，且有一个新的资源依据请求的需要而建立。</li><li>204 No Content：服务器成功处理了请求，但不需要返回任何实体内容。</li></ul></li><li><p><strong>重定向状态码（300–399）</strong>：</p><ul><li>301 Moved Permanently：请求的资源已被永久地移动到新URI，返回信息会包括新的URI。</li><li>302 Found：请求的资源临时从不同的URI响应请求。</li><li>304 Not Modified：资源未被修改，可以使用缓存的版本。</li></ul></li><li><p><strong>客户端错误状态码（400–499）</strong>：</p><ul><li>400 Bad Request：服务器无法理解请求的格式，客户端应该修改请求后再试。</li><li>401 Unauthorized：当前请求需要用户验证。</li><li>403 Forbidden：服务器已经理解请求，但是拒绝执行它。</li><li>404 Not Found：请求失败，请求所期望找到的资源在服务器上不存在。</li></ul></li><li><p><strong>服务器错误状态码（500–599）</strong>：</p><ul><li>500 Internal Server Error：服务器遇到未知情况，使其无法完成请求。</li><li>501 Not Implemented：服务器不支持当前请求所需要的功能。</li><li>502 Bad Gateway：作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（如DNS服务器、网关、代理服务器等）收到响应。</li><li>503 Service Unavailable：由于临时的服务器维护或过载，服务器暂时无法处理请求。</li></ul></li></ol></details><h3 id="✅websocket" tabindex="-1">✅WebSocket <a class="header-anchor" href="#✅websocket" aria-label="Permalink to &quot;✅WebSocket&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><h5 id="websocket-是什么" tabindex="-1">WebSocket 是什么 <a class="header-anchor" href="#websocket-是什么" aria-label="Permalink to &quot;WebSocket 是什么&quot;">​</a></h5><ul><li>WebSocket 是一种全双工通信协议，允许客户端和服务器之间建立一个持久连接，并且可以双向实时通信。它通过 ws://（不加密）或 wss://（加密）协议进行通信</li></ul><h5 id="websocket-和-http-有什么区别" tabindex="-1">WebSocket 和 HTTP 有什么区别 <a class="header-anchor" href="#websocket-和-http-有什么区别" aria-label="Permalink to &quot;WebSocket 和 HTTP 有什么区别&quot;">​</a></h5><ul><li>HTTP 是一种请求-响应模型的协议，客户端发送请求，服务器返回响应，通信是单向的。即使使用 HTTP/2 或 Server Push，本质上还是基于请求驱动的</li><li>所以 WebSocket 更适合需要实时性高、低延迟的场景，比如聊天、股票行情、在线游戏等</li></ul><h5 id="websocket-是如何建立连接的-握手过程是怎样的" tabindex="-1">WebSocket 是如何建立连接的？握手过程是怎样的 <a class="header-anchor" href="#websocket-是如何建立连接的-握手过程是怎样的" aria-label="Permalink to &quot;WebSocket 是如何建立连接的？握手过程是怎样的&quot;">​</a></h5><p>WebSocket 的建立过程是基于 HTTP 协议的，称为握手（Handshake）</p><ul><li>客户端发送一个 HTTP 请求，请求头中包含：</li><li>服务端如果支持 WebSocket，会返回一个 101 状态码（Switching Protocols）并带上相应的响应头</li><li>握手完成后，连接就升级为 WebSocket 协议，后续的通信就不再是 HTTP 请求/响应模式，而是真正的双向数据传输。</li></ul></details><h2 id="性能优化-❌" tabindex="-1">性能优化 ❌ <a class="header-anchor" href="#性能优化-❌" aria-label="Permalink to &quot;性能优化 ❌&quot;">​</a></h2><h3 id="✅前端性能优化" tabindex="-1">✅前端性能优化 <a class="header-anchor" href="#✅前端性能优化" aria-label="Permalink to &quot;✅前端性能优化&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><h4 id="一、加载优化" tabindex="-1">一、加载优化 <a class="header-anchor" href="#一、加载优化" aria-label="Permalink to &quot;一、加载优化&quot;">​</a></h4><ol><li><strong>预加载（Preload）</strong><ul><li>使用 <code>&lt;link rel=&quot;preload&quot;&gt;</code> 提前加载关键资源，如字体、CSS、JS等。</li><li>示例：<code>&lt;link rel=&quot;preload&quot; href=&quot;/styles.css&quot; as=&quot;style&quot;&gt;</code></li></ul></li><li><strong>懒加载（Lazy Load）</strong><ul><li>对图片、视频等大文件采用懒加载技术，仅当用户滚动到视口内时才加载。</li><li>示例：使用 <code>loading=&quot;lazy&quot;</code> 属性。</li></ul></li><li><strong>延迟加载（Defer/Async Script Loading）</strong><ul><li>通过 <code>defer</code> 或 <code>async</code> 加载脚本，避免阻塞页面渲染。</li><li><code>defer</code> 按顺序执行脚本，而 <code>async</code> 不保证顺序但异步加载。</li></ul></li><li><strong>资源合并</strong><ul><li>将多个小文件合并为一个，减少HTTP请求次数。</li><li>注意平衡文件大小与浏览器缓存效率。</li></ul></li><li><strong>资源压缩</strong><ul><li>使用工具压缩HTML、CSS、JavaScript代码，去除不必要的空格和注释。</li></ul></li><li><strong>CDN</strong><ul><li>使用内容分发网络(CDN)加速静态资源的访问速度。</li></ul></li><li><strong>HTTP2/3</strong><ul><li>升级到HTTP/2或HTTP/3以利用多路复用、头部压缩等功能提升性能。</li></ul></li><li><strong>强缓存/协商缓存</strong><ul><li>合理设置 <code>Cache-Control</code> 和 <code>ETag</code> 头部来控制缓存行为。</li></ul></li><li><strong>字体资源使用font-display：swap</strong><ul><li>设置 <code>font-display: swap;</code> 确保文本在自定义字体加载前可见。</li></ul></li></ol><h4 id="二、构建优化" tabindex="-1">二、构建优化 <a class="header-anchor" href="#二、构建优化" aria-label="Permalink to &quot;二、构建优化&quot;">​</a></h4><ol><li><strong>Tree-shaking</strong><ul><li>利用Webpack等打包工具移除未使用的代码部分，减小最终包大小。</li></ul></li><li><strong>打包分块：第三方和业务分离</strong><ul><li>分离第三方库与业务逻辑代码，利用长期缓存机制提高加载效率。</li></ul></li><li><strong>代码分割</strong><ul><li>根据路由或组件动态加载模块，减少初始加载时间。</li></ul></li><li><strong>按需加载</strong><ul><li>实现功能或页面级别的懒加载，只加载当前需要的部分。</li></ul></li></ol><h4 id="三、渲染优化" tabindex="-1">三、渲染优化 <a class="header-anchor" href="#三、渲染优化" aria-label="Permalink to &quot;三、渲染优化&quot;">​</a></h4><ol><li><strong>骨架屏</strong><ul><li>在内容加载前显示占位符，改善用户体验。</li></ul></li><li><strong>虚拟滚动加载</strong><ul><li>针对长列表，仅渲染视口内的元素，减少DOM操作成本。</li></ul></li><li><strong>SSR (Server Side Rendering)</strong><ul><li>在服务器端完成页面首次渲染，加快首屏加载速度。</li></ul></li><li><strong>减少重绘和回流</strong><ul><li>批量修改样式，尽量使用类名代替直接操作样式属性。</li></ul></li><li><strong>内存泄漏减少</strong><ul><li>定期检查并清理不再使用的变量和事件监听器。</li></ul></li><li><strong>编写复用函数和组件</strong><ul><li>提高代码复用性，降低维护成本。</li></ul></li><li><strong>内连CSS</strong><ul><li>对于关键路径上的CSS，可以考虑内联至HTML中以减少额外请求。</li></ul></li><li><strong>动画使用transform和opacity GPU加速动画</strong><ul><li>使用 <code>transform</code> 和 <code>opacity</code> 来创建平滑的GPU加速动画，避免触发布局重排。</li></ul></li></ol><h4 id="四、图像优化" tabindex="-1">四、图像优化 <a class="header-anchor" href="#四、图像优化" aria-label="Permalink to &quot;四、图像优化&quot;">​</a></h4><ol><li><strong>格式WEBP</strong><ul><li>转换图像格式为WebP，相比JPEG/PNG有更高的压缩率。</li></ul></li><li><strong>压缩</strong><ul><li>使用工具压缩图片，保持视觉质量的同时减小文件大小。</li></ul></li><li><strong>懒加载+占位图</strong><ul><li>结合懒加载技术和占位图，确保图像加载流畅且高效。</li></ul></li></ol><h4 id="五、监控分析" tabindex="-1">五、监控分析 <a class="header-anchor" href="#五、监控分析" aria-label="Permalink to &quot;五、监控分析&quot;">​</a></h4><ol><li><strong>前端埋点和上报</strong><ul><li>收集用户行为数据，用于后续分析和优化决策。</li></ul></li><li><strong>性能面包分析和追踪</strong><ul><li>使用Lighthouse等工具定期评估网站性能，并跟踪改进效果。</li></ul></li><li><strong>持续优化</strong><ul><li>基于监控数据不断调整和优化网站性能。</li></ul></li></ol></details><h3 id="✅前端首屏优化" tabindex="-1">✅前端首屏优化 <a class="header-anchor" href="#✅前端首屏优化" aria-label="Permalink to &quot;✅前端首屏优化&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><h5 id="一、资源加载优化" tabindex="-1">一、资源加载优化 <a class="header-anchor" href="#一、资源加载优化" aria-label="Permalink to &quot;一、资源加载优化&quot;">​</a></h5><ol><li><strong>优先加载关键资源</strong><ul><li><strong>CSS</strong>：将用于首屏渲染的CSS内联至HTML中，确保样式能立即应用。</li><li><strong>JS</strong>：对于非必要的JavaScript文件（如广告脚本、分析脚本），使用<code>async</code>或<code>defer</code>属性延迟加载。</li></ul></li><li><strong>图片优化</strong><ul><li>使用<strong>懒加载</strong>技术，仅当图片进入视口时才加载。</li><li>将图片格式转换为更高效的格式，如WebP。</li><li>使用占位图（placeholder）替代实际图片，直到图片完全加载。</li></ul></li><li><strong>字体优化</strong><ul><li>设置<code>font-display: swap;</code>，使得文本在自定义字体加载前可见。</li><li>考虑使用系统默认字体作为回退方案，避免空白文本闪烁。</li></ul></li><li><strong>使用CDN</strong><ul><li>静态资源通过CDN分发，利用地理位置优势加快资源加载速度。</li></ul></li><li><strong>HTTP/2 或 HTTP/3 升级</strong><ul><li>利用多路复用、头部压缩等特性减少延迟。</li></ul></li><li><strong>资源合并与压缩</strong><ul><li>合并多个CSS和JS文件以减少请求数量，并启用Gzip或Brotli压缩来减小传输体积。</li></ul></li><li><strong>内联关键CSS</strong><ul><li>将首屏所需的所有CSS直接嵌入HTML中，避免额外的HTTP请求</li></ul></li></ol><h5 id="二、构建流程优化" tabindex="-1">二、构建流程优化 <a class="header-anchor" href="#二、构建流程优化" aria-label="Permalink to &quot;二、构建流程优化&quot;">​</a></h5><ol><li><strong>代码分割</strong><ul><li>按需加载组件或模块，而不是一次性加载所有内容。</li><li>动态导入（Dynamic Imports）可以有效地实现按需加载。</li></ul></li><li><strong>Tree Shaking</strong><ul><li>移除未使用的代码部分，减小打包后的文件大小。</li></ul></li><li><strong>SSR (Server Side Rendering)</strong><ul><li>在服务器端完成页面初次渲染，发送给客户端的HTML已经包含了完整的内容结构，减少了浏览器解析和执行的时间。</li></ul></li><li><strong>Service Worker 缓存</strong><ul><li>实现离线访问和快速加载，特别是在重复访问时能够直接从缓存读取数据。</li></ul></li></ol><h5 id="三、渲染性能优化" tabindex="-1">三、渲染性能优化 <a class="header-anchor" href="#三、渲染性能优化" aria-label="Permalink to &quot;三、渲染性能优化&quot;">​</a></h5><ol><li><strong>骨架屏（Skeleton Screen）</strong><ul><li>在内容加载之前显示一个简单的UI框架，给用户即时反馈，改善等待体验。</li></ul></li><li><strong>避免阻塞渲染的CSS</strong><ul><li>确保CSS不会阻止页面渲染，可以通过媒体查询指定某些样式只在特定条件下加载。</li></ul></li><li><strong>减少重绘和回流</strong><ul><li>批量修改DOM元素样式，尽量使用类名切换代替直接操作样式属性。</li></ul></li><li><strong>动画优化</strong><ul><li>对于涉及视觉变化的动画，优先使用<code>transform</code>和<code>opacity</code>，因为它们可以被GPU加速，避免触发布局重排。</li></ul></li></ol><h5 id="四、监控与分析" tabindex="-1">四、监控与分析 <a class="header-anchor" href="#四、监控与分析" aria-label="Permalink to &quot;四、监控与分析&quot;">​</a></h5><ol><li><strong>性能监控工具</strong><ul><li>使用Lighthouse、WebPageTest等工具定期评估网站性能，并根据报告进行针对性优化。</li></ul></li><li><strong>前端埋点</strong><ul><li>收集用户行为数据，了解用户的交互模式，识别性能瓶颈。</li></ul></li><li><strong>持续优化</strong><ul><li>根据监控数据不断调整和优化网站性能，保持最佳状态。</li></ul></li></ol></details><h3 id="✅web缓存" tabindex="-1">✅Web缓存 <a class="header-anchor" href="#✅web缓存" aria-label="Permalink to &quot;✅Web缓存&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><h5 id="定义和作用" tabindex="-1">定义和作用 <a class="header-anchor" href="#定义和作用" aria-label="Permalink to &quot;定义和作用&quot;">​</a></h5><p>Web缓存是一种临时存储Web文档(如HTML页面、图片等)的技术，目的是减少带宽使用、服务器负载和感知延迟。当用户再次访问相同资源时，可以直接从缓存中获取，而不需要重新从服务器下载。</p><h5 id="缓存类型" tabindex="-1">缓存类型 <a class="header-anchor" href="#缓存类型" aria-label="Permalink to &quot;缓存类型&quot;">​</a></h5><ul><li>浏览器缓存 - 存储在用户本地设备上</li><li>代理缓存 - 位于客户端和服务器之间的中间缓存</li><li>网关缓存(反向代理缓存) - 部署在服务器前端的缓存，如CDN</li></ul><h5 id="http缓存机制" tabindex="-1">HTTP缓存机制 <a class="header-anchor" href="#http缓存机制" aria-label="Permalink to &quot;HTTP缓存机制&quot;">​</a></h5><p>Cache-Control是HTTP/1.1中定义的最重要的缓存控制头部，它可以指定：</p><ul><li>public/private - 定义资源是否可被共享缓存</li><li>max-age - 资源被认为新鲜的最大时间(秒)</li><li>no-cache - 使用前必须验证</li><li>no-store - 禁止任何缓存</li><li>must-revalidate - 过期后必须重新验证</li></ul><h5 id="缓存验证" tabindex="-1">缓存验证 <a class="header-anchor" href="#缓存验证" aria-label="Permalink to &quot;缓存验证&quot;">​</a></h5><p>主要有两种验证机制：</p><ul><li>Last-Modified/If-Modified-Since - 基于时间戳 <ul><li>服务器响应Last-Modified头部</li><li>客户端下次请求携带If-Modified-Since</li><li>服务器比较时间决定返回304(未修改)或新内容</li></ul></li><li>ETag/If-None-Match - 基于内容标识符 <ul><li>服务器响应ETag(通常是内容的hash)</li><li>客户端下次请求携带If-None-Match</li><li>服务器比较ETag决定返回304或新内容</li></ul></li></ul><h5 id="实际应用" tabindex="-1">实际应用 <a class="header-anchor" href="#实际应用" aria-label="Permalink to &quot;实际应用&quot;">​</a></h5><p><code>静态资源(JS/CSS/图片):</code></p><ul><li>设置较长的max-age(如1年)</li><li>使用内容hash作为文件名实现&quot;永不过期&quot;缓存</li><li>通过CDN分发</li></ul><p><code>动态内容(HTML/API):</code></p><ul><li>设置较短的max-age(如几分钟)</li><li>通常使用no-cache或must-revalidate</li><li>对个性化内容使用private</li></ul><h5 id="缓存问题" tabindex="-1">缓存问题 <a class="header-anchor" href="#缓存问题" aria-label="Permalink to &quot;缓存问题&quot;">​</a></h5><p>主要问题有：</p><ul><li>缓存失效 - 用户看不到最新内容 <ul><li>解决方案：版本化文件名或查询参数</li></ul></li><li>敏感数据缓存 - 可能泄露隐私 <ul><li>解决方案：对敏感内容使用private或no-store</li></ul></li><li>缓存污染 - 恶意内容被缓存 <ul><li>解决方案：验证输入，对用户生成内容谨慎缓存</li></ul></li></ul><h5 id="本地缓存" tabindex="-1">本地缓存 <a class="header-anchor" href="#本地缓存" aria-label="Permalink to &quot;本地缓存&quot;">​</a></h5><ul><li>LocalStorage、SessionStorage、IndexedDB、cookie</li></ul></details><h3 id="✅前端内存泄漏" tabindex="-1">✅前端内存泄漏 <a class="header-anchor" href="#✅前端内存泄漏" aria-label="Permalink to &quot;✅前端内存泄漏&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><ul><li>未清除的定时器</li><li>未移除的事件监听器</li><li>意外的全局变量</li><li>滥用闭包</li><li>游离的DOM元素</li><li>console.log持有引用</li><li>第三方库使用和管理不当</li><li>未关闭的WebSocket连接 和 未取消的订阅</li><li>缓存使用不当</li></ul></details><h2 id="javascript-核心" tabindex="-1">JavaScript 核心 <a class="header-anchor" href="#javascript-核心" aria-label="Permalink to &quot;JavaScript 核心&quot;">​</a></h2><h3 id="✅es6-新特性" tabindex="-1">✅ES6 新特性 <a class="header-anchor" href="#✅es6-新特性" aria-label="Permalink to &quot;✅ES6 新特性&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><ul><li>let/const</li><li>class</li><li>promise</li><li>import/export</li><li>Set/Map</li><li>Proxy/Relect</li><li>async/await</li><li>模板字符串</li><li>扩展运算符</li><li>剩余参数</li><li>箭头函数</li><li>默认参数</li><li>解构赋值</li></ul></details><h3 id="✅箭头函数-vs-普通函数" tabindex="-1">✅箭头函数 vs 普通函数 <a class="header-anchor" href="#✅箭头函数-vs-普通函数" aria-label="Permalink to &quot;✅箭头函数 vs 普通函数&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><ul><li>写法差异</li><li>没有自己的this</li><li>没有arguments</li><li>没有prototype属性</li><li>无法使用new,不能作为构造函数</li><li>不能super继承父类的属性和方法</li></ul></details><h3 id="✅原型和原型链" tabindex="-1">✅原型和原型链 <a class="header-anchor" href="#✅原型和原型链" aria-label="Permalink to &quot;✅原型和原型链&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><h5 id="原型" tabindex="-1">原型 <a class="header-anchor" href="#原型" aria-label="Permalink to &quot;原型&quot;">​</a></h5><p>在 JavaScript 中，原型（Prototype）是实现继承和共享属性与方法的一种机制。每个函数都有一个 prototype 属性，它是一个对象，包含了可以被该函数创建的所有实例共享的属性和方法。而每个对象都有一个内部属性 [[Prototype]]，通常可以通过 <strong>proto</strong> 访问，它指向其构造函数的 prototype 对象。</p><h5 id="原型链" tabindex="-1">原型链 <a class="header-anchor" href="#原型链" aria-label="Permalink to &quot;原型链&quot;">​</a></h5><p>原型链是 JavaScript 实现继承的核心机制。当访问一个对象的属性或方法时，如果该对象本身没有这个属性，JavaScript 引擎会去它的原型对象中查找，如果原型对象也没有，就会继续向上查找它的原型对象的原型，直到查找到 Object.prototype 或者遇到 null 为止，这个查找过程就构成了原型链。</p><h5 id="proto-和-prototype-区别" tabindex="-1"><strong>proto</strong> 和 prototype 区别 <a class="header-anchor" href="#proto-和-prototype-区别" aria-label="Permalink to &quot;__proto__ 和 prototype 区别&quot;">​</a></h5><ul><li><code>prototype</code> 是函数对象的一个属性，它是一个对象，用于存放通过该函数构造出的实例可以共享的属性和方法。</li><li><code>__proto__</code> 是每个对象都有的一个内部属性（对应 <code>[[Prototype]]</code>），它指向该对象的构造函数的 prototype</li></ul><h5 id="constructor-是什么-它在原型链中的作用是什么" tabindex="-1">constructor 是什么？它在原型链中的作用是什么 <a class="header-anchor" href="#constructor-是什么-它在原型链中的作用是什么" aria-label="Permalink to &quot;constructor 是什么？它在原型链中的作用是什么&quot;">​</a></h5><ul><li>constructor 是每个 prototype 对象默认拥有的属性，它指向该原型对象对应的构造函数</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constructor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Person); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span></code></pre></div><p><strong>原型是继承的基础，原型链是属性查找的机制</strong></p></details><h3 id="✅函数柯里化" tabindex="-1">✅函数柯里化 <a class="header-anchor" href="#✅函数柯里化" aria-label="Permalink to &quot;✅函数柯里化&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><h5 id="定义-1" tabindex="-1">定义 <a class="header-anchor" href="#定义-1" aria-label="Permalink to &quot;定义&quot;">​</a></h5><p>函数柯里化是一种函数转换技术，它将一个接受多个参数的函数转换成一系列连续的、每次只接受一个参数的嵌套函数。换句话说，原本需要多个参数的函数，被改造成可以通过逐步传参的方式调用。例如，一个函数 add(a, b, c) 可以被柯里化为 add(a)(b)(c)</p><h5 id="柯里化实现" tabindex="-1">柯里化实现 <a class="header-anchor" href="#柯里化实现" aria-label="Permalink to &quot;柯里化实现&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> curry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> curried</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (args.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fn.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, args);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">moreArgs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> curried.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, args.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">concat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(moreArgs));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>使用</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> curryAdd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> curry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(add);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curryAdd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 6</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curryAdd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 6</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curryAdd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 6</span></span></code></pre></div><h5 id="函数柯里化在实际开发中有以下常见应用场景" tabindex="-1">函数柯里化在实际开发中有以下常见应用场景 <a class="header-anchor" href="#函数柯里化在实际开发中有以下常见应用场景" aria-label="Permalink to &quot;函数柯里化在实际开发中有以下常见应用场景&quot;">​</a></h5></details><h3 id="✅commonjs-与-模块化" tabindex="-1">✅CommonJS 与 模块化 <a class="header-anchor" href="#✅commonjs-与-模块化" aria-label="Permalink to &quot;✅CommonJS 与 模块化&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><h5 id="模块化" tabindex="-1">模块化 <a class="header-anchor" href="#模块化" aria-label="Permalink to &quot;模块化&quot;">​</a></h5><p>模块化是一种将代码划分为独立、可复用部分的编程范式。它的目的是：</p><ul><li>解耦：减少模块之间的依赖</li><li>可维护性：便于调试和更新</li><li>复用性：可以在多个项目中重复使用</li></ul><p>JavaScript 原生并不支持模块化，直到 ES6 才正式引入模块标准（ES Module）。</p><h5 id="commonjs-是什么" tabindex="-1">CommonJS 是什么 <a class="header-anchor" href="#commonjs-是什么" aria-label="Permalink to &quot;CommonJS 是什么&quot;">​</a></h5><p>CommonJS 是一种模块化规范，最初是为了解决 Node.js 中的模块问题而提出的。 <strong>特点：</strong></p><ul><li>使用 require() 同步加载模块</li><li>使用 module.exports 和 exports 导出模块</li><li>主要用于服务端（Node.js）</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// math.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或者</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// app.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> math</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./math&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3</span></span></code></pre></div><p><strong>优点：</strong></p><ul><li>简单易懂，语法清晰</li><li>Node.js 的默认模块系统</li></ul><p><strong>缺点：</strong></p><ul><li>同步加载，不适合浏览器环境</li><li>不利于异步加载或按需加载</li></ul><h4 id="es-module-esm" tabindex="-1">ES Module（ESM） <a class="header-anchor" href="#es-module-esm" aria-label="Permalink to &quot;ES Module（ESM）&quot;">​</a></h4><p>ES6 引入了官方模块系统 —— ECMAScript Module（ESM）</p><p><strong>特点：</strong></p><ul><li>使用 import / export 语法</li><li>支持异步加载</li><li>静态分析能力强，适合 Tree Shaking</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// math.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// app.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { add } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./math.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div><p><strong>优点：</strong></p><ul><li>官方标准，未来主流</li><li>支持异步加载</li><li>可以做静态优化（如 Tree Shaking）</li></ul><p><strong>缺点：</strong></p><ul><li>浏览器兼容性早期较差（现已广泛支持）</li><li>不能直接在旧版 Node.js 中使用（需要配置 type=&quot;module&quot;）</li></ul><h4 id="commonjs-与-esm-的区别" tabindex="-1">CommonJS 与 ESM 的区别 <a class="header-anchor" href="#commonjs-与-esm-的区别" aria-label="Permalink to &quot;CommonJS 与 ESM 的区别&quot;">​</a></h4><p>CommonJS（CJS）和 ECMAScript 模块（ESM）是JavaScript中两种不同的模块系统，它们在语法、使用场景以及一些特性上有所区别。以下是两者的主要区别：</p><h5 id="_1-语法差异" tabindex="-1">1. 语法差异 <a class="header-anchor" href="#_1-语法差异" aria-label="Permalink to &quot;1. 语法差异&quot;">​</a></h5><ul><li><p><strong>CommonJS (CJS)</strong>:</p><ul><li>使用<code>require()</code>函数来导入模块。</li><li>使用<code>module.exports</code>或<code>exports</code>对象来导出模块内容。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导入模块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> moduleA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./moduleA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导出模块</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { foo: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span></code></pre></div></li><li><p><strong>ECMAScript 模块 (ESM)</strong>:</p><ul><li>使用<code>import</code>语句来导入模块。</li><li>使用<code>export</code>关键字来导出模块内容。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导入模块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { foo } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./moduleB.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导出模块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li></ul><h5 id="_2-加载时机" tabindex="-1">2. 加载时机 <a class="header-anchor" href="#_2-加载时机" aria-label="Permalink to &quot;2. 加载时机&quot;">​</a></h5><ul><li><strong>CommonJS</strong>: 模块是在运行时加载的，这意味着你可以根据条件动态地决定要加载哪些模块。</li><li><strong>ESM</strong>: 模块在编译时确定依赖关系，因此具有更严格的依赖图谱，并且不允许动态导入模块路径（尽管有动态<code>import()</code>语法，但它的行为与静态<code>import</code>不同）。</li></ul><h5 id="_3-适用环境" tabindex="-1">3. 适用环境 <a class="header-anchor" href="#_3-适用环境" aria-label="Permalink to &quot;3. 适用环境&quot;">​</a></h5><ul><li><strong>CommonJS</strong>最初是为Node.js设计的，在早期版本的Node.js中广泛使用。</li><li><strong>ESM</strong>是JavaScript标准的一部分，现在也被现代浏览器和Node.js支持。随着标准化进程，它逐渐成为前端和后端开发中的主流选择。</li></ul><h5 id="_4-性能考虑" tabindex="-1">4. 性能考虑 <a class="header-anchor" href="#_4-性能考虑" aria-label="Permalink to &quot;4. 性能考虑&quot;">​</a></h5><ul><li><strong>ESM</strong>由于其静态结构，可以进行更多优化，比如Tree-shaking（消除未使用的代码），这对于构建高效的应用程序非常重要。</li></ul><h5 id="_5-默认导出与命名导出" tabindex="-1">5. 默认导出与命名导出 <a class="header-anchor" href="#_5-默认导出与命名导出" aria-label="Permalink to &quot;5. 默认导出与命名导出&quot;">​</a></h5><ul><li><strong>CommonJS</strong>: 主要是默认导出的概念，尽管也可以通过向<code>exports</code>添加多个属性实现类似命名导出的功能。</li><li><strong>ESM</strong>: 明确区分了默认导出(<code>export default</code>)和命名导出(<code>export const ...</code>等)，提供了更大的灵活性。</li></ul></details><h2 id="vue-框架" tabindex="-1">Vue 框架 <a class="header-anchor" href="#vue-框架" aria-label="Permalink to &quot;Vue 框架&quot;">​</a></h2><h3 id="✅vue-双向绑定原理" tabindex="-1">✅Vue 双向绑定原理 <a class="header-anchor" href="#✅vue-双向绑定原理" aria-label="Permalink to &quot;✅Vue 双向绑定原理&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><ul><li><p>Vue 的双向绑定本质是数据劫持 + 发布订阅模式。</p></li><li><p>在 Vue 2 中通过 Object.defineProperty 递归转换 data 的每个属性为 getter/setter，在 getter 中收集依赖（Watcher），在 setter 中通知更新。视图层通过 v-model 指令实现双向绑定，它本质是 value 属性绑定和 input 事件监听的语法糖。</p></li><li><p>Vue 3 改用 Proxy 实现，优势在于能直接监听整个对象且自动处理新增属性。整个系统还包含异步批量更新和虚拟 DOM diff 等优化机制，既保持了开发便捷性又保证了性能。</p></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Vue2 实现</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineReactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, key, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (val </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newVal) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        val </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newVal;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;数据更新了&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineReactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data.name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Vue3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 控制台输出 &quot;数据更新了&quot;</span></span></code></pre></div></details><h3 id="✅vue-生命周期详解" tabindex="-1">✅Vue 生命周期详解 <a class="header-anchor" href="#✅vue-生命周期详解" aria-label="Permalink to &quot;✅Vue 生命周期详解&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><ul><li><code>beforeCreate</code>:<strong>这个钩子在实例初始化之后、数据观测 (data observer) 和 event/watcher 事件配置之前被调用</strong>,不过，在 Composition API 中，通常使用 setup() 函数来处理这一阶段的逻辑，因此这个钩子不常用。</li><li><code>created</code>：<strong>在实例创建完成后立即调用</strong>。在这个阶段，实例已经完成了数据观测 (data observer)，属性和方法的运算，watch/event 事件回调。但是，挂载阶段还没开始，$el 属性目前不可见</li><li><code>beforeMount</code>：<strong>在挂载开始之前被调用</strong>：相关的 render 函数首次被调用。此时，虚拟 DOM 尚未渲染到真实 DOM 上</li><li><code>mounted</code>：<strong>在 el 被新创建的 vm.$el 替换，并挂载到实例上后调用</strong>。这时，组件已经被渲染到 DOM 中，可以访问 DOM 元素了。</li><li><code>beforeUpdate</code>：<em>在数据更新时，在虚拟 DOM 打补丁之前调用</em>*。此时，可以获取更新前的状态，适合用来进行一些清理工作。</li><li><code>updated</code>：<strong>在由于数据更改导致的虚拟 DOM 重新渲染和打补丁之后调用</strong>。此时，组件 DOM 已经更新，可以执行依赖于 DOM 的操作。然而，避免在此期间改变状态，因为这可能会导致无限的更新循环</li><li><code>beforeUnmount（在 Vue 2 中为 beforeDestroy）</code>：<strong>发生在实例销毁之前，在当前阶段实例完全可以被使用</strong>。调用此钩子时，组件实例的所有指令都被解绑，所有事件监听器被移除，所有子组件实例也都被销毁。</li><li><code>unmounted（在 Vue 2 中为 destroyed）</code>:<strong>卸载组件实例后调用</strong>。调用此钩子时，组件实例的所有指令都被解绑，所有事件监听器被移除，所有子组件实例也都被销毁。</li></ul><p><strong>activated 和 deactivated 是 Vue 中专门用于 &lt; keep-alive&gt; 缓存组件时的生命周期钩子</strong></p><ul><li><code>activated</code>：<strong>当组件被 &lt; keep-alive&gt; 缓存后，每次该组件被激活（显示）时调用</strong>。可以在这里执行组件重新展示时需要的逻辑，比如重新获取数据、恢复动画、计时器等</li><li><code>deactivated</code>：<strong>当组件被缓存后，离开当前视图（被切换出去）时调用</strong>。可以在这里进行一些资源释放操作，比如清除定时器、取消事件监听、停止动画等，防止内存泄漏。</li></ul></details><h3 id="✅vue-自定义指令" tabindex="-1">✅Vue 自定义指令 <a class="header-anchor" href="#✅vue-自定义指令" aria-label="Permalink to &quot;✅Vue 自定义指令&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><ul><li><code>v-focus</code>：自动聚焦输入框；</li><li><code>v-permission</code>：权限控制；</li><li><code>v-lazy</code>：图片懒加载；</li><li><code>v-throttle</code>：防抖节流；</li><li><code>v-draggable</code>：拖拽行为。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注册自定义指令 v-focus</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">directive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;focus&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    el.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">focus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></details><h3 id="✅vue-如何优化-seo" tabindex="-1">✅Vue 如何优化 SEO <a class="header-anchor" href="#✅vue-如何优化-seo" aria-label="Permalink to &quot;✅Vue 如何优化 SEO&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><p>在Vue.js项目中优化SEO（搜索引擎优化）主要涉及以下几个方面：</p><ol><li><p><strong>服务端渲染 (SSR)</strong>：默认情况下，Vue应用是客户端渲染的，这意味着在JavaScript执行之前，页面对于搜索引擎来说是空白的。通过使用服务端渲染，可以在服务器上预渲染Vue组件，并将HTML发送到客户端，这有助于搜索引擎更好地理解和索引你的网页内容。</p><p>Vue官方提供了一个名为Vue Server Renderer的库来实现这一点。此外，Nuxt.js是一个基于Vue.js的更高层次的框架，它简化了服务端渲染的配置和使用，同时也提供了静态站点生成等功能。</p></li><li><p><strong>预渲染 (Prerendering)</strong>：如果您的网站主要是静态内容，或者只有少量动态内容，那么可以考虑使用预渲染。预渲染与服务端渲染类似，但它只在构建时生成特定路由的静态HTML文件，而不是每次请求都进行服务端渲染。这种方法简单易行，适合那些不需要频繁更新的页面。</p></li><li><p><strong>Meta标签管理</strong>：确保每个页面都有正确的meta标签，这对于SEO至关重要。你可以使用vue-meta等插件来动态管理标题、描述和其他meta信息，使其能够根据不同的路由或状态自动更新。</p></li><li><p><strong>合理利用Link组件</strong>：在Vue Router中使用<code>&lt;router-link&gt;</code>组件代替普通的<code>&lt;a&gt;</code>标签可以帮助你更有效地管理内部链接，从而有利于SEO。</p></li><li><p><strong>提升页面加载速度</strong>：快速加载的页面不仅改善用户体验，也对SEO有正面影响。可以通过代码分割、懒加载非关键资源等方式减少初始加载时间。</p></li><li><p><strong>创建Sitemap</strong>：为你的Vue应用创建一个XML Sitemap，并提交给搜索引擎，以帮助它们更好地发现和索引你的网站内容。</p></li><li><p><strong>结构化数据标记</strong>：使用JSON-LD格式添加结构化数据标记，可以帮助搜索引擎理解页面上的内容类型（如产品、文章等），从而可能在搜索结果中显示更丰富的摘要。</p></li><li><p><strong>避免重复内容</strong>：确保你的URL设计不会导致相同内容出现在多个不同的URL上。如果存在这种情况，应该设置适当的301重定向或使用canonical标签指定首选版本。</p></li></ol><p>结合以上策略，您可以有效地提高基于Vue的应用程序的SEO表现。不过，请记住SEO是一个持续的过程，需要不断地监控和调整策略以适应搜索引擎算法的变化。</p></details><h3 id="✅vue2-vs-vue3" tabindex="-1">✅Vue2 vs Vue3 <a class="header-anchor" href="#✅vue2-vs-vue3" aria-label="Permalink to &quot;✅Vue2 vs Vue3&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><h4 id="✅-1-组合式-api-vs-选项式-api" tabindex="-1">✅ 1. <strong>组合式 API vs 选项式 API</strong> <a class="header-anchor" href="#✅-1-组合式-api-vs-选项式-api" aria-label="Permalink to &quot;✅ 1. **组合式 API vs 选项式 API**&quot;">​</a></h4><ul><li><strong>Vue2</strong> 使用 Options API（如 <code>data</code>、<code>methods</code>、<code>computed</code> 等）组织代码，逻辑分散，不易复用。</li><li><strong>Vue3</strong> 引入了 Composition API（如 <code>setup()</code>、<code>ref</code>、<code>reactive</code>、<code>watch</code> 等），更灵活，更适合逻辑复用和大型项目的维护。</li></ul><hr><h4 id="✅-2-性能优化" tabindex="-1">✅ 2. <strong>性能优化</strong> <a class="header-anchor" href="#✅-2-性能优化" aria-label="Permalink to &quot;✅ 2. **性能优化**&quot;">​</a></h4><ul><li><strong>更快的虚拟 DOM</strong>：Vue3 重写了虚拟 DOM，实现更快的 diff 算法。</li><li><strong>编译优化</strong>：静态提升、事件缓存等机制使渲染更高效。</li><li><strong>Tree-shaking 支持</strong>：Vue3 使用 ES Module 编写，可以按需引入，减小打包体积。</li></ul><hr><h4 id="✅-3-响应式系统升级" tabindex="-1">✅ 3. <strong>响应式系统升级</strong> <a class="header-anchor" href="#✅-3-响应式系统升级" aria-label="Permalink to &quot;✅ 3. **响应式系统升级**&quot;">​</a></h4><ul><li><strong>Vue2</strong> 使用 <code>Object.defineProperty</code>，不支持对数组、新增属性的完全监测。</li><li><strong>Vue3</strong> 改用 <code>Proxy</code> 实现响应式，更彻底、性能更好，支持更复杂的数据结构。</li></ul><hr><h4 id="✅-4-fragment-teleport-suspense-支持" tabindex="-1">✅ 4. <strong>Fragment / Teleport / Suspense 支持</strong> <a class="header-anchor" href="#✅-4-fragment-teleport-suspense-支持" aria-label="Permalink to &quot;✅ 4. **Fragment / Teleport / Suspense 支持**&quot;">​</a></h4><ul><li><strong>Fragment</strong>：Vue3 组件可以返回多个根节点，Vue2 不支持。</li><li><strong>Teleport</strong>：可以将组件渲染到 DOM 的任意位置，适合弹窗等场景。</li><li><strong>Suspense</strong>：用于异步组件的加载状态处理，配合 <code>&lt;script setup&gt;</code> 更加简洁。</li></ul><hr><h4 id="✅-5-typescript-支持更好" tabindex="-1">✅ 5. <strong>TypeScript 支持更好</strong> <a class="header-anchor" href="#✅-5-typescript-支持更好" aria-label="Permalink to &quot;✅ 5. **TypeScript 支持更好**&quot;">​</a></h4><ul><li>Vue3 是用 TypeScript 重写的，原生支持类型推导和开发体验，Vue2 对 TypeScript 支持较弱。</li></ul><hr><h4 id="✅-6-生命周期钩子不同" tabindex="-1">✅ 6. <strong>生命周期钩子不同</strong> <a class="header-anchor" href="#✅-6-生命周期钩子不同" aria-label="Permalink to &quot;✅ 6. **生命周期钩子不同**&quot;">​</a></h4><ul><li>Composition API 下生命周期名称为 <code>onMounted</code>、<code>onUnmounted</code> 等，更接近函数语义。</li><li>而 Vue2 是 <code>mounted</code>、<code>destroyed</code> 等选项式 API。</li><li>vue3中 beforeDestroy-&gt;onBeforeUnmounted, destroyed-&gt;onUnmounted</li><li>beforeCreate、created 被语法糖 setup 替代</li></ul></details><h3 id="✅vue3-组件通信与原理" tabindex="-1">✅Vue3 组件通信与原理 <a class="header-anchor" href="#✅vue3-组件通信与原理" aria-label="Permalink to &quot;✅Vue3 组件通信与原理&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><ul><li>父子组件通信 <ul><li>props/emit</li><li>ref获取子组件实例的属性和方法</li><li>ref 和 expose <ul><li>使用 ref 可以让你直接访问组件实例或 DOM 元素。结合 defineExpose 函数，可以在组合式 API 中暴露特定的方法或属性给父组件使用</li></ul></li></ul></li><li>跨组件通信 <ul><li>mitt（第三方插件）</li><li>Provide/Inject</li></ul></li><li>全局状态管理 <ul><li>Pinia (推荐)</li></ul></li></ul></details><h3 id="✅vue-路由实现原理" tabindex="-1">✅Vue 路由实现原理 <a class="header-anchor" href="#✅vue-路由实现原理" aria-label="Permalink to &quot;✅Vue 路由实现原理&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><ul><li>Hash 路由：通过 URL 的 # 后面的字符变化实现路由，不触发页面刷新。</li><li>History 路由：使用 HTML5 的 pushState 和 replaceState 方法，URL 更美观，但需要服务器配置支持。</li></ul></details><ul><li>Vue keep-alive 原理</li></ul><details class="details custom-block"><summary>详解</summary><h4 id="简述" tabindex="-1">简述 <a class="header-anchor" href="#简述" aria-label="Permalink to &quot;简述&quot;">​</a></h4><p><code>Vue</code> 中的 <code>keep-alive</code> 是一个<strong>抽象组件</strong>，用于<strong>缓存组件状态</strong>，避免组件重复创建和销毁。它在开发中常用于优化性能，特别是在组件切换频繁的场景下，比如标签页切换、路由组件缓存等。</p><h4 id="一、vue-keep-alive-的作用" tabindex="-1">一、Vue keep-alive 的作用 <a class="header-anchor" href="#一、vue-keep-alive-的作用" aria-label="Permalink to &quot;一、Vue keep-alive 的作用&quot;">​</a></h4><p><code>&lt;keep-alive&gt;</code> 的作用是：</p><ul><li><strong>缓存动态组件</strong>（使用 <code>&lt;component :is=&quot;xxx&quot;&gt;</code>）</li><li><strong>缓存路由组件</strong>（结合 Vue Router 的 <code>router-view</code> 使用）</li></ul><p>当组件被包裹在 <code>&lt;keep-alive&gt;</code> 中时：</p><ul><li>首次渲染时正常创建组件；</li><li>组件切换时不会被销毁，而是被缓存；</li><li>再次显示时直接复用缓存的状态，不会重新执行 <code>created</code>、<code>mounted</code> 等生命周期钩子。</li></ul><hr><h4 id="二、vue-keep-alive-的实现原理-以-vue-2-和-vue-3-为例" tabindex="-1">二、Vue keep-alive 的实现原理（以 Vue 2 和 Vue 3 为例） <a class="header-anchor" href="#二、vue-keep-alive-的实现原理-以-vue-2-和-vue-3-为例" aria-label="Permalink to &quot;二、Vue keep-alive 的实现原理（以 Vue 2 和 Vue 3 为例）&quot;">​</a></h4><h5 id="_1-核心机制" tabindex="-1">1. 核心机制 <a class="header-anchor" href="#_1-核心机制" aria-label="Permalink to &quot;1. 核心机制&quot;">​</a></h5><p><code>&lt;keep-alive&gt;</code> 是一个<strong>抽象组件</strong>，它不会渲染成一个真实的 DOM 节点，而是作为一个组件缓存的控制器。</p><p>它内部维护一个缓存对象（<code>cache</code>），用于保存已经被创建过的组件实例。当组件需要显示时，优先从缓存中取出，而不是重新创建。</p><hr><h5 id="_2-生命周期钩子-vue-2-vue-3" tabindex="-1">2. 生命周期钩子（Vue 2 &amp; Vue 3） <a class="header-anchor" href="#_2-生命周期钩子-vue-2-vue-3" aria-label="Permalink to &quot;2. 生命周期钩子（Vue 2 &amp; Vue 3）&quot;">​</a></h5><p>使用 <code>&lt;keep-alive&gt;</code> 缓存的组件，会多出两个生命周期钩子：</p><ul><li><code>activated</code>：组件被激活时调用（从缓存中恢复）</li><li><code>deactivated</code>：组件被停用时调用（放入缓存）</li></ul><p>这两个钩子可以用于执行一些组件激活/停用时的逻辑（如数据刷新、计时器清除等）。</p><hr><h5 id="_3-缓存控制-include-exclude-max" tabindex="-1">3. 缓存控制（include / exclude / max） <a class="header-anchor" href="#_3-缓存控制-include-exclude-max" aria-label="Permalink to &quot;3. 缓存控制（include / exclude / max）&quot;">​</a></h5><p><code>&lt;keep-alive&gt;</code> 支持以下属性来控制缓存行为：</p><table tabindex="0"><thead><tr><th>属性名</th><th>说明</th></tr></thead><tbody><tr><td><code>include</code></td><td>字符串或正则，只有匹配的组件会被缓存</td></tr><tr><td><code>exclude</code></td><td>字符串或正则，匹配的组件不会被缓存</td></tr><tr><td><code>max</code></td><td>最大缓存组件数量，超出后采用 LRU 算法清除</td></tr></tbody></table><p>示例：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">keep-alive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;component :is=&quot;currentComponent&quot; v-if=&quot;currentComponent&quot; /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">keep-alive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>或者结合路由：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">keep-alive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;router-view v-if=&quot;$route.meta.keepAlive&quot; /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">keep-alive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-view</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> v-if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$route.meta.keepAlive</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><hr><h4 id="_4-vue-2-与-vue-3-的差异" tabindex="-1">4. Vue 2 与 Vue 3 的差异 <a class="header-anchor" href="#_4-vue-2-与-vue-3-的差异" aria-label="Permalink to &quot;4. Vue 2 与 Vue 3 的差异&quot;">​</a></h4><h5 id="vue-2-实现简述" tabindex="-1">Vue 2 实现简述： <a class="header-anchor" href="#vue-2-实现简述" aria-label="Permalink to &quot;Vue 2 实现简述：&quot;">​</a></h5><ul><li><code>keep-alive</code> 是一个内置组件，通过 <code>vnode.componentInstance</code> 来获取和复用组件实例。</li><li>缓存结构为对象：<code>{ key: vnode }</code></li><li>切换时根据组件名判断是否命中缓存。</li><li>使用 <code>v-if</code> 控制组件显示，避免多个组件同时渲染。</li></ul><h5 id="vue-3-实现简述-vue-3-composition-api" tabindex="-1">Vue 3 实现简述（Vue 3 Composition API）： <a class="header-anchor" href="#vue-3-实现简述-vue-3-composition-api" aria-label="Permalink to &quot;Vue 3 实现简述（Vue 3 Composition API）：&quot;">​</a></h5><ul><li>依然使用 <code>keep-alive</code> 组件，但内部实现更加优化。</li><li>支持更复杂的组件树缓存。</li><li>使用 <code>LRU</code> 缓存策略（最近最少使用）来控制缓存大小。</li><li>支持异步组件缓存。</li><li>使用 <code>ShapeFlags</code> 和 <code>PatchFlags</code> 提升性能。</li></ul><hr><h4 id="三、源码层面的简要实现逻辑-vue-3-伪代码" tabindex="-1">三、源码层面的简要实现逻辑（Vue 3 伪代码） <a class="header-anchor" href="#三、源码层面的简要实现逻辑-vue-3-伪代码" aria-label="Permalink to &quot;三、源码层面的简要实现逻辑（Vue 3 伪代码）&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> KeepAlive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  __isKeepAlive: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  props: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;include&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;exclude&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;max&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">slots</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cache</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 缓存组件实例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> keys</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 缓存键列表，用于 LRU 管理</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pruneCache</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // LRU 清理策略</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (props.max </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cache.size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> props.max) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> oldestKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keys.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shift</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(oldestKey);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vnode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> slots.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> comp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vnode.type;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (props.include </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(props.include, comp.name)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vnode; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不满足 include，不缓存</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (props.exclude </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> matches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(props.exclude, comp.name)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vnode; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 满足 exclude，不缓存</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vnode.key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> comp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vnode.key;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 缓存命中，复用组件实例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        vnode.componentInstance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key).componentInstance;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        invokeHook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vnode, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;activated&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 首次创建，加入缓存</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key, vnode);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        keys.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      pruneCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 控制缓存大小</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vnode;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><blockquote><p>注意：上面是简化版的伪代码，实际 Vue 源码中会涉及更多细节，比如组件卸载、组件状态管理、异步组件处理等。</p></blockquote><hr><h4 id="四、使用场景" tabindex="-1">四、使用场景 <a class="header-anchor" href="#四、使用场景" aria-label="Permalink to &quot;四、使用场景&quot;">​</a></h4><ol><li><strong>Tab 切换组件</strong>：保持每个 Tab 的状态</li><li><strong>路由组件缓存</strong>：比如后台管理系统中，用户希望切换回上一个页面时保留其状态</li><li><strong>高频切换组件</strong>：减少重复渲染开销</li></ol><h4 id="五、注意事项" tabindex="-1">五、注意事项 <a class="header-anchor" href="#五、注意事项" aria-label="Permalink to &quot;五、注意事项&quot;">​</a></h4><ul><li><code>keep-alive</code> 只对组件起作用，不能直接包裹 HTML 元素。</li><li><code>keep-alive</code> 不能和 <code>v-for</code> 一起使用（因为 <code>v-for</code> 优先级高于 <code>keep-alive</code>）。</li><li><code>activated</code> 和 <code>deactivated</code> 是 <code>keep-alive</code> 独有的生命周期钩子。</li><li>使用 <code>max</code> 属性时要注意 LRU 缓存策略的影响。</li></ul><h4 id="六、总结" tabindex="-1">六、总结 <a class="header-anchor" href="#六、总结" aria-label="Permalink to &quot;六、总结&quot;">​</a></h4><table tabindex="0"><thead><tr><th>特性</th><th>描述</th></tr></thead><tbody><tr><td>类型</td><td>抽象组件</td></tr><tr><td>目的</td><td>缓存组件状态，提高性能</td></tr><tr><td>生命周期</td><td><code>activated</code>、<code>deactivated</code></td></tr><tr><td>控制方式</td><td><code>include</code>、<code>exclude</code>、<code>max</code></td></tr><tr><td>适用场景</td><td>组件切换频繁、需要保留状态的场景</td></tr></tbody></table></details><h3 id="✅vue-computed-原理" tabindex="-1">✅Vue computed 原理 <a class="header-anchor" href="#✅vue-computed-原理" aria-label="Permalink to &quot;✅Vue computed 原理&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><p>Vue 的 <code>computed</code> 属性实现的核心在于<code>依赖追踪</code>和<code>响应式系统</code>。简要来说，其实现原理包括以下几个关键点：</p><ul><li><ol><li><strong>依赖收集</strong>：当一个计算属性（computed property）被访问时，Vue 会自动追踪在这个过程中哪些响应式数据（reactive data）被访问了。这是通过 Vue 的响应式系统来完成的，该系统会在读取响应式数据时进行依赖收集。</li></ol></li><li><ol start="2"><li><strong>缓存机制</strong>：计算属性的结果会被缓存起来，并且只有在其依赖的数据发生变化时才会重新计算。这意味着如果相关依赖未发生改变，多次访问同一个计算属性将会立即返回缓存的结果，而不会重复执行计算逻辑。</li></ol></li><li><ol start="3"><li><strong>响应更新</strong>：一旦某个计算属性所依赖的数据发生了变化，Vue 就会知道需要重新计算这个计算属性的值，并更新相应的视图。这种更新是自动的，开发者不需要手动干预。</li></ol></li><li><ol start="4"><li><strong>惰性求值</strong>：计算属性采用惰性求值策略，即仅在访问计算属性时才执行计算逻辑，而不是在定义时就立即执行。这样可以避免不必要的计算，提高性能。</li></ol></li></ul><p>综上所述，Vue 的 <code>computed</code> 利用了依赖追踪、缓存机制以及响应式更新等特性，使得它能够高效地管理复杂状态逻辑，同时简化了代码的编写和维护工作。</p></details><h3 id="✅vue3-watch-vs-watcheffect" tabindex="-1">✅vue3 watch vs watchEffect <a class="header-anchor" href="#✅vue3-watch-vs-watcheffect" aria-label="Permalink to &quot;✅vue3 watch vs watchEffect&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><h4 id="watch" tabindex="-1"><code>watch</code> <a class="header-anchor" href="#watch" aria-label="Permalink to &quot;\`watch\`&quot;">​</a></h4><p><code>watch</code> 更加直接，它允许你监听一个特定的数据源，并在数据源发生变化时执行回调函数。你可以监听响应式对象、引用（ref）、计算属性（computed）等。</p><ul><li><p><strong>特点</strong>：</p><ul><li>需要明确指定要监听的数据源。</li><li>可以访问监听数据变化前后的值。</li><li>默认情况下是惰性的，即只有当被监听的数据变化时才会触发回调。</li><li>支持深度监听对象的变化。</li></ul></li><li><p><strong>适用场景</strong>：</p><ul><li>当你需要对特定的数据进行监听并做出反应时非常有用。</li><li>如果需要比较新旧值来决定是否执行某些逻辑。</li></ul></li></ul><h4 id="watcheffect" tabindex="-1"><code>watchEffect</code> <a class="header-anchor" href="#watcheffect" aria-label="Permalink to &quot;\`watchEffect\`&quot;">​</a></h4><p><code>watchEffect</code> 则自动收集依赖，它会立即执行传入的函数，并追踪函数内部所有响应式数据的访问。当这些响应式数据中的任何一个发生变化时，<code>watchEffect</code> 就会重新运行。</p><ul><li><p><strong>特点</strong>：</p><ul><li>自动收集依赖项，无需显式指定监听哪些数据。</li><li>不提供访问变化前的数据值的方式。</li><li>立即执行一次以收集依赖，然后在依赖变更时重新运行。</li><li>适合用于副作用管理，比如数据获取、更新DOM等。</li></ul></li><li><p><strong>适用场景</strong>：</p><ul><li>当你想要根据多个响应式数据的变化自动重新执行某些逻辑时很有用。</li><li>对于不需要比较前后状态，只需要在相关响应式数据变化时执行某些操作的情况。</li></ul></li></ul><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><ul><li>使用 <code>watch</code> 当你需要对特定数据的变化作出响应，并且可能需要访问该数据变化前后的值。</li><li>使用 <code>watchEffect</code> 当你需要基于多个响应式数据的状态自动执行某些操作，并且不关心之前的状态。</li></ul></details><h3 id="✅vue-ssr-和-ssg-的实现原理" tabindex="-1">✅Vue SSR 和 SSG 的实现原理 <a class="header-anchor" href="#✅vue-ssr-和-ssg-的实现原理" aria-label="Permalink to &quot;✅Vue SSR 和 SSG 的实现原理&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><p>Vue 的 SSR（Server-Side Rendering，服务端渲染）和 SSG（Static Site Generation，静态站点生成）是两种不同的预渲染技术，旨在提高首屏加载速度、SEO效果以及用户体验。下面分别介绍这两种技术的实现原理。</p><h4 id="vue-ssr-实现原理" tabindex="-1">Vue SSR 实现原理 <a class="header-anchor" href="#vue-ssr-实现原理" aria-label="Permalink to &quot;Vue SSR 实现原理&quot;">​</a></h4><p>SSR 指的是在服务器端完成页面的 HTML 结构生成，然后将这个结构发送到客户端，客户端直接展示已经渲染好的页面，之后再下载 JavaScript 文件来接管页面交互。其主要流程如下：</p><ol><li><strong>入口文件分离</strong>：需要为服务端和客户端分别创建入口文件。服务端入口文件负责服务端渲染逻辑，而客户端入口文件负责挂载应用并处理交互。</li><li><strong>服务端渲染</strong>：在接收到请求时，服务器根据请求的数据动态地渲染出对应的HTML字符串，并将其返回给客户端。</li><li><strong>同构/通用代码</strong>：为了能够同时运行在服务器和服务端，代码需要保持一定的同构性，比如使用Vue.js的组件可以在两端复用。</li><li><strong>数据预取</strong>：由于是在服务端进行渲染，因此需要一种机制来确保在渲染之前获取必要的数据。这通常通过<code>asyncData</code>或类似的钩子函数来实现，在渲染前异步获取数据。</li><li><strong>客户端激活</strong>：当带有已渲染内容的HTML到达客户端后，Vue会对其进行“激活”，即绑定事件处理器等，让页面变为一个完整的单页应用。</li></ol><h4 id="vue-ssg-实现原理" tabindex="-1">Vue SSG 实现原理 <a class="header-anchor" href="#vue-ssg-实现原理" aria-label="Permalink to &quot;Vue SSG 实现原理&quot;">​</a></h4><p>SSG 是预先构建所有页面为静态HTML文件的过程，这些页面可以部署在任何静态文件服务器上。它适合于内容变化不频繁的网站。其核心思想是：</p><ol><li><strong>构建时渲染</strong>：在构建阶段，根据路由配置及可能的数据源，提前渲染所有的页面为静态HTML文件。</li><li><strong>静态资源输出</strong>：除了HTML文件外，还会生成相关的JavaScript、CSS等资源文件。</li><li><strong>部署灵活性</strong>：生成的静态文件可以直接部署到任何静态托管服务上，如Netlify、Vercel等，无需专门的服务器端环境支持。</li><li><strong>数据更新策略</strong>：对于部分内容需要动态更新的情况，可以通过API调用或增量生成等方式来解决。一些框架也提供了重新生成部分页面的能力。</li></ol><h4 id="区别与联系" tabindex="-1">区别与联系 <a class="header-anchor" href="#区别与联系" aria-label="Permalink to &quot;区别与联系&quot;">​</a></h4><ul><li>SSR 更加动态，适用于需要实时数据更新的场景；而 SSG 更适合内容相对固定的网站，如博客、文档等。</li><li>SSG 通过预先生成静态页面提高了访问速度，降低了服务器负载；SSR 则提供了一种方式来在服务端动态生成每个请求的HTML，有利于SEO和首次加载性能。</li></ul><p>无论是 SSR 还是 SSG，它们的目的都是为了优化用户的初次加载体验，并改善搜索引擎的抓取效率。选择哪种方案取决于具体的应用场景和需求。</p><h4 id="ssr-seo" tabindex="-1">SSR SEO <a class="header-anchor" href="#ssr-seo" aria-label="Permalink to &quot;SSR SEO&quot;">​</a></h4><p>在使用 SSR（Server-Side Rendering，服务端渲染）时，SEO（搜索引擎优化）的处理主要依赖于服务器能够在页面请求时直接生成完整的HTML内容，这使得搜索引擎爬虫能够像普通用户一样获取到完全加载的网页内容。以下是一些关键点和最佳实践，用于确保你的 SSR 应用程序具有良好的 SEO 表现：</p><h5 id="关键点" tabindex="-1">关键点 <a class="header-anchor" href="#关键点" aria-label="Permalink to &quot;关键点&quot;">​</a></h5><ol><li><p><strong>正确的Meta标签</strong>：确保每个页面都有合适的<code>&lt;title&gt;</code>和<code>&lt;meta&gt;</code>描述标签，这些对于SEO至关重要。利用Vue的SSR功能动态地为每个页面设置这些标签。</p></li><li><p><strong>预渲染重要数据</strong>：在服务端渲染过程中，尽可能预先加载和渲染页面所需的数据。这不仅提升了用户体验，也确保了搜索引擎抓取工具可以访问完整的内容。</p></li><li><p><strong>URL结构优化</strong>：保持简洁、有意义的URL结构。避免使用复杂的查询参数，尽量采用语义化的路径来提高搜索引擎的友好度。</p></li><li><p><strong>Sitemap和Robots.txt文件</strong>：创建一个XML格式的站点地图，并通过robots.txt文件告诉搜索引擎哪些页面应该被索引，哪些不应该。这对于指导搜索引擎爬虫工作非常重要。</p></li><li><p><strong>Open Graph和Twitter Cards</strong>：为了提升社交媒体分享的效果，添加Open Graph协议元标签和Twitter Cards标记，这样当你的页面被分享到社交网络时，会显示吸引人的卡片视图。</p></li><li><p><strong>响应式设计</strong>：确保网站在各种设备上都能良好显示。随着移动优先索引策略的普及，拥有响应式设计的网站将更受搜索引擎青睐。</p></li><li><p><strong>性能优化</strong>：尽管SSR有助于首次加载时间，但仍然需要关注其他性能因素，如图片优化、代码分割等，以进一步改善页面加载速度和用户体验。</p></li><li><p><strong>结构化数据（Schema Markup）</strong>：使用结构化数据可以帮助搜索引擎更好地理解你的网页内容，从而可能获得丰富的搜索结果展示（如评分、价格等信息）。</p></li></ol><h5 id="实践建议" tabindex="-1">实践建议 <a class="header-anchor" href="#实践建议" aria-label="Permalink to &quot;实践建议&quot;">​</a></h5><ul><li>在Vue应用中使用<code>vue-meta</code>库管理页面的头部信息，它允许你在组件内部方便地设置meta标签。</li><li>定期检查Google Search Console或其他类似工具提供的反馈，了解你的网站在搜索引擎中的表现，并根据反馈进行调整。</li><li>考虑使用渐进式Web应用（PWA）技术来增强用户体验，同时也有助于SEO。</li></ul><p>通过上述措施，你可以最大化地发挥SSR在SEO方面的潜力，确保你的网站不仅对用户友好，也能很好地适应搜索引擎的需求。</p></details><h3 id="✅vue2和-vuex3渲染器的-diff算法" tabindex="-1">✅vue2和 vuex3渲染器的 diff算法 <a class="header-anchor" href="#✅vue2和-vuex3渲染器的-diff算法" aria-label="Permalink to &quot;✅vue2和 vuex3渲染器的 diff算法&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><p>Vue 2 和 Vue 3 在渲染机制和 diff 算法方面有着显著的不同，这些改进旨在提高性能和开发体验。</p><h4 id="vue-2-的-diff-算法" tabindex="-1">Vue 2 的 Diff 算法 <a class="header-anchor" href="#vue-2-的-diff-算法" aria-label="Permalink to &quot;Vue 2 的 Diff 算法&quot;">​</a></h4><p>Vue 2 使用的是基于 Snabbdom 的虚拟 DOM 实现。其核心 diff 算法主要包括以下几点：</p><ol><li><strong>同层级比较</strong>：Vue 2 在进行 diff 操作时，仅在同一层级上进行节点的比较，这意味着它不会跨层级去寻找节点的变化。</li><li><strong>Patch VNode</strong>：当新旧 VNode（虚拟节点）树对比时，Vue 2 会尝试以最小的代价更新实际 DOM。如果节点类型相同，则复用并更新；如果不同，则创建新的 DOM 节点替换旧的。</li><li><strong>Key 属性</strong>：通过为列表中的每个元素指定一个 <code>key</code> 属性，Vue 可以更准确地识别哪些元素被添加、移除或重新排序，从而优化重绘和重排。</li></ol><h4 id="vue-3-的-diff-算法改进" tabindex="-1">Vue 3 的 Diff 算法改进 <a class="header-anchor" href="#vue-3-的-diff-算法改进" aria-label="Permalink to &quot;Vue 3 的 Diff 算法改进&quot;">​</a></h4><p>Vue 3 对渲染器和 diff 算法进行了多项优化，包括但不限于：</p><ol><li><p><strong>静态树提升</strong>：Vue 3 引入了静态树提升的概念，能够检测到不依赖于状态的静态部分，并在初次渲染后将这部分标记为静态。这意味着在后续的状态更新中，Vue 不需要对静态部分进行 diff 操作，从而提高了性能。</p></li><li><p><strong>静态属性提升</strong>：与静态树类似，Vue 3 还可以对组件内的静态属性进行提升，减少不必要的属性比对。</p></li><li><p><strong>优化的 Patch Flag</strong>：Vue 3 使用了更为精细的 patch flag 来标记动态绑定的部分，这样在更新过程中只需关注这些动态部分，而不是整个模板，这极大地减少了需要 diff 的内容量。</p></li><li><p><strong>Fragment 和多根节点支持</strong>：Vue 3 支持 Fragment（片段），允许组件拥有多个根节点。这不仅简化了某些 UI 结构的设计，而且在 diff 算法上也做了相应的优化以支持这种结构。</p></li><li><p><strong>更高效的编译器</strong>：Vue 3 的编译器更加智能，能生成更高效的代码，尤其是在处理条件渲染和列表渲染时，能够更好地利用上述优化技术。</p></li></ol><p>总的来说，Vue 3 相对于 Vue 2，在 diff 算法和渲染逻辑上有了显著的改进，使得应用在保持简洁的同时还能获得更好的性能表现。这些改进帮助开发者构建更高效的应用程序，同时也提升了用户体验。</p></details><h3 id="✅vue-nexttick" tabindex="-1">✅Vue nextTick <a class="header-anchor" href="#✅vue-nexttick" aria-label="Permalink to &quot;✅Vue nextTick&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><h4 id="nexttick-的作用是什么-他的实现原理是什么" tabindex="-1">nextTick 的作用是什么？他的实现原理是什么 <a class="header-anchor" href="#nexttick-的作用是什么-他的实现原理是什么" aria-label="Permalink to &quot;nextTick 的作用是什么？他的实现原理是什么&quot;">​</a></h4><p><code>nextTick</code> 是一个在多个前端框架（如 Vue.js）中使用的方法，主要用于在下次 DOM 更新循环结束之后执行延迟回调。它的主要作用是在数据变化后等待 DOM 更新完成，然后执行指定的回调函数。</p><h4 id="作用-1" tabindex="-1">作用 <a class="header-anchor" href="#作用-1" aria-label="Permalink to &quot;作用&quot;">​</a></h4><p>当你修改了某些数据时，Vue 不能立即更新 DOM 以反映这些更改。它会在当前事件循环“tick”结束之后、新的渲染发生之前，将所有待处理的 DOM 更新刷新。使用 <code>nextTick</code> 可让你在 DOM 更新完成后执行代码。</p><p>例如，如果你需要在状态更新后立即操作新渲染的 DOM 元素，可以使用 <code>nextTick</code> 来确保 DOM 已经更新：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 修改数据</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;changed&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 DOM 更新后执行</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 操作更新后的 DOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h4 id="实现原理" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理" aria-label="Permalink to &quot;实现原理&quot;">​</a></h4><p><code>nextTick</code> 的实现依赖于环境。在浏览器环境中，它会尝试使用以下几种方式来安排回调函数的执行，按优先级顺序如下：</p><ol><li><strong>Promise</strong>：如果环境支持 Promise，则使用 Promise.resolve().then(callback) 安排回调。</li><li><strong>MutationObserver</strong>：对于不支持 Promise 但支持 MutationObserver 的旧版浏览器，Vue 使用 MutationObserver 来调度微任务。</li><li><strong>setImmediate</strong>：这是一个仅在 IE 中可用的方法，用于安排宏任务。</li><li><strong>setTimeout</strong>：作为最后的选择，使用 setTimeout(callback, 0) 来安排回调。</li></ol><p>通过这种方式，<code>nextTick</code> 能够尽可能地利用现代浏览器提供的高效异步执行机制，保证回调函数在当前调用栈清空且 DOM 渲染完毕之后尽快执行。这种机制使得 <code>nextTick</code> 成为一种非常有效的方式，可以在数据变更导致的 DOM 更新完成后进行后续操作。</p></details><ul><li>Vue complier 的实现原理</li></ul><details class="details custom-block"><summary>详解</summary><p>Vue 编译器（Vue Compiler）负责将 Vue 单文件组件（SFC, Single File Component）或模板字符串转换为渲染函数（render function），以便在浏览器中执行。这个过程大致可以分为两个阶段：<strong>编译时（compile time）</strong> 和 <strong>运行时（runtime）</strong>。下面简要介绍 Vue 编译器的工作原理，主要关注 Vue 2 和 Vue 3 的一些关键差异和改进。</p><h4 id="vue-2-编译器工作原理" tabindex="-1">Vue 2 编译器工作原理 <a class="header-anchor" href="#vue-2-编译器工作原理" aria-label="Permalink to &quot;Vue 2 编译器工作原理&quot;">​</a></h4><ol><li><p><strong>解析（Parse）</strong>：首先，Vue 2 编译器会将模板字符串解析成抽象语法树（AST）。这个过程包括识别模板中的文本、元素、属性、指令等，并将其结构化表示出来。</p></li><li><p><strong>优化（Optimize）</strong>：在这个阶段，Vue 会对生成的 AST 进行静态分析，标记出静态节点和动态节点。静态节点是指那些内容不会随应用状态变化而改变的节点。通过这种方式，Vue 可以跳过对静态节点的重新渲染，从而提高性能。</p></li><li><p><strong>代码生成（Generate）</strong>：最后一步是根据优化后的 AST 生成渲染函数。这些函数会在运行时被调用，用来创建虚拟 DOM 树，并最终更新实际的 DOM。</p></li></ol><h4 id="vue-3-编译器的新特性与改进" tabindex="-1">Vue 3 编译器的新特性与改进 <a class="header-anchor" href="#vue-3-编译器的新特性与改进" aria-label="Permalink to &quot;Vue 3 编译器的新特性与改进&quot;">​</a></h4><p>Vue 3 对编译器进行了多项改进，主要包括：</p><ul><li><p><strong>更高效的静态提升</strong>：Vue 3 改进了静态树提升技术，能够更好地识别和处理静态部分，减少不必要的 diff 操作，进一步提升了渲染性能。</p></li><li><p><strong>更好的分支预测</strong>：Vue 3 引入了更智能的分支预测机制，能够在编译时对条件渲染进行优化，使得运行时的决策更加高效。</p></li><li><p><strong>编译时静态分析增强</strong>：Vue 3 编译器增强了对模板的静态分析能力，能够识别更多类型的静态内容，减少了需要在运行时处理的内容量。</p></li><li><p><strong>支持自定义指令的优化</strong>：Vue 3 允许开发者编写可被编译器优化的自定义指令，提高了灵活性。</p></li><li><p><strong>更快的渲染函数生成</strong>：Vue 3 在代码生成阶段引入了新的算法和技术，使得生成的渲染函数更加简洁高效。</p></li></ul><p>总的来说，Vue 编译器的工作就是将开发人员书写的模板或 JSX 转换成高效的 JavaScript 渲染逻辑。Vue 3 相对于 Vue 2，在编译效率、输出质量和性能优化方面都有显著的进步，这使得使用 Vue 构建的应用程序能够获得更好的用户体验。同时，Vue 3 的编译器设计也更加模块化，便于未来功能的扩展和性能的持续优化。</p></details><h3 id="✅vue-中的-key" tabindex="-1">✅Vue 中的 Key <a class="header-anchor" href="#✅vue-中的-key" aria-label="Permalink to &quot;✅Vue 中的 Key&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><p>在 Vue 中，<code>key</code> 是一个特殊的属性，用于给每个节点提供一个唯一的标识。Vue 使用 <code>key</code> 来追踪节点的身份，以便更高效地更新虚拟 DOM。以下是关于 <code>key</code> 属性的详细解释：</p><h4 id="为什么需要-key" tabindex="-1">为什么需要 key？ <a class="header-anchor" href="#为什么需要-key" aria-label="Permalink to &quot;为什么需要 key？&quot;">​</a></h4><ol><li><p><strong>高效的DOM操作</strong>：当数据项的顺序发生变化时，Vue 默认会尝试复用现有的 DOM 元素来提高效率。然而，在某些情况下（例如列表渲染），这种默认行为可能会导致问题。通过为每个元素提供一个唯一的 <code>key</code> 值，Vue 可以准确地识别哪些元素被添加、删除或重新排序，从而更智能地决定如何更新 DOM。</p></li><li><p><strong>避免不必要的重渲染</strong>：使用 <code>key</code> 后，Vue 可以更好地判断哪些组件或元素实际上需要重新渲染，而不是盲目地认为所有东西都需要更新。这有助于提升性能，特别是在处理大型列表或表格时尤为重要。</p></li></ol><h4 id="如何使用-key" tabindex="-1">如何使用 key？ <a class="header-anchor" href="#如何使用-key" aria-label="Permalink to &quot;如何使用 key？&quot;">​</a></h4><ul><li>在 Vue 的模板中，<code>key</code> 特性通常应用于 <code>v-for</code> 指令生成的元素上。例如：<div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;li v-for=&quot;item in items&quot; :key=&quot;item.id&quot;&gt;{{ item.name }}&lt;/li&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div>这里，我们假设 <code>items</code> 数组中的每个对象都有一个唯一的 <code>id</code> 属性，这样可以确保每个 <code>&lt;li&gt;</code> 元素都有一个独一无二的 <code>key</code>。</li></ul><h4 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h4><ul><li><p><strong>唯一性</strong>：虽然 <code>key</code> 不一定在整个应用中都是唯一的，但在它所在的上下文中应该是唯一的。比如在一个 <code>v-for</code> 循环内部，所有的 <code>key</code> 应该是不同的。</p></li><li><p><strong>稳定性</strong>：理想情况下，<code>key</code> 应该是稳定、可预测且唯一的。如果 <code>key</code> 不稳定（例如基于随机值或者数组索引），Vue 将无法有效地追踪元素身份，可能导致不必要的组件销毁和重建，影响性能。</p></li><li><p><strong>不要使用数组索引作为 key</strong>：除非你有特别的理由这样做，否则尽量避免使用数组索引作为 <code>key</code>，因为在项目被重新排序或新增/删除时，这会导致意外的行为。相反，应该尽可能使用数据中稳定的、唯一的标识符。</p></li></ul><p>总之，正确使用 <code>key</code> 对于优化 Vue 应用的性能至关重要。它不仅帮助 Vue 更加智能地进行 DOM 操作，还能避免一些潜在的错误和性能瓶颈。</p></details><h3 id="✅ref-和-reactive-的区别" tabindex="-1">✅ref 和 reactive 的区别 <a class="header-anchor" href="#✅ref-和-reactive-的区别" aria-label="Permalink to &quot;✅ref 和 reactive 的区别&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><p>在 Vue 3 中，<code>ref</code> 和 <code>reactive</code> 是 Composition API 提供的两个核心响应式函数，它们用于创建不同类型的响应式数据。</p><h4 id="ref" tabindex="-1"><code>ref</code> <a class="header-anchor" href="#ref" aria-label="Permalink to &quot;\`ref\`&quot;">​</a></h4><ul><li><p><strong>定义</strong>：<code>ref</code> 用于创建一个包含值的响应式引用对象。这个引用对象是一个容器，它有一个 <code>.value</code> 属性来存取实际的值。</p></li><li><p><strong>适用场景</strong>：适用于基本类型数据（如字符串、数字等）或需要跨组件层级传递的数据。由于 <code>ref</code> 返回的是一个对象，因此它可以很好地处理 JavaScript 的值传递机制，尤其是在函数参数和返回值中使用时。</p></li><li><p><strong>用法示例</strong>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ref } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count.value); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">count.value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li></ul><h4 id="reactive" tabindex="-1"><code>reactive</code> <a class="header-anchor" href="#reactive" aria-label="Permalink to &quot;\`reactive\`&quot;">​</a></h4><ul><li><p><strong>定义</strong>：<code>reactive</code> 接受一个普通对象然后返回该普通对象的响应式代理。本质上是对对象进行深度监听，使对象中的所有属性都成为响应式的。</p></li><li><p><strong>适用场景</strong>：最适合于复杂的数据结构，比如对象或者数组。当你需要对整个对象进行响应式追踪而不是单一值时，<code>reactive</code> 是更合适的选择。</p></li><li><p><strong>用法示例</strong>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { reactive } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state.count); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">state.count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li></ul><h4 id="主要区别" tabindex="-1">主要区别 <a class="header-anchor" href="#主要区别" aria-label="Permalink to &quot;主要区别&quot;">​</a></h4><ol><li><p><strong>数据类型</strong>：<code>ref</code> 可以用来包装任何类型的值，包括原始类型和对象；而 <code>reactive</code> 主要用于对象（包括数组和集合），不能直接应用于原始类型。</p></li><li><p><strong>访问方式</strong>：<code>ref</code> 创建的数据需要通过 <code>.value</code> 来访问或修改其值；而 <code>reactive</code> 直接操作对象属性即可，不需要额外的语法。</p></li><li><p><strong>解构与传播</strong>：解构 <code>reactive</code> 对象不会保持响应性，而 <code>ref</code> 在某些情况下可以通过解构保持响应性（例如在 <code>&lt;script setup&gt;</code> 中自动解开）。此外，<code>ref</code> 可以作为 prop 传递并在子组件中使用 <code>.value</code> 访问，这使得它非常适合用于组件间通信。</p></li><li><p><strong>性能考虑</strong>：由于 <code>reactive</code> 对对象的所有嵌套层次进行深度监听，可能会带来一定的性能开销；相比之下，<code>ref</code> 只监听顶层的值变化，可能在特定场景下提供更好的性能表现。</p></li></ol><p>理解何时使用 <code>ref</code> 和 <code>reactive</code> 是掌握 Vue 3 Composition API 的关键之一。根据你的具体需求选择合适的工具可以让你的应用更加高效且易于维护。</p><h4 id="实现原理-1" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理-1" aria-label="Permalink to &quot;实现原理&quot;">​</a></h4><p>在 Vue 3 中，<code>ref</code> 和 <code>reactive</code> 是 Composition API 的两个重要函数，用于创建响应式数据。它们的底层实现基于 ES6 的 <code>Proxy</code> 对象，但各自有不同的机制来实现响应式行为。</p><h4 id="reactive-的底层实现原理" tabindex="-1"><code>reactive</code> 的底层实现原理 <a class="header-anchor" href="#reactive-的底层实现原理" aria-label="Permalink to &quot;\`reactive\` 的底层实现原理&quot;">​</a></h4><ul><li><p><strong>Proxy 对象</strong>：<code>reactive</code> 函数通过将传入的对象转换为一个 <code>Proxy</code> 对象来实现响应式。<code>Proxy</code> 可以拦截对对象的基本操作（如获取属性、设置属性等），这使得 Vue 能够追踪依赖并在状态改变时通知相关的视图进行更新。</p></li><li><p><strong>深度响应</strong>：使用 <code>reactive</code> 创建的对象是深度响应式的，这意味着它会递归地将所有嵌套的对象都转换为 <code>Proxy</code> 对象，确保任何层级的变化都能被检测到并触发更新。</p></li><li><p><strong>陷阱（Traps）</strong>：<code>Proxy</code> 使用了多种陷阱（如 <code>get</code>, <code>set</code>, <code>deleteProperty</code> 等）来定义当执行这些操作时的行为。例如，在 <code>get</code> 操作中收集依赖，在 <code>set</code> 操作中触发更新。</p></li></ul><h5 id="ref-的底层实现原理" tabindex="-1"><code>ref</code> 的底层实现原理 <a class="header-anchor" href="#ref-的底层实现原理" aria-label="Permalink to &quot;\`ref\` 的底层实现原理&quot;">​</a></h5><ul><li><p><strong>封装基本值</strong>：与 <code>reactive</code> 不同，<code>ref</code> 主要用于包装基本数据类型（虽然也可以包装对象）。它返回的是一个包含 <code>.value</code> 属性的对象，这个对象本身不是响应式的，但其 <code>.value</code> 属性是响应式的。</p></li><li><p><strong>触发更新</strong>：当你修改 <code>ref</code> 包装的值（即修改 <code>.value</code> 属性）时，Vue 会检测到这一变化，并触发相应的更新。对于基本数据类型的 <code>ref</code>，Vue 通过访问器属性（getter 和 setter）来追踪变化。</p></li><li><p><strong>自动解包</strong>：在模板和某些特定的反应式上下文中（比如计算属性或侦听器），Vue 会自动解包 <code>ref</code>，使其可以直接使用而不需要显式地通过 <code>.value</code> 访问。但是，在 JavaScript 代码内部使用时，仍然需要手动访问 <code>.value</code>。</p></li></ul><h5 id="总结-1" tabindex="-1">总结 <a class="header-anchor" href="#总结-1" aria-label="Permalink to &quot;总结&quot;">​</a></h5><ul><li><strong><code>reactive</code></strong> 利用 <code>Proxy</code> 提供深层次的响应式对象，适用于复杂的数据结构。</li><li><strong><code>ref</code></strong> 更加灵活，可以包装任意类型的值，特别是基本数据类型，并且通过访问器属性实现响应性。</li></ul><p>两者都是 Vue 响应式系统的重要组成部分，但根据不同的需求选择合适的工具可以使你的应用更加高效和易于维护。</p></details><ul><li>toRefs 和 toRaw 的区别</li></ul><details class="details custom-block"><summary>详解</summary><p>在 Vue 3 的 Composition API 中，<code>toRefs</code> 和 <code>toRaw</code> 是两个用于处理响应式数据的函数，但它们的作用和使用场景完全不同。了解这两者的区别对于有效地管理应用的状态非常重要。</p><h4 id="torefs" tabindex="-1"><code>toRefs</code> <a class="header-anchor" href="#torefs" aria-label="Permalink to &quot;\`toRefs\`&quot;">​</a></h4><ul><li><p><strong>作用</strong>：<code>toRefs</code> 函数将一个响应式对象转换为普通对象，其中该对象的每个属性都是指向原始响应式对象相应属性的 <code>ref</code>。这使得你可以轻松地从一个响应式对象中解构出响应式的属性，而不会失去其响应性。</p></li><li><p><strong>适用场景</strong>：当你需要将一个响应式对象的属性解构出来并在组件中使用时非常有用。这样可以确保即使在解构后，这些属性仍然保持响应式。</p></li><li><p><strong>用法示例</strong>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { reactive, toRefs } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  version: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toRefs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name.value); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: Vue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39; 3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li></ul><h4 id="toraw" tabindex="-1"><code>toRaw</code> <a class="header-anchor" href="#toraw" aria-label="Permalink to &quot;\`toRaw\`&quot;">​</a></h4><ul><li><p><strong>作用</strong>：<code>toRaw</code> 函数接受一个响应式对象（包括 <code>reactive</code> 或 <code>readonly</code> 创建的对象），并返回最初的普通对象。这是对原始数据的一个直接引用，而不是代理版本。</p></li><li><p><strong>适用场景</strong>：有时你可能需要访问原始对象来避免某些副作用或性能问题，比如当你想要绕过 Vue 的响应式系统进行一些非响应式的操作时。</p></li><li><p><strong>用法示例</strong>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { reactive, toRaw } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  version: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> originalState</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toRaw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">originalState.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Vue Original&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 修改原始对象不会触发响应式更新</span></span></code></pre></div></li></ul><h4 id="区别总结" tabindex="-1">区别总结 <a class="header-anchor" href="#区别总结" aria-label="Permalink to &quot;区别总结&quot;">​</a></h4><ul><li><p><strong>目的不同</strong>：<code>toRefs</code> 主要用于将响应式对象的属性转化为独立的 <code>ref</code>，以便于解构使用同时保留响应性；而 <code>toRaw</code> 则是为了获取响应式对象背后的原始对象，适用于那些不需要响应性的场景或者希望直接操作原始数据的情况。</p></li><li><p><strong>结果不同</strong>：使用 <code>toRefs</code> 后的结果是包含 <code>ref</code> 属性的对象，这意味着你需要通过 <code>.value</code> 来访问和修改这些属性的值，并且任何改变都会被 Vue 的响应式系统追踪。相反，<code>toRaw</code> 返回的是原始对象本身，对其所做的更改不会触发 Vue 的响应式更新机制。</p></li></ul><p>理解这两个函数的区别有助于更高效、正确地管理和操作 Vue 应用中的状态。根据具体的需求选择合适的工具，可以帮助你编写更加清晰、高效的代码。</p></details><h2 id="react-框架" tabindex="-1">React 框架 <a class="header-anchor" href="#react-框架" aria-label="Permalink to &quot;React 框架&quot;">​</a></h2><h3 id="✅react-框架原理" tabindex="-1">✅React 框架原理 <a class="header-anchor" href="#✅react-框架原理" aria-label="Permalink to &quot;✅React 框架原理&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><p>在准备前端面试时，了解 React 框架的原理是非常重要的。以下是一些关键概念和原理，可以帮助你更好地理解 React，并在面试中展示你的知识。</p><h4 id="_1-虚拟dom-virtual-dom" tabindex="-1">1. 虚拟DOM（Virtual DOM） <a class="header-anchor" href="#_1-虚拟dom-virtual-dom" aria-label="Permalink to &quot;1. 虚拟DOM（Virtual DOM）&quot;">​</a></h4><p>React 使用虚拟DOM来提高应用的性能。虚拟DOM是一个内存中的轻量级副本，反映了真实DOM的状态。当状态发生变化时，React首先更新虚拟DOM，然后通过差异算法（Diffing Algorithm）比较新旧两棵虚拟DOM树的不同，只将必要的变更应用到实际的DOM上，从而减少直接操作DOM的次数。</p><h4 id="_2-单向数据流" tabindex="-1">2. 单向数据流 <a class="header-anchor" href="#_2-单向数据流" aria-label="Permalink to &quot;2. 单向数据流&quot;">​</a></h4><p>React 实现了单向数据流的概念，这意味着数据只能在一个方向上传播：从父组件流向子组件。这种模式简化了数据流的跟踪，使得调试更加容易，同时也让应用更容易理解和维护。</p><h4 id="_3-组件化" tabindex="-1">3. 组件化 <a class="header-anchor" href="#_3-组件化" aria-label="Permalink to &quot;3. 组件化&quot;">​</a></h4><p>React 强调组件化的开发思想，鼓励开发者将UI拆分成独立、可复用的组件。每个组件都有自己的状态和属性（props），并能够根据这些数据渲染出相应的视图。</p><h4 id="_4-jsx" tabindex="-1">4. JSX <a class="header-anchor" href="#_4-jsx" aria-label="Permalink to &quot;4. JSX&quot;">​</a></h4><p>JSX是一种JavaScript的语法扩展，它看起来很像HTML，但允许你在JavaScript代码中书写类似于HTML的结构。JSX最终会被编译成纯JavaScript，这有助于更直观地创建React元素。</p><h4 id="_5-hooks" tabindex="-1">5. Hooks <a class="header-anchor" href="#_5-hooks" aria-label="Permalink to &quot;5. Hooks&quot;">​</a></h4><p>Hooks是React 16.8引入的新特性，它允许函数组件拥有类组件的大部分特性，比如状态管理（useState）、生命周期（useEffect）等，同时保持函数式的简洁性。使用Hooks可以让你避免复杂的嵌套层级，并且更方便地共享逻辑。</p><h4 id="_6-reconciliation-协调过程" tabindex="-1">6. Reconciliation（协调过程） <a class="header-anchor" href="#_6-reconciliation-协调过程" aria-label="Permalink to &quot;6. Reconciliation（协调过程）&quot;">​</a></h4><p>这是React用来决定何时以及如何更新DOM的过程。它基于一种称为“协调”的算法，该算法包括diff算法，用于比较前后两次渲染的结果，以确定需要对DOM进行哪些最小化的更改。</p></details><h2 id="样式与布局" tabindex="-1">样式与布局 <a class="header-anchor" href="#样式与布局" aria-label="Permalink to &quot;样式与布局&quot;">​</a></h2><h3 id="✅flex" tabindex="-1">✅Flex <a class="header-anchor" href="#✅flex" aria-label="Permalink to &quot;✅Flex&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><p>在前端开发中，<code>flex</code>（弹性盒子布局，Flexbox）是一种现代的、高效的 CSS 布局模型，特别适合用于一维布局（即行或列）。它简化了在不同屏幕尺寸和设备上对齐、分布和排列元素的方式，是响应式设计的重要工具。</p><h4 id="一、flex-布局的基本概念" tabindex="-1">一、Flex 布局的基本概念 <a class="header-anchor" href="#一、flex-布局的基本概念" aria-label="Permalink to &quot;一、Flex 布局的基本概念&quot;">​</a></h4><p>Flex 布局由 <strong>容器（flex container）</strong> 和 <strong>项目（flex items）</strong> 组成：</p><ul><li><strong>Flex 容器（Flex Container）</strong>：通过设置 <code>display: flex</code> 或 <code>display: inline-flex</code> 的元素。</li><li><strong>Flex 项目（Flex Items）</strong>：容器的直接子元素。</li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h4 id="二、flex-容器的主要属性" tabindex="-1">二、Flex 容器的主要属性 <a class="header-anchor" href="#二、flex-容器的主要属性" aria-label="Permalink to &quot;二、Flex 容器的主要属性&quot;">​</a></h4><h5 id="_1-flex-direction" tabindex="-1">1. <code>flex-direction</code> <a class="header-anchor" href="#_1-flex-direction" aria-label="Permalink to &quot;1. \`flex-direction\`&quot;">​</a></h5><p>定义主轴方向（即项目的排列方向）</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">flex-direction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: row | </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">row-reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | column | </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">column-reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li><code>row</code>（默认）：从左到右水平排列</li><li><code>row-reverse</code>：从右到左</li><li><code>column</code>：从上到下垂直排列</li><li><code>column-reverse</code>：从下到上</li></ul><hr><h5 id="_2-flex-wrap" tabindex="-1">2. <code>flex-wrap</code> <a class="header-anchor" href="#_2-flex-wrap" aria-label="Permalink to &quot;2. \`flex-wrap\`&quot;">​</a></h5><p>定义项目是否换行</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">flex-wrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: nowrap | wrap | </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">wrap-reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li><code>nowrap</code>（默认）：不换行</li><li><code>wrap</code>：换行</li><li><code>wrap-reverse</code>：换行但方向相反</li></ul><hr><h5 id="_3-justify-content" tabindex="-1">3. <code>justify-content</code> <a class="header-anchor" href="#_3-justify-content" aria-label="Permalink to &quot;3. \`justify-content\`&quot;">​</a></h5><p>定义主轴上的对齐方式</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">flex-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">flex-end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">space-between</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">space-around</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">space-evenly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li><code>flex-start</code>（默认）：左对齐</li><li><code>center</code>：居中</li><li><code>space-between</code>：两端对齐，项目之间间距相等</li><li><code>space-around</code>：项目周围间距相等</li></ul><hr><h5 id="_4-align-items" tabindex="-1">4. <code>align-items</code> <a class="header-anchor" href="#_4-align-items" aria-label="Permalink to &quot;4. \`align-items\`&quot;">​</a></h5><p>定义交叉轴上的对齐方式（适用于所有项目）</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">align-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: stretch | </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">flex-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">flex-end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | baseline;</span></span></code></pre></div><ul><li><code>stretch</code>（默认）：拉伸填满容器</li><li><code>center</code>：居中</li><li><code>flex-start</code>：顶部对齐</li><li><code>flex-end</code>：底部对齐</li></ul><hr><h5 id="_5-align-content" tabindex="-1">5. <code>align-content</code> <a class="header-anchor" href="#_5-align-content" aria-label="Permalink to &quot;5. \`align-content\`&quot;">​</a></h5><p>多行项目在交叉轴上的对齐方式（仅在换行时生效）</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">align-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: stretch | </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">flex-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">flex-end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">space-between</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">space-around</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><hr><h4 id="三、flex-项目的主要属性" tabindex="-1">三、Flex 项目的主要属性 <a class="header-anchor" href="#三、flex-项目的主要属性" aria-label="Permalink to &quot;三、Flex 项目的主要属性&quot;">​</a></h4><h5 id="_1-order" tabindex="-1">1. <code>order</code> <a class="header-anchor" href="#_1-order" aria-label="Permalink to &quot;1. \`order\`&quot;">​</a></h5><p>定义项目的排列顺序，默认是 0，数值越小越靠前</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">order: &lt;integer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><hr><h5 id="_2-flex-grow" tabindex="-1">2. <code>flex-grow</code> <a class="header-anchor" href="#_2-flex-grow" aria-label="Permalink to &quot;2. \`flex-grow\`&quot;">​</a></h5><p>定义项目的放大比例，默认为 0（不放大）</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">flex-grow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 1; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 项目将填满剩余空间 */</span></span></code></pre></div><hr><h5 id="_3-flex-shrink" tabindex="-1">3. <code>flex-shrink</code> <a class="header-anchor" href="#_3-flex-shrink" aria-label="Permalink to &quot;3. \`flex-shrink\`&quot;">​</a></h5><p>定义项目的缩小比例，默认为 1（空间不足时会缩小）</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">flex-shrink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 0; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 不缩小 */</span></span></code></pre></div><hr><h5 id="_4-flex-basis" tabindex="-1">4. <code>flex-basis</code> <a class="header-anchor" href="#_4-flex-basis" aria-label="Permalink to &quot;4. \`flex-basis\`&quot;">​</a></h5><p>定义在分配多余空间之前，项目占据的主轴空间</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">flex-basis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: auto | &lt;length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li><code>auto</code>：根据 width/height 属性决定大小</li><li>可以设置固定值如 <code>200px</code></li></ul><hr><h5 id="_5-flex-推荐使用简写" tabindex="-1">5. <code>flex</code>（推荐使用简写） <a class="header-anchor" href="#_5-flex-推荐使用简写" aria-label="Permalink to &quot;5. \`flex\`（推荐使用简写）&quot;">​</a></h5><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flex: &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">flex-grow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">flex-shrink</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">flex-basis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>常用简写：</p><ul><li><code>flex: 1</code> → <code>flex: 1 1 0%</code></li><li><code>flex: auto</code> → <code>flex: 1 1 auto</code></li><li><code>flex: none</code> → <code>flex: 0 0 auto</code></li></ul><hr><h4 id="四、常见应用场景-面试常问" tabindex="-1">四、常见应用场景（面试常问） <a class="header-anchor" href="#四、常见应用场景-面试常问" aria-label="Permalink to &quot;四、常见应用场景（面试常问）&quot;">​</a></h4><table tabindex="0"><thead><tr><th>场景</th><th>解法</th></tr></thead><tbody><tr><td>水平垂直居中</td><td><code>display: flex; justify-content: center; align-items: center</code></td></tr><tr><td>等宽等高布局</td><td>使用 <code>flex: 1</code> 或 <code>flex-grow: 1</code></td></tr><tr><td>响应式导航栏</td><td>使用 <code>flex-wrap: wrap</code> 配合媒体查询</td></tr><tr><td>自适应间距</td><td>使用 <code>gap</code> 属性（CSS Grid 也支持）</td></tr><tr><td>左右结构（如页眉页脚）</td><td>使用 <code>justify-content: space-between</code></td></tr></tbody></table></details><h3 id="✅bfc" tabindex="-1">✅BFC <a class="header-anchor" href="#✅bfc" aria-label="Permalink to &quot;✅BFC&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><h4 id="bfc-是什么" tabindex="-1"><strong>BFC 是什么？</strong> <a class="header-anchor" href="#bfc-是什么" aria-label="Permalink to &quot;**BFC 是什么？**&quot;">​</a></h4><p><strong>BFC（Block Formatting Context）</strong> 是 CSS 中的一个渲染概念，表示一个独立的布局环境。在这个环境中，内部的元素按照特定规则进行布局，与外部元素互不影响。</p><hr><h4 id="bfc-的作用" tabindex="-1"><strong>BFC 的作用：</strong> <a class="header-anchor" href="#bfc-的作用" aria-label="Permalink to &quot;**BFC 的作用：**&quot;">​</a></h4><ol><li><strong>清除浮动影响</strong>：父元素创建 BFC 后，可以包含内部浮动元素，避免高度塌陷。</li><li><strong>阻止外边距合并（Margin Collapse）</strong>：两个相邻块级元素的上下 margin 不会合并。</li><li><strong>防止文字环绕浮动元素</strong>：文本内容会自动避开浮动元素，保持清晰布局。</li></ol><hr><h4 id="如何创建-bfc" tabindex="-1"><strong>如何创建 BFC？</strong> <a class="header-anchor" href="#如何创建-bfc" aria-label="Permalink to &quot;**如何创建 BFC？**&quot;">​</a></h4><p>满足以下任意条件即可创建 BFC：</p><ul><li>根元素（<code>&lt;html&gt;</code>）</li><li><code>float</code> 不为 <code>none</code></li><li><code>position</code> 为 <code>absolute</code> 或 <code>fixed</code></li><li><code>display</code> 为 <code>inline-block</code>、<code>table-cell</code>、<code>flex</code>、<code>grid</code>、<code>flow-root</code> 等</li><li><code>overflow</code> 不为 <code>visible</code>（如 <code>hidden</code>、<code>auto</code>）</li></ul><hr><h4 id="总结一句话" tabindex="-1"><strong>总结一句话：</strong> <a class="header-anchor" href="#总结一句话" aria-label="Permalink to &quot;**总结一句话：**&quot;">​</a></h4><p><strong>BFC 是一个独立的布局区域，用于控制元素内部和外部的布局行为，常用于清除浮动、防止 margin 合并等问题。</strong></p></details><ul><li>两边固定宽度中间自适应方案</li></ul><details class="details custom-block"><summary>详解</summary><ul><li>方法一：使用 Flexbox</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;en&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  flex-wrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">wrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 当空间不足时换行 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 允许子元素增长以填充可用空间 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  min-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 设置最小宽度 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  margin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lightblue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;container&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;column&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Column 1&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;column&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Column 2&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;column&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Column 3&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>优点：简洁、现代、响应式友好。</p><p>缺点：不支持 IE8 及以下浏览器。</p><ul><li>方法二：使用 CSS Grid 布局</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;en&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">grid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">auto-fit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">minmax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  gap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 列之间的间距 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lightgreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;container&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;column&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Column 1&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;column&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Column 2&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;column&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Column 3&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>优点：更直观地定义列宽。</p><p>缺点：兼容性略差于 Flexbox（但现代浏览器都支持）。</p><ul><li>方法三：浮动 + margin（传统方法）</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 清除浮动 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lightblue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .right</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lightblue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    margin-left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    margin-right</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lightcoral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;container&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;left&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Left&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;right&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Right&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;center&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Center&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>优点：兼容性较好，适用于旧浏览器。 缺点：结构顺序影响渲染顺序，中间内容在 HTML 中需放在最后。</p><ul><li>方法四：绝对定位（慎用）</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">relative</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">absolute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lightblue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .right</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">absolute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    right</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lightblue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    margin-left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    margin-right</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lightcoral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;container&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;left&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Left&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;center&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Center&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;right&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Right&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>优点：可以灵活控制位置。</p><p>缺点：脱离文档流，可能导致高度塌陷，维护困难。</p></details><h2 id="构建工具及工程化" tabindex="-1">构建工具及工程化 <a class="header-anchor" href="#构建工具及工程化" aria-label="Permalink to &quot;构建工具及工程化&quot;">​</a></h2><h3 id="✅webpack-的构建流程" tabindex="-1">✅Webpack 的构建流程 <a class="header-anchor" href="#✅webpack-的构建流程" aria-label="Permalink to &quot;✅Webpack 的构建流程&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><h4 id="webpack-是什么" tabindex="-1">Webpack 是什么 <a class="header-anchor" href="#webpack-是什么" aria-label="Permalink to &quot;Webpack 是什么&quot;">​</a></h4><p>Webpack 是一个模块打包工具，它的核心功能是将项目中的各种资源（如 JavaScript、CSS、图片等）视为模块，并通过一系列流程将它们打包成优化后的静态资源。Webpack 的构建流程可以分为以下几个主要阶段：</p><h5 id="一、初始化-initialization" tabindex="-1">一、初始化（Initialization） <a class="header-anchor" href="#一、初始化-initialization" aria-label="Permalink to &quot;一、初始化（Initialization）&quot;">​</a></h5><ol><li><p><strong>解析配置文件</strong>：</p><ul><li>Webpack 启动时会读取 <code>webpack.config.js</code> 或其他指定的配置文件。</li><li>配置包括入口（entry）、输出（output）、加载器（loader）、插件（plugin）等。</li></ul></li><li><p><strong>创建 Compiler 对象</strong>：</p><ul><li>Webpack 根据配置创建一个 <code>Compiler</code> 实例。</li><li>这个对象控制整个构建流程，管理所有插件和选项。</li></ul></li></ol><hr><h5 id="二、编译-compilation" tabindex="-1">二、编译（Compilation） <a class="header-anchor" href="#二、编译-compilation" aria-label="Permalink to &quot;二、编译（Compilation）&quot;">​</a></h5><ol start="3"><li><p><strong>执行 <code>run</code> 方法</strong>：</p><ul><li>开始构建过程，触发 <code>beforeRun</code> 和 <code>run</code> 生命周期钩子。</li></ul></li><li><p><strong>确定 Entry 入口文件</strong>：</p><ul><li>Webpack 从 entry 指定的文件开始分析依赖关系。</li></ul></li><li><p><strong>创建 Compilation 对象</strong>：</p><ul><li><code>Compilation</code> 负责实际的模块构建和打包工作。</li><li>它记录了本次构建的所有模块、资源、变化和错误信息。</li></ul></li><li><p><strong>调用 Loader 解析模块</strong>：</p><ul><li>Webpack 会根据配置中 <code>rules</code> 匹配的规则，使用对应的 loader 对模块进行转换。</li><li>例如：使用 <code>babel-loader</code> 将 ES6+ 转换为 ES5；使用 <code>css-loader</code> 处理 CSS 文件。</li></ul></li><li><p><strong>递归构建依赖图谱（Dependency Graph）</strong>：</p><ul><li>Webpack 从入口文件出发，递归地分析每一个模块的依赖关系。</li><li>构建出一个完整的依赖图谱（Dependency Graph），包含所有需要打包的模块。</li></ul></li><li><p><strong>处理异步模块（Code Splitting）</strong>：</p><ul><li>如果使用了动态导入（<code>import()</code>）或路由懒加载，Webpack 会创建额外的 chunk。</li></ul></li></ol><hr><h5 id="三、优化-optimization" tabindex="-1">三、优化（Optimization） <a class="header-anchor" href="#三、优化-optimization" aria-label="Permalink to &quot;三、优化（Optimization）&quot;">​</a></h5><ol start="9"><li><strong>执行优化策略</strong>： <ul><li>合并重复模块（ModuleConcatenationPlugin）。</li><li>去除无用代码（Tree Shaking）。</li><li>分割代码（SplitChunksPlugin）。</li><li>哈希命名（HashedModuleIdsPlugin）。</li><li>插件可以在这一阶段介入，对 chunk 进行修改。</li></ul></li></ol><hr><h5 id="四、生成资源-emit-assets" tabindex="-1">四、生成资源（Emit Assets） <a class="header-anchor" href="#四、生成资源-emit-assets" aria-label="Permalink to &quot;四、生成资源（Emit Assets）&quot;">​</a></h5><ol start="10"><li><p><strong>生成最终的 bundle 文件</strong>：</p><ul><li>Webpack 将模块内容按照 chunk 组织成最终的文件结构。</li><li>使用模板（mainTemplate、chunkTemplate 等）生成可执行的 JS 文件。</li></ul></li><li><p><strong>调用插件写入资源</strong>：</p><ul><li>所有资源（JS、CSS、图片等）准备好后，通过 <code>emit</code> 钩子通知插件进行最后的处理。</li><li>例如：<code>HtmlWebpackPlugin</code> 会生成 HTML 文件并自动引入打包好的 JS/CSS。</li></ul></li></ol><hr><h5 id="五、输出-output" tabindex="-1">五、输出（Output） <a class="header-anchor" href="#五、输出-output" aria-label="Permalink to &quot;五、输出（Output）&quot;">​</a></h5><ol start="12"><li><p><strong>写入磁盘或内存（开发服务器）</strong>：</p><ul><li>如果是生产环境，Webpack 会将资源写入到磁盘上的 <code>output.path</code> 目录。</li><li>如果是开发环境（使用 <code>webpack-dev-server</code>），则资源保存在内存中，不写入磁盘。</li></ul></li><li><p><strong>完成构建</strong>：</p><ul><li>触发 <code>done</code> 钩子，表示一次完整的构建流程结束。</li></ul></li></ol><hr><h4 id="总结图示" tabindex="-1">总结图示 <a class="header-anchor" href="#总结图示" aria-label="Permalink to &quot;总结图示&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>初始化</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>创建 Compiler</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>读取配置 &amp; 创建 Compilation</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>从 Entry 开始解析模块、调用 Loader</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>递归构建依赖图谱</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>优化模块（Tree Shaking、SplitChunks）</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>生成 Chunk &amp; 最终 Bundle</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>插件处理输出资源（HtmlWebpackPlugin 等）</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>输出到磁盘 / 内存</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>完成构建（done）</span></span></code></pre></div><hr><h4 id="常见插件与生命周期钩子说明" tabindex="-1">常见插件与生命周期钩子说明 <a class="header-anchor" href="#常见插件与生命周期钩子说明" aria-label="Permalink to &quot;常见插件与生命周期钩子说明&quot;">​</a></h4><table tabindex="0"><thead><tr><th>阶段</th><th>插件作用</th><th>示例</th></tr></thead><tbody><tr><td>初始化</td><td>注册事件监听器</td><td><code>BannerPlugin</code></td></tr><tr><td>编译</td><td>分析模块、调用 loader</td><td><code>BabelLoader</code></td></tr><tr><td>优化</td><td>拆分代码、去重、压缩</td><td><code>SplitChunksPlugin</code>, <code>TerserPlugin</code></td></tr><tr><td>输出</td><td>生成 HTML、清理目录</td><td><code>HtmlWebpackPlugin</code>, <code>CleanWebpackPlugin</code></td></tr></tbody></table></details><h3 id="✅vite-的构建流程" tabindex="-1">✅vite 的构建流程 <a class="header-anchor" href="#✅vite-的构建流程" aria-label="Permalink to &quot;✅vite 的构建流程&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><p>Vite 底层原理的理解</p><h4 id="🧠-总览" tabindex="-1">🧠 总览： <a class="header-anchor" href="#🧠-总览" aria-label="Permalink to &quot;🧠 总览：&quot;">​</a></h4><blockquote><p>Vite 构建流程分为 <strong>开发模式构建流程</strong> 和 <strong>生产模式构建流程</strong>，两者分别侧重于 <strong>快速启动+按需加载</strong> 和 <strong>打包优化+产物生成</strong>。</p></blockquote><h4 id="💻-一、开发模式构建流程-vite-dev" tabindex="-1">💻 一、开发模式构建流程（<code>vite dev</code>） <a class="header-anchor" href="#💻-一、开发模式构建流程-vite-dev" aria-label="Permalink to &quot;💻 一、开发模式构建流程（\`vite dev\`）&quot;">​</a></h4><p>开发模式下 Vite 采用的是 <strong>原生 ES 模块导入 + 按需加载 + 极速冷启动</strong>，主要流程如下：</p><h5 id="_1-启动-dev-server" tabindex="-1">1. 启动 Dev Server <a class="header-anchor" href="#_1-启动-dev-server" aria-label="Permalink to &quot;1. 启动 Dev Server&quot;">​</a></h5><ul><li>启动 <code>createServer()</code>，使用 <code>koa</code> 或类似中间件架构。</li><li>加载配置（如 <code>vite.config.ts</code>），应用插件钩子（如 <code>config</code>, <code>configureServer</code> 等）。</li></ul><h5 id="_2-模块解析与按需编译" tabindex="-1">2. 模块解析与按需编译 <a class="header-anchor" href="#_2-模块解析与按需编译" aria-label="Permalink to &quot;2. 模块解析与按需编译&quot;">​</a></h5><ul><li>拦截浏览器请求（如 <code>/src/main.ts</code>）</li><li>对 <code>.ts</code>、<code>.vue</code>、<code>.jsx</code> 等非 JS 资源做 <strong>按需转译</strong>，如调用 <code>esbuild</code> 转译 TS、JSX，或 <code>@vite/plugin-vue</code> 处理 Vue。</li><li>转换为浏览器能直接使用的 <strong>ES Module</strong>，返回给浏览器。</li></ul><h5 id="_3-hmr-热更新" tabindex="-1">3. HMR 热更新 <a class="header-anchor" href="#_3-hmr-热更新" aria-label="Permalink to &quot;3. HMR 热更新&quot;">​</a></h5><ul><li>基于 <code>WebSocket</code> 通信实现模块热更新。</li><li>修改某文件时，只重新编译该模块及其依赖，避免整体重载。</li><li>插件可以处理 <code>handleHotUpdate</code>，定制热更新行为。</li></ul><h5 id="✅-总结优点" tabindex="-1">✅ 总结优点： <a class="header-anchor" href="#✅-总结优点" aria-label="Permalink to &quot;✅ 总结优点：&quot;">​</a></h5><ul><li>利用浏览器原生 ES 模块</li><li>冷启动快，按需编译</li><li>极致热更新体验（仅编译改动模块）</li></ul><hr><h4 id="📦-二、生产模式构建流程-vite-build" tabindex="-1">📦 二、生产模式构建流程（<code>vite build</code>） <a class="header-anchor" href="#📦-二、生产模式构建流程-vite-build" aria-label="Permalink to &quot;📦 二、生产模式构建流程（\`vite build\`）&quot;">​</a></h4><p>构建流程使用的是 <strong>Rollup 作为打包器</strong>，追求优化产物体积与执行性能：</p><h5 id="_1-加载配置与插件初始化" tabindex="-1">1. 加载配置与插件初始化 <a class="header-anchor" href="#_1-加载配置与插件初始化" aria-label="Permalink to &quot;1. 加载配置与插件初始化&quot;">​</a></h5><ul><li>执行 <code>vite.config.ts</code> 并调用 <code>resolveConfig</code></li><li>执行插件生命周期钩子（如 <code>config</code>, <code>buildStart</code>, <code>resolveId</code>, <code>transform</code>, <code>generateBundle</code>）</li></ul><h5 id="_2-构建优化前处理" tabindex="-1">2. 构建优化前处理 <a class="header-anchor" href="#_2-构建优化前处理" aria-label="Permalink to &quot;2. 构建优化前处理&quot;">​</a></h5><ul><li>预构建（<code>optimizeDeps</code>）：对第三方依赖使用 <code>esbuild</code> 快速打包缓存</li><li>扫描入口文件，解析模块依赖图</li></ul><h5 id="_3-调用-rollup-打包" tabindex="-1">3. 调用 Rollup 打包 <a class="header-anchor" href="#_3-调用-rollup-打包" aria-label="Permalink to &quot;3. 调用 Rollup 打包&quot;">​</a></h5><ul><li>使用 <code>Rollup</code> 对模块进行解析、tree shaking、生成 chunk。</li><li>插件链与 Rollup 插件系统融合，如 <code>vite:vue</code>、<code>vite:css</code> 等。</li></ul><h5 id="_4-生成产物-assets" tabindex="-1">4. 生成产物（Assets） <a class="header-anchor" href="#_4-生成产物-assets" aria-label="Permalink to &quot;4. 生成产物（Assets）&quot;">​</a></h5><ul><li>支持代码分割、动态导入</li><li>支持 CSS 提取、资源 hash 命名、压缩</li><li>可配置 <code>base</code>、<code>publicDir</code>、<code>manifest</code>、<code>ssr</code> 等参数</li></ul><h4 id="🧩-三、插件机制贯穿全流程" tabindex="-1">🧩 三、插件机制贯穿全流程 <a class="header-anchor" href="#🧩-三、插件机制贯穿全流程" aria-label="Permalink to &quot;🧩 三、插件机制贯穿全流程&quot;">​</a></h4><p>Vite 的插件系统兼容 Rollup 插件，同时扩展了自己的钩子：</p><table tabindex="0"><thead><tr><th>阶段</th><th>常见插件钩子</th></tr></thead><tbody><tr><td>配置加载</td><td><code>config</code>, <code>configResolved</code></td></tr><tr><td>开发服务</td><td><code>configureServer</code>, <code>transform</code>, <code>handleHotUpdate</code></td></tr><tr><td>打包阶段</td><td><code>buildStart</code>, <code>transform</code>, <code>generateBundle</code></td></tr></tbody></table><hr><h5 id="🗣-范例" tabindex="-1">🗣 范例： <a class="header-anchor" href="#🗣-范例" aria-label="Permalink to &quot;🗣 范例：&quot;">​</a></h5><blockquote><p>Vite 的构建流程可以分为两种情况。开发模式下是基于原生 ES Module 的快速启动，通过 <code>esbuild</code> 实现按需编译和极快的热更新；生产构建时则基于 Rollup，利用插件机制完成模块打包、tree-shaking 和资源优化，产物更轻更快加载。整个过程中，Vite 通过统一的插件架构，兼容了 Rollup 插件，同时也提供了自己的扩展钩子，非常灵活。</p></blockquote><hr><h4 id="✅-扩展" tabindex="-1">✅ 扩展 <a class="header-anchor" href="#✅-扩展" aria-label="Permalink to &quot;✅ 扩展&quot;">​</a></h4><p>下面是你列出的五个 Vite 核心知识点的详细对比分析和答题模板，适合口述面试或系统学习参考：</p><hr><h4 id="✅-1-vite-和-webpack-的构建流程对比" tabindex="-1">✅ 1. Vite 和 Webpack 的构建流程对比 <a class="header-anchor" href="#✅-1-vite-和-webpack-的构建流程对比" aria-label="Permalink to &quot;✅ 1. Vite 和 Webpack 的构建流程对比&quot;">​</a></h4><h5 id="📌-核心区别" tabindex="-1">📌 核心区别： <a class="header-anchor" href="#📌-核心区别" aria-label="Permalink to &quot;📌 核心区别：&quot;">​</a></h5><table tabindex="0"><thead><tr><th>项目</th><th>Vite</th><th>Webpack</th></tr></thead><tbody><tr><td>构建模式</td><td>基于原生 ES Module，开发时按需加载</td><td>打包所有模块为一个/多个 Bundle</td></tr><tr><td>启动速度</td><td>快速冷启动（无需预构建全部模块）</td><td>冷启动慢（需构建依赖 + 应用代码）</td></tr><tr><td>模块处理</td><td>使用 esbuild 做转译（TS/JSX 等）</td><td>使用 Babel/Loader 转译</td></tr><tr><td>HMR 热更新</td><td>精细模块热更新（仅更新改动模块）</td><td>依赖模块图重构，热更新成本更高</td></tr><tr><td>构建工具</td><td>开发：Vite + esbuild，生产：Rollup</td><td>开发/生产：Webpack + Babel</td></tr><tr><td>插件体系</td><td>Rollup 插件体系为基础 + 自定义扩展</td><td>Webpack 独立插件体系</td></tr><tr><td>编译效率</td><td>esbuild（Go 编写，10-100x 快）</td><td>Babel（JS 编写，慢）</td></tr></tbody></table><h5 id="🗣-回答模板" tabindex="-1">🗣 回答模板： <a class="header-anchor" href="#🗣-回答模板" aria-label="Permalink to &quot;🗣 回答模板：&quot;">​</a></h5><blockquote><p>Vite 与 Webpack 的最大区别在于“开发时不打包”。Vite 利用浏览器的原生 ES 模块能力，按需加载模块并用 esbuild 进行极速转译。而 Webpack 则是构建时整体打包，冷启动较慢。生产模式下 Vite 使用 Rollup 构建，侧重代码优化和体积压缩。</p></blockquote><hr><h4 id="✅-2-vite-如何加速开发和构建-如-esbuild-vs-babel" tabindex="-1">✅ 2. Vite 如何加速开发和构建（如 esbuild vs babel） <a class="header-anchor" href="#✅-2-vite-如何加速开发和构建-如-esbuild-vs-babel" aria-label="Permalink to &quot;✅ 2. Vite 如何加速开发和构建（如 esbuild vs babel）&quot;">​</a></h4><h5 id="📌-加速方式" tabindex="-1">📌 加速方式： <a class="header-anchor" href="#📌-加速方式" aria-label="Permalink to &quot;📌 加速方式：&quot;">​</a></h5><ol><li><p><strong>开发构建优化</strong>：</p><ul><li>使用 <code>esbuild</code> 替代 Babel，进行 TS/JSX 快速转译（Go 编写，极快）</li><li>只处理被请求的模块（按需编译）</li></ul></li><li><p><strong>依赖预构建</strong>：</p><ul><li>第三方库（如 <code>vue</code>, <code>lodash</code>）在开发启动时会用 esbuild 预构建到缓存中（<code>optimizeDeps</code>），避免频繁重新处理</li></ul></li><li><p><strong>热更新（HMR）性能高</strong>：</p><ul><li>模块级热更新，仅重编译/重载变更模块，无需整体刷新</li></ul></li><li><p><strong>生产构建优化</strong>：</p><ul><li>使用 Rollup 做 Tree-shaking 和代码分割</li><li>支持 <code>esbuild</code> 做 minify（构建更快）</li></ul></li></ol><h5 id="🗣-模板" tabindex="-1">🗣 模板： <a class="header-anchor" href="#🗣-模板" aria-label="Permalink to &quot;🗣 模板：&quot;">​</a></h5><blockquote><p>Vite 借助 esbuild 实现了飞快的开发构建，尤其在 TS、JSX 等场景下，构建速度远超 Babel。同时，通过依赖预构建、模块级热更新和 Rollup 的产物优化，实现了开发快、构建精的双重目标。</p></blockquote><hr><h4 id="✅-3-vite-plugin-的编写流程与关键钩子" tabindex="-1">✅ 3. vite-plugin 的编写流程与关键钩子 <a class="header-anchor" href="#✅-3-vite-plugin-的编写流程与关键钩子" aria-label="Permalink to &quot;✅ 3. vite-plugin 的编写流程与关键钩子&quot;">​</a></h4><h5 id="📌-插件结构-和-rollup-插件类似" tabindex="-1">📌 插件结构（和 Rollup 插件类似）： <a class="header-anchor" href="#📌-插件结构-和-rollup-插件类似" aria-label="Permalink to &quot;📌 插件结构（和 Rollup 插件类似）：&quot;">​</a></h5><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vite:my-plugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    enforce: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pre&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 控制插件执行顺序 pre/post/默认</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {},           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 修改配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    configResolved</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolvedConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 配置已解析</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {},           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 转换模块</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    resolveId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">importer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {},       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自定义模块路径解析</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {},                      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自定义加载模块内容</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    handleHotUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {},          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 热更新处理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h5 id="📌-关键钩子" tabindex="-1">📌 关键钩子： <a class="header-anchor" href="#📌-关键钩子" aria-label="Permalink to &quot;📌 关键钩子：&quot;">​</a></h5><table tabindex="0"><thead><tr><th>钩子名</th><th>说明</th></tr></thead><tbody><tr><td><code>config</code></td><td>修改配置前处理</td></tr><tr><td><code>configResolved</code></td><td>配置已加载后调用</td></tr><tr><td><code>transform</code></td><td>转换模块内容（核心）</td></tr><tr><td><code>resolveId</code></td><td>自定义路径解析逻辑</td></tr><tr><td><code>load</code></td><td>自定义模块加载</td></tr><tr><td><code>handleHotUpdate</code></td><td>自定义 HMR 行为</td></tr></tbody></table><h5 id="🗣-模板-1" tabindex="-1">🗣 模板： <a class="header-anchor" href="#🗣-模板-1" aria-label="Permalink to &quot;🗣 模板：&quot;">​</a></h5><blockquote><p>vite-plugin 与 Rollup 插件结构基本一致，同时支持开发中用于 HMR、自定义模块加载等高级钩子。常用钩子包括 <code>transform</code>（源码转换）、<code>handleHotUpdate</code>（自定义热更新逻辑）和 <code>resolveId</code>（路径解析），可以实现各种定制行为，如自动导入、组件注册等。</p></blockquote><hr><p>######✅ 4. SSR 构建流程与 <code>vite-ssr</code> 插件</p><h4 id="📌-ssr-简介" tabindex="-1">📌 SSR 简介： <a class="header-anchor" href="#📌-ssr-简介" aria-label="Permalink to &quot;📌 SSR 简介：&quot;">​</a></h4><p>Vite SSR（Server-Side Rendering）是一种将页面在服务器上预先渲染为 HTML，再发送给客户端的模式，提升 SEO 和首屏加载。</p><h4 id="📌-ssr-构建流程" tabindex="-1">📌 SSR 构建流程： <a class="header-anchor" href="#📌-ssr-构建流程" aria-label="Permalink to &quot;📌 SSR 构建流程：&quot;">​</a></h4><ol><li><p><strong>开发阶段（<code>vite.ssrLoadModule</code>）</strong></p><ul><li>使用原生模块导入加载 <code>App.vue</code>、路由等</li><li>动态构建、无需打包</li><li>每次请求可实时加载服务端入口</li></ul></li><li><p><strong>生产构建阶段</strong></p><ul><li>使用 <code>vite build --ssr</code> 生成服务端产物</li><li>客户端使用正常 <code>vite build</code></li><li><code>manifest.json</code> 用于 SSR 产物资源映射</li></ul></li><li><p><strong>常用 SSR 工具</strong></p><ul><li><code>vite-ssr</code>：开箱即用的 Vite SSR 解决方案</li><li><code>vite-plugin-ssr</code>：灵活可扩展、支持页面文件路由</li><li><code>Nuxt 3</code>：Vue 生态完整 SSR 框架</li></ul></li></ol><h4 id="🗣-模板-2" tabindex="-1">🗣 模板： <a class="header-anchor" href="#🗣-模板-2" aria-label="Permalink to &quot;🗣 模板：&quot;">​</a></h4><blockquote><p>Vite SSR 支持按需加载服务端模块，开发阶段使用 <code>vite.ssrLoadModule</code> 动态加载 Vue 组件。构建阶段则通过 <code>vite build --ssr</code> 输出 Node 可用模块，结合 <code>manifest.json</code> 实现客户端资源映射。使用 <code>vite-ssr</code> 插件可以更方便地管理路由和模板渲染。</p></blockquote><hr><h4 id="✅-5-vite-中-css-和静态资源如何处理" tabindex="-1">✅ 5. vite 中 CSS 和静态资源如何处理 <a class="header-anchor" href="#✅-5-vite-中-css-和静态资源如何处理" aria-label="Permalink to &quot;✅ 5. vite 中 CSS 和静态资源如何处理&quot;">​</a></h4><h5 id="📌-css-处理" tabindex="-1">📌 CSS 处理： <a class="header-anchor" href="#📌-css-处理" aria-label="Permalink to &quot;📌 CSS 处理：&quot;">​</a></h5><ol><li><p><strong>开发阶段</strong></p><ul><li>自动注入到页面 <code>&lt;style&gt;</code> 标签中</li><li>支持 PostCSS、预处理器（如 Sass、Less）</li></ul></li><li><p><strong>生产阶段</strong></p><ul><li>使用 Rollup 插件提取为独立 CSS 文件</li><li>支持 <code>cssCodeSplit</code> 分离 chunk CSS</li><li>支持 <code>vite-plugin-css-modules</code>, <code>postcss</code> 插件链</li></ul></li><li><p><strong>CSS Modules</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// xxx.module.css</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.title { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: red }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> style </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./xxx.module.css&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">style.title</span></span></code></pre></div></li></ol><h5 id="📌-静态资源处理" tabindex="-1">📌 静态资源处理： <a class="header-anchor" href="#📌-静态资源处理" aria-label="Permalink to &quot;📌 静态资源处理：&quot;">​</a></h5><ol><li><p><strong>引用规则</strong>（默认 4kb 为临界值）：</p><ul><li>小文件转 base64 内联</li><li>大文件拷贝至 <code>dist/assets</code> 并替换路径</li></ul></li><li><p><strong>使用方式</strong>：</p><ul><li>JS/TS 引入：<code>import logo from &#39;./logo.png&#39;</code></li><li>CSS 中引用：<code>background: url(&#39;./bg.jpg&#39;)</code></li></ul></li><li><p><strong>public 目录</strong></p><ul><li>放置不经过打包处理的静态资源</li><li>访问路径 <code>/public/favicon.ico</code></li></ul></li></ol><h5 id="🗣-模板-3" tabindex="-1">🗣 模板： <a class="header-anchor" href="#🗣-模板-3" aria-label="Permalink to &quot;🗣 模板：&quot;">​</a></h5><blockquote><p>在开发时，Vite 会自动将 CSS 注入到页面中，支持各种预处理器。在生产构建时，CSS 被提取成独立文件并自动分块。静态资源如图片、字体等也根据大小自动处理，内联或拷贝到 <code>dist/assets</code>。此外还有 <code>public</code> 目录专门用于不打包的静态资源。</p></blockquote></details><h3 id="✅webpack-vs-vite" tabindex="-1">✅Webpack vs vite <a class="header-anchor" href="#✅webpack-vs-vite" aria-label="Permalink to &quot;✅Webpack vs vite&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary><h4 id="🧩-一、基本介绍" tabindex="-1">🧩 一、基本介绍 <a class="header-anchor" href="#🧩-一、基本介绍" aria-label="Permalink to &quot;🧩 一、基本介绍&quot;">​</a></h4><h5 id="webpack" tabindex="-1"><strong>Webpack</strong> <a class="header-anchor" href="#webpack" aria-label="Permalink to &quot;**Webpack**&quot;">​</a></h5><ul><li>类型：模块打包器（module bundler）</li><li>发布时间：2012 年</li><li>特点： <ul><li>支持代码分割、懒加载、热更新等高级功能。</li><li>插件系统非常丰富，生态庞大。</li><li>主要用于<strong>传统构建流程</strong>（如 React、Vue、Angular 等项目）。</li></ul></li></ul><h5 id="vite" tabindex="-1"><strong>Vite</strong> <a class="header-anchor" href="#vite" aria-label="Permalink to &quot;**Vite**&quot;">​</a></h5><ul><li>类型：新型前端构建工具</li><li>发布时间：2020 年（由 Vue.js 作者尤雨溪创建）</li><li>特点： <ul><li>基于原生 ES 模块（ESM），开发服务器启动快。</li><li>支持 TypeScript、JSX、CSS 预处理器等无需配置即可开箱即用。</li><li>构建速度极快，尤其适用于<strong>现代浏览器和现代 JavaScript 开发</strong>。</li></ul></li></ul><h4 id="⚙️-二、核心区别" tabindex="-1">⚙️ 二、核心区别 <a class="header-anchor" href="#⚙️-二、核心区别" aria-label="Permalink to &quot;⚙️ 二、核心区别&quot;">​</a></h4><table tabindex="0"><thead><tr><th>特性</th><th>Webpack</th><th>Vite</th></tr></thead><tbody><tr><td>启动速度</td><td>较慢（需要打包所有文件）</td><td>极快（利用浏览器原生 ESM，按需加载）</td></tr><tr><td>生产构建</td><td>使用 webpack 打包输出优化后的 bundle</td><td>使用 Rollup 进行生产环境打包</td></tr><tr><td>开发模式</td><td>编译后提供本地服务</td><td>利用浏览器原生支持 ES Modules</td></tr><tr><td>配置复杂度</td><td>复杂，依赖大量插件</td><td>简洁，大部分默认配置已满足需求</td></tr><tr><td>热更新（HMR）</td><td>支持，但较慢</td><td>支持，响应速度快</td></tr><tr><td>插件系统</td><td>基于 webpack 插件生态（庞大）</td><td>基于 Rollup 插件系统（逐渐成熟）</td></tr><tr><td>支持框架</td><td>React、Vue、Angular 等主流框架</td><td>Vue 3、React、Svelte 等现代框架</td></tr><tr><td>CSS 预处理</td><td>需手动配置 loader（如 sass-loader）</td><td>内置支持 <code>.scss</code>, <code>.less</code>, <code>.styl</code> 等</td></tr><tr><td>TypeScript</td><td>需要 <code>ts-loader</code> 或 <code>babel-loader</code></td><td>默认支持 <code>.ts</code> 文件</td></tr><tr><td>JSX / Vue SFC</td><td>需配置 Babel / vue-loader</td><td>默认支持</td></tr></tbody></table><h4 id="📈-三、使用场景对比" tabindex="-1">📈 三、使用场景对比 <a class="header-anchor" href="#📈-三、使用场景对比" aria-label="Permalink to &quot;📈 三、使用场景对比&quot;">​</a></h4><h5 id="✅-webpack-更适合" tabindex="-1">✅ Webpack 更适合： <a class="header-anchor" href="#✅-webpack-更适合" aria-label="Permalink to &quot;✅ Webpack 更适合：&quot;">​</a></h5><ul><li>老旧项目或需要兼容 IE11 的项目。</li><li>需要高度定制化打包策略的大型应用。</li><li>需要兼容不支持 ES Module 的浏览器环境。</li><li>使用 Angular 的项目（目前 Angular CLI 仍基于 Webpack）。</li></ul><h5 id="✅-vite-更适合" tabindex="-1">✅ Vite 更适合： <a class="header-anchor" href="#✅-vite-更适合" aria-label="Permalink to &quot;✅ Vite 更适合：&quot;">​</a></h5><ul><li>现代浏览器环境下的新项目（ES6+）。</li><li>快速原型开发、小型到中型项目。</li><li>使用 Vue 3、React、Svelte 等现代框架。</li><li>需要极速的开发体验（尤其是 HMR）。</li></ul><hr><h4 id="🔧-四、典型命令对比" tabindex="-1">🔧 四、典型命令对比 <a class="header-anchor" href="#🔧-四、典型命令对比" aria-label="Permalink to &quot;🔧 四、典型命令对比&quot;">​</a></h4><h5 id="webpack-1" tabindex="-1">Webpack <a class="header-anchor" href="#webpack-1" aria-label="Permalink to &quot;Webpack&quot;">​</a></h5><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> webpack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> webpack-cli</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动开发服务器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> webpack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> serve</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 构建生产版本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> webpack</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --mode</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> production</span></span></code></pre></div><h5 id="vite-1" tabindex="-1">Vite <a class="header-anchor" href="#vite-1" aria-label="Permalink to &quot;Vite&quot;">​</a></h5><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建项目</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite@latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动开发服务器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 构建生产版本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><hr><h4 id="🌱-五、生态系统与社区支持" tabindex="-1">🌱 五、生态系统与社区支持 <a class="header-anchor" href="#🌱-五、生态系统与社区支持" aria-label="Permalink to &quot;🌱 五、生态系统与社区支持&quot;">​</a></h4><table tabindex="0"><thead><tr><th>方面</th><th>Webpack</th><th>Vite</th></tr></thead><tbody><tr><td>社区活跃度</td><td>非常高（长期维护）</td><td>快速增长（Vue、React 社区支持强）</td></tr><tr><td>插件数量</td><td>极其丰富</td><td>正在快速增长</td></tr><tr><td>文档质量</td><td>成熟且完整</td><td>清晰简洁，文档友好</td></tr><tr><td>兼容性</td><td>支持老旧浏览器</td><td>推荐用于现代浏览器</td></tr></tbody></table><hr><h4 id="📊-六、性能对比示例" tabindex="-1">📊 六、性能对比示例 <a class="header-anchor" href="#📊-六、性能对比示例" aria-label="Permalink to &quot;📊 六、性能对比示例&quot;">​</a></h4><table tabindex="0"><thead><tr><th>操作</th><th>Webpack</th><th>Vite</th></tr></thead><tbody><tr><td>初始启动时间</td><td>5~20 秒</td><td>&lt; 1 秒</td></tr><tr><td>修改文件后热更新</td><td>1~3 秒</td><td>~0.1 秒</td></tr><tr><td>生产构建时间</td><td>10~30 秒</td><td>5~10 秒（Rollup）</td></tr></tbody></table><hr><h4 id="✅-七、总结建议" tabindex="-1">✅ 七、总结建议 <a class="header-anchor" href="#✅-七、总结建议" aria-label="Permalink to &quot;✅ 七、总结建议&quot;">​</a></h4><table tabindex="0"><thead><tr><th>场景</th><th>推荐工具</th></tr></thead><tbody><tr><td>新项目、现代框架、追求开发效率</td><td>✅ Vite</td></tr><tr><td>老项目、需要兼容 IE、高度定制化</td><td>✅ Webpack</td></tr><tr><td>快速原型开发</td><td>✅ Vite</td></tr><tr><td>Angular 项目</td><td>✅ Webpack（目前主流）</td></tr><tr><td>大型企业级应用</td><td>可以结合使用（Vite + 微前端架构）</td></tr></tbody></table></details><h3 id="✅typescript" tabindex="-1">✅<a href="/rookie-fly-blog/learning/category/modules/page3.html">TypeScript</a> <a class="header-anchor" href="#✅typescript" aria-label="Permalink to &quot;✅[TypeScript](/learning/category/modules/page3)&quot;">​</a></h3><details class="details custom-block"><summary>详解</summary></details><ul><li>Uniapp</li></ul><details class="details custom-block"><summary>详解</summary></details><ul><li>前端架构</li></ul><details class="details custom-block"><summary>详解</summary></details><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><ul><li>大文件上传方案</li></ul><details class="details custom-block"><summary>详解</summary></details><ul><li>移动端适配</li></ul><details class="details custom-block"><summary>详解</summary></details><ul><li>数据大屏适配</li></ul><details class="details custom-block"><summary>详解</summary></details><ul><li>谷歌浏览器插件</li></ul><details class="details custom-block"><summary>详解</summary></details><ul><li>脚手架cli</li></ul><details class="details custom-block"><summary>详解</summary></details><ul><li>vite插件编写</li></ul><details class="details custom-block"><summary>详解</summary></details><ul><li>vscode插件编写</li></ul><details class="details custom-block"><summary>详解</summary></details><ul><li>AI 前端功能实现</li></ul><details class="details custom-block"><summary>详解</summary></details><ul><li>SEO 如何做</li></ul><details class="details custom-block"><summary>详解</summary><h3 id="如何优化-seo" tabindex="-1">如何优化 SEO <a class="header-anchor" href="#如何优化-seo" aria-label="Permalink to &quot;如何优化 SEO&quot;">​</a></h3><blockquote><p>SEO（搜索引擎优化）的主要目的是通过提高网站在搜索引擎结果页面（SERPs）中的可见性和排名，从而吸引更多的有机（非付费）流量到网站</p></blockquote><p>从提高<code>网站的可见性</code>和<code>访问量</code>的角度来归类，可以将上述SEO策略分为以下几个类别：</p><p><strong>一、提升搜索引擎可见性</strong></p><ol><li>关键词研究：投其所好，目标受众使用的关键词，确保自然地出现在网站内容中</li><li>技术优化：使用语义化标签，加快网站加载速度、保证移动端友好、使用SSL保证网站安全、创建网站地图sitemap、使用结构化数据标记，让搜索引擎更容易和理解你的页面</li></ol><p><strong>二、增加用户访问量</strong></p><ol><li>高质量内容创建： 提供有价值、原创与目标关键词相关的内容，吸引访问者同时鼓励其他网站链接您的页面</li><li>用户体验（UX）： 设计良好、易于导航，减少跳出率，增加用户停留时间</li><li>外部链接建设：获取来自权威网站的反向链接</li><li>社交媒体整合：增加曝光度，间接增加访问量</li><li>图片和视频优化： 图片添加alt属性。制作视频吸引流量</li></ol><p><strong>三、长期增长访问量</strong></p><ol><li>定期更新内容：保持内容新鲜度，有利于保持搜索引擎的关注</li><li>避免黑帽SEO技巧：避免使用如隐藏文本、关键词堆砌等不当做法，以免遭受搜索引擎的惩罚，影响网站的长期发展和可见性。</li></ol></details><ul><li>uniapp 插件开发</li></ul><details class="details custom-block"><summary>详解</summary></details><h2 id="nodejs" tabindex="-1">NodeJS <a class="header-anchor" href="#nodejs" aria-label="Permalink to &quot;NodeJS&quot;">​</a></h2><ul><li>流</li></ul><details class="details custom-block"><summary>详解</summary></details>`,119)]))}const E=s(e,[["render",n]]);export{c as __pageData,E as default};
