import{_ as i,a,o as t,b0 as n}from"./chunks/framework.BBy0ZaTh.js";const c=JSON.parse('{"title":"🎯 JavaScript 中 原型 和 原型链 的理解","description":"","frontmatter":{},"headers":[],"relativePath":"learning/core/modules/page3.md","filePath":"learning/core/modules/page3.md","lastUpdated":1752457654000}'),p={name:"learning/core/modules/page3.md"};function e(l,s,h,k,o,r){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="🎯-javascript-中-原型-和-原型链-的理解" tabindex="-1">🎯 JavaScript 中 原型 和 原型链 的理解 <a class="header-anchor" href="#🎯-javascript-中-原型-和-原型链-的理解" aria-label="Permalink to &quot;🎯 JavaScript 中 原型 和 原型链 的理解&quot;">​</a></h1><p>✅ 回答思路：</p><blockquote><p>从“<code>什么是原型</code>”、“<code>对象如何查找属性</code>”、“<code>构造函数与原型的关系</code>”、“<code>原型链的作用</code>”以及“<code>继承实现的基础</code>”这几个方面来回答这个问题。</p></blockquote><h3 id="一、什么是原型-prototype" tabindex="-1">一、什么是原型（Prototype）？ <a class="header-anchor" href="#一、什么是原型-prototype" aria-label="Permalink to &quot;一、什么是原型（Prototype）？&quot;">​</a></h3><p>JavaScript 是一门基于<strong>原型的语言（prototype-based language）</strong>，而不是像 Java 或 C++ 那样基于类（class-based）的语言。</p><ul><li>每个函数都有一个 <code>prototype</code> 属性，它是一个对象。</li><li>这个对象是通过该函数创建的实例的原型（即所有实例共享这个原型上的属性和方法）。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 给原型添加方法</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello, I am &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> p1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Alice&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Hello, I am Alice</span></span></code></pre></div><hr><h3 id="二、什么是原型链-prototype-chain" tabindex="-1">二、什么是原型链（Prototype Chain）？ <a class="header-anchor" href="#二、什么是原型链-prototype-chain" aria-label="Permalink to &quot;二、什么是原型链（Prototype Chain）？&quot;">​</a></h3><p>当访问一个对象的属性或方法时，如果该对象本身没有这个属性，JavaScript 引擎会去它的<strong>原型对象</strong>中查找；如果原型也没有，则继续向上查找，直到找到 <code>Object.prototype</code>，最终为 <code>null</code> —— 这就是<strong>原型链</strong>。</p><h4 id="🔁-查找顺序如下" tabindex="-1">🔁 查找顺序如下： <a class="header-anchor" href="#🔁-查找顺序如下" aria-label="Permalink to &quot;🔁 查找顺序如下：&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>实例对象 → 构造函数的 prototype 对象 → Object.prototype → null</span></span></code></pre></div><h4 id="示例说明" tabindex="-1">示例说明： <a class="header-anchor" href="#示例说明" aria-label="Permalink to &quot;示例说明：&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Eating...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置原型链</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bark</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Woof!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dog</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dog.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Eating...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dog.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bark</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Woof!</span></span></code></pre></div><p>在这个例子中，<code>Dog</code> 的原型继承自 <code>Animal</code> 的原型，从而实现了继承机制。</p><hr><h3 id="三、构造函数、实例、原型之间的关系" tabindex="-1">三、构造函数、实例、原型之间的关系 <a class="header-anchor" href="#三、构造函数、实例、原型之间的关系" aria-label="Permalink to &quot;三、构造函数、实例、原型之间的关系&quot;">​</a></h3><p>可以用一句话概括这三者的关系：</p><blockquote><p><strong>每一个构造函数都有一个 prototype 属性指向它的原型对象；每个实例都有一个内部属性 [[Prototype]]（可通过 <strong>proto</strong> 访问），指向构造函数的原型对象。</strong></p></blockquote><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>构造函数</span></span>
<span class="line"><span>   |</span></span>
<span class="line"><span>   | prototype</span></span>
<span class="line"><span>   ↓</span></span>
<span class="line"><span>原型对象 &lt;--- 实例.__proto__</span></span>
<span class="line"><span>   ↑</span></span>
<span class="line"><span>[[Prototype]]</span></span>
<span class="line"><span>   |</span></span>
<span class="line"><span>实例对象</span></span></code></pre></div><hr><h3 id="四、原型链的作用" tabindex="-1">四、原型链的作用 <a class="header-anchor" href="#四、原型链的作用" aria-label="Permalink to &quot;四、原型链的作用&quot;">​</a></h3><ol><li><strong>实现继承</strong>：子类可以继承父类的方法和属性。</li><li><strong>共享数据</strong>：多个实例共享原型上的方法，节省内存。</li><li><strong>属性查找机制</strong>：JavaScript 就是通过原型链来查找对象属性的。</li></ol><hr><h3 id="五、原型链的终点-object-prototype" tabindex="-1">五、原型链的终点：Object.prototype <a class="header-anchor" href="#五、原型链的终点-object-prototype" aria-label="Permalink to &quot;五、原型链的终点：Object.prototype&quot;">​</a></h3><p>所有对象的原型链最终都会到达 <code>Object.prototype</code>，它是原型链的顶端。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {constructor: ƒ, __defineGetter__: ƒ, ...}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__proto__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// null</span></span></code></pre></div><hr><h3 id="六、常见的误区-注意事项" tabindex="-1">六、常见的误区 &amp; 注意事项 <a class="header-anchor" href="#六、常见的误区-注意事项" aria-label="Permalink to &quot;六、常见的误区 &amp; 注意事项&quot;">​</a></h3><table tabindex="0"><thead><tr><th>问题</th><th>解释</th></tr></thead><tbody><tr><td><code>__proto__</code> 与 <code>prototype</code> 的区别？</td><td><code>prototype</code> 是函数才有的属性；<code>__proto__</code> 是对象实例的属性，指向其构造函数的 <code>prototype</code></td></tr><tr><td>所有函数都有 prototype 吗？</td><td>是的，包括箭头函数（但不能作为构造函数使用）</td></tr><tr><td>原型链能无限延伸吗？</td><td>不是，最终会到 <code>null</code> 结束</td></tr></tbody></table><hr><h3 id="✅-总结" tabindex="-1">✅ 总结 <a class="header-anchor" href="#✅-总结" aria-label="Permalink to &quot;✅ 总结&quot;">​</a></h3><blockquote><p>在 JavaScript 中，每个对象都有一个原型（<code>__proto__</code>），对象在访问属性或方法时，会沿着原型链逐级查找，直到找到或者查找到 <code>null</code> 为止。原型链是 JavaScript 实现继承的核心机制。构造函数通过 <code>prototype</code> 属性将方法共享给其实例，而实例通过原型链访问这些方法和属性。</p></blockquote><h3 id="💡-扩展" tabindex="-1">💡 扩展 <a class="header-anchor" href="#💡-扩展" aria-label="Permalink to &quot;💡 扩展&quot;">​</a></h3><table tabindex="0"><thead><tr><th>内容</th><th>说明</th></tr></thead><tbody><tr><td><code>__proto__</code> vs <code>prototype</code></td><td><code>prototype</code> 是函数才有的属性；<code>__proto__</code> 是对象实例的属性，指向其构造函数的 <code>prototype</code></td></tr><tr><td>原型继承 vs 类继承</td><td>JS 是原型继承语言，没有真正的类；ES6 的 <code>class</code> 是语法糖</td></tr><tr><td>使用 <code>Object.create()</code></td><td>更灵活地创建对象并指定原型，避免构造函数副作用</td></tr><tr><td>原型污染</td><td>不要轻易修改 <code>Object.prototype</code>，可能带来安全风险和性能问题</td></tr></tbody></table>`,35)]))}const E=i(p,[["render",e]]);export{c as __pageData,E as default};
