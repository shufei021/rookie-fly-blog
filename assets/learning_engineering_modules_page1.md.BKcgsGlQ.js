import{_ as n,a as l,o as e,b0 as i}from"./chunks/framework.D10JOWeE.js";const h=JSON.parse('{"title":"Webpack 的构建流程","description":"","frontmatter":{},"headers":[],"relativePath":"learning/engineering/modules/page1.md","filePath":"learning/engineering/modules/page1.md","lastUpdated":1752997743000}'),t={name:"learning/engineering/modules/page1.md"};function s(o,a,p,r,d,c){return e(),l("div",null,a[0]||(a[0]=[i(`<h1 id="webpack-的构建流程" tabindex="-1">Webpack 的构建流程 <a class="header-anchor" href="#webpack-的构建流程" aria-label="Permalink to &quot;Webpack 的构建流程&quot;">​</a></h1><p>Webpack 是一个模块打包工具，它的核心功能是将项目中的各种资源（如 JavaScript、CSS、图片等）视为模块，并通过一系列流程将它们打包成优化后的静态资源。Webpack 的构建流程可以分为以下几个主要阶段：</p><h3 id="一、初始化-initialization" tabindex="-1">一、初始化（Initialization） <a class="header-anchor" href="#一、初始化-initialization" aria-label="Permalink to &quot;一、初始化（Initialization）&quot;">​</a></h3><ol><li><p><strong>解析配置文件</strong>：</p><ul><li>Webpack 启动时会读取 <code>webpack.config.js</code> 或其他指定的配置文件。</li><li>配置包括入口（entry）、输出（output）、加载器（loader）、插件（plugin）等。</li></ul></li><li><p><strong>创建 Compiler 对象</strong>：</p><ul><li>Webpack 根据配置创建一个 <code>Compiler</code> 实例。</li><li>这个对象控制整个构建流程，管理所有插件和选项。</li></ul></li></ol><hr><h3 id="二、编译-compilation" tabindex="-1">二、编译（Compilation） <a class="header-anchor" href="#二、编译-compilation" aria-label="Permalink to &quot;二、编译（Compilation）&quot;">​</a></h3><ol start="3"><li><p><strong>执行 <code>run</code> 方法</strong>：</p><ul><li>开始构建过程，触发 <code>beforeRun</code> 和 <code>run</code> 生命周期钩子。</li></ul></li><li><p><strong>确定 Entry 入口文件</strong>：</p><ul><li>Webpack 从 entry 指定的文件开始分析依赖关系。</li></ul></li><li><p><strong>创建 Compilation 对象</strong>：</p><ul><li><code>Compilation</code> 负责实际的模块构建和打包工作。</li><li>它记录了本次构建的所有模块、资源、变化和错误信息。</li></ul></li><li><p><strong>调用 Loader 解析模块</strong>：</p><ul><li>Webpack 会根据配置中 <code>rules</code> 匹配的规则，使用对应的 loader 对模块进行转换。</li><li>例如：使用 <code>babel-loader</code> 将 ES6+ 转换为 ES5；使用 <code>css-loader</code> 处理 CSS 文件。</li></ul></li><li><p><strong>递归构建依赖图谱（Dependency Graph）</strong>：</p><ul><li>Webpack 从入口文件出发，递归地分析每一个模块的依赖关系。</li><li>构建出一个完整的依赖图谱（Dependency Graph），包含所有需要打包的模块。</li></ul></li><li><p><strong>处理异步模块（Code Splitting）</strong>：</p><ul><li>如果使用了动态导入（<code>import()</code>）或路由懒加载，Webpack 会创建额外的 chunk。</li></ul></li></ol><hr><h3 id="三、优化-optimization" tabindex="-1">三、优化（Optimization） <a class="header-anchor" href="#三、优化-optimization" aria-label="Permalink to &quot;三、优化（Optimization）&quot;">​</a></h3><ol start="9"><li><strong>执行优化策略</strong>： <ul><li>合并重复模块（ModuleConcatenationPlugin）。</li><li>去除无用代码（Tree Shaking）。</li><li>分割代码（SplitChunksPlugin）。</li><li>哈希命名（HashedModuleIdsPlugin）。</li><li>插件可以在这一阶段介入，对 chunk 进行修改。</li></ul></li></ol><hr><h3 id="四、生成资源-emit-assets" tabindex="-1">四、生成资源（Emit Assets） <a class="header-anchor" href="#四、生成资源-emit-assets" aria-label="Permalink to &quot;四、生成资源（Emit Assets）&quot;">​</a></h3><ol start="10"><li><p><strong>生成最终的 bundle 文件</strong>：</p><ul><li>Webpack 将模块内容按照 chunk 组织成最终的文件结构。</li><li>使用模板（mainTemplate、chunkTemplate 等）生成可执行的 JS 文件。</li></ul></li><li><p><strong>调用插件写入资源</strong>：</p><ul><li>所有资源（JS、CSS、图片等）准备好后，通过 <code>emit</code> 钩子通知插件进行最后的处理。</li><li>例如：<code>HtmlWebpackPlugin</code> 会生成 HTML 文件并自动引入打包好的 JS/CSS。</li></ul></li></ol><hr><h3 id="五、输出-output" tabindex="-1">五、输出（Output） <a class="header-anchor" href="#五、输出-output" aria-label="Permalink to &quot;五、输出（Output）&quot;">​</a></h3><ol start="12"><li><p><strong>写入磁盘或内存（开发服务器）</strong>：</p><ul><li>如果是生产环境，Webpack 会将资源写入到磁盘上的 <code>output.path</code> 目录。</li><li>如果是开发环境（使用 <code>webpack-dev-server</code>），则资源保存在内存中，不写入磁盘。</li></ul></li><li><p><strong>完成构建</strong>：</p><ul><li>触发 <code>done</code> 钩子，表示一次完整的构建流程结束。</li></ul></li></ol><hr><h2 id="总结图示" tabindex="-1">总结图示 <a class="header-anchor" href="#总结图示" aria-label="Permalink to &quot;总结图示&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>初始化</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>创建 Compiler</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>读取配置 &amp; 创建 Compilation</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>从 Entry 开始解析模块、调用 Loader</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>递归构建依赖图谱</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>优化模块（Tree Shaking、SplitChunks）</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>生成 Chunk &amp; 最终 Bundle</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>插件处理输出资源（HtmlWebpackPlugin 等）</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>输出到磁盘 / 内存</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>完成构建（done）</span></span></code></pre></div><hr><h2 id="常见插件与生命周期钩子说明" tabindex="-1">常见插件与生命周期钩子说明 <a class="header-anchor" href="#常见插件与生命周期钩子说明" aria-label="Permalink to &quot;常见插件与生命周期钩子说明&quot;">​</a></h2><table tabindex="0"><thead><tr><th>阶段</th><th>插件作用</th><th>示例</th></tr></thead><tbody><tr><td>初始化</td><td>注册事件监听器</td><td><code>BannerPlugin</code></td></tr><tr><td>编译</td><td>分析模块、调用 loader</td><td><code>BabelLoader</code></td></tr><tr><td>优化</td><td>拆分代码、去重、压缩</td><td><code>SplitChunksPlugin</code>, <code>TerserPlugin</code></td></tr><tr><td>输出</td><td>生成 HTML、清理目录</td><td><code>HtmlWebpackPlugin</code>, <code>CleanWebpackPlugin</code></td></tr></tbody></table>`,22)]))}const g=n(t,[["render",s]]);export{h as __pageData,g as default};
