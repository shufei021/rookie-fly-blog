import{_ as i,a as o,o as t,b0 as r}from"./chunks/framework.D10JOWeE.js";const c=JSON.parse('{"title":"前端性能优化","description":"","frontmatter":{},"headers":[],"relativePath":"learning/optimization/modules/page1.md","filePath":"learning/optimization/modules/page1.md","lastUpdated":1752997743000}'),e={name:"learning/optimization/modules/page1.md"};function a(n,l,s,u,p,d){return t(),o("div",null,l[0]||(l[0]=[r('<h1 id="前端性能优化" tabindex="-1">前端性能优化 <a class="header-anchor" href="#前端性能优化" aria-label="Permalink to &quot;前端性能优化&quot;">​</a></h1><h3 id="一、加载优化" tabindex="-1">一、加载优化 <a class="header-anchor" href="#一、加载优化" aria-label="Permalink to &quot;一、加载优化&quot;">​</a></h3><ol><li><p><strong>预加载（Preload）</strong></p><ul><li>使用 <code>&lt;link rel=&quot;preload&quot;&gt;</code> 提前加载关键资源，如字体、CSS、JS等。</li><li>示例：<code>&lt;link rel=&quot;preload&quot; href=&quot;/styles.css&quot; as=&quot;style&quot;&gt;</code></li></ul></li><li><p><strong>懒加载（Lazy Load）</strong></p><ul><li>对图片、视频等大文件采用懒加载技术，仅当用户滚动到视口内时才加载。</li><li>示例：使用 <code>loading=&quot;lazy&quot;</code> 属性。</li></ul></li><li><p><strong>延迟加载（Defer/Async Script Loading）</strong></p><ul><li>通过 <code>defer</code> 或 <code>async</code> 加载脚本，避免阻塞页面渲染。</li><li><code>defer</code> 按顺序执行脚本，而 <code>async</code> 不保证顺序但异步加载。</li></ul></li><li><p><strong>资源合并</strong></p><ul><li>将多个小文件合并为一个，减少HTTP请求次数。</li><li>注意平衡文件大小与浏览器缓存效率。</li></ul></li><li><p><strong>资源压缩</strong></p><ul><li>使用工具压缩HTML、CSS、JavaScript代码，去除不必要的空格和注释。</li></ul></li><li><p><strong>CDN</strong></p><ul><li>使用内容分发网络(CDN)加速静态资源的访问速度。</li></ul></li><li><p><strong>HTTP2/3</strong></p><ul><li>升级到HTTP/2或HTTP/3以利用多路复用、头部压缩等功能提升性能。</li></ul></li><li><p><strong>强缓存/协商缓存</strong></p><ul><li>合理设置 <code>Cache-Control</code> 和 <code>ETag</code> 头部来控制缓存行为。</li></ul></li><li><p><strong>字体资源使用font-display：swap</strong></p><ul><li>设置 <code>font-display: swap;</code> 确保文本在自定义字体加载前可见。</li></ul></li></ol><h3 id="二、构建优化" tabindex="-1">二、构建优化 <a class="header-anchor" href="#二、构建优化" aria-label="Permalink to &quot;二、构建优化&quot;">​</a></h3><ol><li><p><strong>Tree-shaking</strong></p><ul><li>利用Webpack等打包工具移除未使用的代码部分，减小最终包大小。</li></ul></li><li><p><strong>打包分块：第三方和业务分离</strong></p><ul><li>分离第三方库与业务逻辑代码，利用长期缓存机制提高加载效率。</li></ul></li><li><p><strong>代码分割</strong></p><ul><li>根据路由或组件动态加载模块，减少初始加载时间。</li></ul></li><li><p><strong>按需加载</strong></p><ul><li>实现功能或页面级别的懒加载，只加载当前需要的部分。</li></ul></li></ol><h3 id="三、渲染优化" tabindex="-1">三、渲染优化 <a class="header-anchor" href="#三、渲染优化" aria-label="Permalink to &quot;三、渲染优化&quot;">​</a></h3><ol><li><p><strong>骨架屏</strong></p><ul><li>在内容加载前显示占位符，改善用户体验。</li></ul></li><li><p><strong>虚拟滚动加载</strong></p><ul><li>针对长列表，仅渲染视口内的元素，减少DOM操作成本。</li></ul></li><li><p><strong>SSR (Server Side Rendering)</strong></p><ul><li>在服务器端完成页面首次渲染，加快首屏加载速度。</li></ul></li><li><p><strong>减少重绘和回流</strong></p><ul><li>批量修改样式，尽量使用类名代替直接操作样式属性。</li></ul></li><li><p><strong>内存泄漏减少</strong></p><ul><li>定期检查并清理不再使用的变量和事件监听器。</li></ul></li><li><p><strong>编写复用函数和组件</strong></p><ul><li>提高代码复用性，降低维护成本。</li></ul></li><li><p><strong>内连CSS</strong></p><ul><li>对于关键路径上的CSS，可以考虑内联至HTML中以减少额外请求。</li></ul></li><li><p><strong>动画使用transform和opacity GPU加速动画</strong></p><ul><li>使用 <code>transform</code> 和 <code>opacity</code> 来创建平滑的GPU加速动画，避免触发布局重排。</li></ul></li></ol><h3 id="四、图像优化" tabindex="-1">四、图像优化 <a class="header-anchor" href="#四、图像优化" aria-label="Permalink to &quot;四、图像优化&quot;">​</a></h3><ol><li><p><strong>格式WEBP</strong></p><ul><li>转换图像格式为WebP，相比JPEG/PNG有更高的压缩率。</li></ul></li><li><p><strong>压缩</strong></p><ul><li>使用工具压缩图片，保持视觉质量的同时减小文件大小。</li></ul></li><li><p><strong>懒加载+占位图</strong></p><ul><li>结合懒加载技术和占位图，确保图像加载流畅且高效。</li></ul></li></ol><h3 id="五、监控分析" tabindex="-1">五、监控分析 <a class="header-anchor" href="#五、监控分析" aria-label="Permalink to &quot;五、监控分析&quot;">​</a></h3><ol><li><p><strong>前端埋点和上报</strong></p><ul><li>收集用户行为数据，用于后续分析和优化决策。</li></ul></li><li><p><strong>性能面包分析和追踪</strong></p><ul><li>使用Lighthouse等工具定期评估网站性能，并跟踪改进效果。</li></ul></li><li><p><strong>持续优化</strong></p><ul><li>基于监控数据不断调整和优化网站性能。</li></ul></li></ol>',11)]))}const h=i(e,[["render",a]]);export{c as __pageData,h as default};
