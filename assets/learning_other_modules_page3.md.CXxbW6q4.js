import{_ as a,a as l,o,b0 as r}from"./chunks/framework.D10JOWeE.js";const m=JSON.parse('{"title":"数据大屏适配","description":"","frontmatter":{},"headers":[],"relativePath":"learning/other/modules/page3.md","filePath":"learning/other/modules/page3.md","lastUpdated":1753172304000}'),t={name:"learning/other/modules/page3.md"};function i(d,e,n,c,s,h){return o(),l("div",null,e[0]||(e[0]=[r('<h1 id="数据大屏适配" tabindex="-1">数据大屏适配 <a class="header-anchor" href="#数据大屏适配" aria-label="Permalink to &quot;数据大屏适配&quot;">​</a></h1><h3 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h3><ul><li>作者提出了一种简单的方法来解决数据大屏在不同分辨率下完全自适应的问题。</li><li>提供了React和Vue两种框架下的代码示例。</li></ul><h3 id="实现方法" tabindex="-1">实现方法 <a class="header-anchor" href="#实现方法" aria-label="Permalink to &quot;实现方法&quot;">​</a></h3><h4 id="react版本" tabindex="-1">React版本 <a class="header-anchor" href="#react版本" aria-label="Permalink to &quot;React版本&quot;">​</a></h4><ul><li><strong>JS部分</strong>：定义了一个<code>handleScreenAuto</code>函数，用于计算屏幕的缩放比例，并应用到id为<code>screen</code>的元素上。该函数会在组件挂载时调用，并监听窗口大小变化以重新调整缩放比例。</li><li><strong>HTML部分</strong>：提供了一个基本的HTML结构，包含一个<code>screen-wrapper</code>和<code>screen</code>容器。</li><li><strong>CSS部分</strong>：设置了<code>.screen</code>类的基本样式，包括宽度、高度、定位等属性。</li></ul><h4 id="vue版本" tabindex="-1">Vue版本 <a class="header-anchor" href="#vue版本" aria-label="Permalink to &quot;Vue版本&quot;">​</a></h4><ul><li>基本原理与React版本相同，但在Vue中使用的是生命周期钩子（如<code>mounted</code>和<code>destroyed</code>）和方法（methods）来处理缩放逻辑。</li></ul><h3 id="实现原理" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理" aria-label="Permalink to &quot;实现原理&quot;">​</a></h3><ul><li><code>scale</code>缩放是根据设计稿的宽高比和当前屏幕的实际宽高比来动态调整页面元素的大小。</li><li>当前屏幕的宽高比小于设计稿的宽高比时，根据宽度调整缩放比例；反之，则根据高度调整。</li><li>示例中设计稿的分辨率为1920x960，这个值可以根据实际情况进行修改。</li></ul><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><ul><li>此方法适用于纯数据大屏展示，对于内部组件存在鼠标坐标点交互的情况（如滑块等），可能会出现偏移问题。</li><li>在极端情况下，字体显示可能会有些模糊，但通常不会影响日常使用。</li><li>对于宽高比过小的屏幕，底部可能出现空白区域，导致视觉效果不佳。</li></ul><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这种方法提供了一种简便的方式来实现数据大屏的自适应布局，尤其适合那些不想深入研究复杂适配方案的开发者。然而，它并非万能，针对特定场景可能需要结合其他适配策略共同使用。</p>',14)]))}const _=a(t,[["render",i]]);export{m as __pageData,_ as default};
