import{_ as e,a,o as s,b0 as l}from"./chunks/framework.D10JOWeE.js";const k=JSON.parse('{"title":"Vue 2 迁移到 Vue3 指南","description":"","frontmatter":{},"headers":[],"relativePath":"learning/vue/modules/page16.md","filePath":"learning/vue/modules/page16.md","lastUpdated":1753172304000}'),t={name:"learning/vue/modules/page16.md"};function o(n,i,r,d,h,p){return s(),a("div",null,i[0]||(i[0]=[l(`<h1 id="vue-2-迁移到-vue3-指南" tabindex="-1">Vue 2 迁移到 Vue3 指南 <a class="header-anchor" href="#vue-2-迁移到-vue3-指南" aria-label="Permalink to &quot;Vue 2 迁移到 Vue3 指南&quot;">​</a></h1><h2 id="一、重大变化概述" tabindex="-1">一、重大变化概述 <a class="header-anchor" href="#一、重大变化概述" aria-label="Permalink to &quot;一、重大变化概述&quot;">​</a></h2><ol><li><strong>Composition API</strong>：Vue3 引入了全新的 Composition API，作为 Options API 的补充</li><li><strong>性能提升</strong>：更小的包体积、更好的渲染性能、更高效的组件初始化</li><li><strong>TypeScript 支持</strong>：Vue3 使用 TypeScript 重写，提供更好的类型支持</li><li><strong>架构变化</strong>：模块化架构，更好的 tree-shaking 支持</li></ol><h2 id="二、api-变化" tabindex="-1">二、API 变化 <a class="header-anchor" href="#二、api-变化" aria-label="Permalink to &quot;二、API 变化&quot;">​</a></h2><h3 id="_1-全局-api-变化" tabindex="-1">1. 全局 API 变化 <a class="header-anchor" href="#_1-全局-api-变化" aria-label="Permalink to &quot;1. 全局 API 变化&quot;">​</a></h3><ul><li><code>Vue.nextTick</code> → <code>import { nextTick } from &#39;vue&#39;</code></li><li><code>Vue.set</code> 和 <code>Vue.delete</code> 不再需要（响应式系统自动处理）</li><li><code>Vue.filter</code> 已移除，建议使用 methods 或 computed 属性替代</li><li><code>Vue.component</code> → <code>app.component</code></li><li><code>Vue.directive</code> → <code>app.directive</code></li><li><code>Vue.mixin</code> → <code>app.mixin</code></li><li><code>Vue.use</code> → <code>app.use</code></li></ul><h3 id="_2-实例-api-变化" tabindex="-1">2. 实例 API 变化 <a class="header-anchor" href="#_2-实例-api-变化" aria-label="Permalink to &quot;2. 实例 API 变化&quot;">​</a></h3><ul><li><code>$on</code>, <code>$off</code>, <code>$once</code> 移除，推荐使用第三方事件库</li><li><code>$children</code> 移除，推荐使用 <code>ref</code> 访问子组件</li><li><code>$listeners</code> 移除，合并到 <code>$attrs</code> 中</li><li><code>$scopedSlots</code> 移除，统一使用 <code>$slots</code></li></ul><h2 id="三、模板语法变化" tabindex="-1">三、模板语法变化 <a class="header-anchor" href="#三、模板语法变化" aria-label="Permalink to &quot;三、模板语法变化&quot;">​</a></h2><h3 id="_1-v-model-变化" tabindex="-1">1. v-model 变化 <a class="header-anchor" href="#_1-v-model-变化" aria-label="Permalink to &quot;1. v-model 变化&quot;">​</a></h3><ul><li>Vue2 的 <code>.sync</code> 修饰符被移除，统一使用 <code>v-model</code></li><li>可以多个 <code>v-model</code> 绑定：<code>v-model:propName</code></li><li>自定义修饰符处理方式变化</li></ul><h3 id="_2-事件-api" tabindex="-1">2. 事件 API <a class="header-anchor" href="#_2-事件-api" aria-label="Permalink to &quot;2. 事件 API&quot;">​</a></h3><ul><li><code>v-on.native</code> 修饰符移除</li><li><code>emits</code> 选项成为标准配置</li></ul><h3 id="_3-其他指令变化" tabindex="-1">3. 其他指令变化 <a class="header-anchor" href="#_3-其他指令变化" aria-label="Permalink to &quot;3. 其他指令变化&quot;">​</a></h3><ul><li><code>v-for</code> 中的 <code>ref</code> 不再自动创建数组</li><li><code>v-if</code> 和 <code>v-for</code> 优先级变化：<code>v-if</code> 现在有更高的优先级</li><li><code>key</code> 在 <code>&lt;template v-for&gt;</code> 中的位置变化</li></ul><h2 id="四、组件相关变化" tabindex="-1">四、组件相关变化 <a class="header-anchor" href="#四、组件相关变化" aria-label="Permalink to &quot;四、组件相关变化&quot;">​</a></h2><h3 id="_1-异步组件" tabindex="-1">1. 异步组件 <a class="header-anchor" href="#_1-异步组件" aria-label="Permalink to &quot;1. 异步组件&quot;">​</a></h3><ul><li>新的 <code>defineAsyncComponent</code> 方法</li><li>简化了异步组件定义方式</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineAsyncComponent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AsyncComp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineAsyncComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./components/AsyncComponent.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="_2-函数式组件" tabindex="-1">2. 函数式组件 <a class="header-anchor" href="#_2-函数式组件" aria-label="Permalink to &quot;2. 函数式组件&quot;">​</a></h3><ul><li>函数式组件语法变化</li><li>需要通过函数而非对象定义</li><li>性能优势减少，建议谨慎使用</li></ul><h3 id="_3-组件生命周期" tabindex="-1">3. 组件生命周期 <a class="header-anchor" href="#_3-组件生命周期" aria-label="Permalink to &quot;3. 组件生命周期&quot;">​</a></h3><ul><li><code>beforeDestroy</code> → <code>beforeUnmount</code></li><li><code>destroyed</code> → <code>unmounted</code></li><li>新增 <code>renderTracked</code> 和 <code>renderTriggered</code> 调试钩子</li></ul><h2 id="五、响应式系统变化" tabindex="-1">五、响应式系统变化 <a class="header-anchor" href="#五、响应式系统变化" aria-label="Permalink to &quot;五、响应式系统变化&quot;">​</a></h2><h3 id="_1-reactivity-api" tabindex="-1">1. Reactivity API <a class="header-anchor" href="#_1-reactivity-api" aria-label="Permalink to &quot;1. Reactivity API&quot;">​</a></h3><ul><li><code>Vue.observable</code> 移除 → 使用 <code>reactive</code></li><li>新增 <code>ref</code>, <code>reactive</code>, <code>readonly</code> 等 API</li><li>需要显式导入响应式 API</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ref, reactive } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span></code></pre></div><h3 id="_2-响应式原理变化" tabindex="-1">2. 响应式原理变化 <a class="header-anchor" href="#_2-响应式原理变化" aria-label="Permalink to &quot;2. 响应式原理变化&quot;">​</a></h3><ul><li>使用 Proxy 替代 <code>Object.defineProperty</code></li><li>可以检测数组索引变化和对象属性添加/删除</li><li>不再需要 <code>Vue.set</code>/<code>Vue.delete</code></li></ul><h2 id="六、渲染函数变化" tabindex="-1">六、渲染函数变化 <a class="header-anchor" href="#六、渲染函数变化" aria-label="Permalink to &quot;六、渲染函数变化&quot;">​</a></h2><h3 id="_1-h-函数变化" tabindex="-1">1. h 函数变化 <a class="header-anchor" href="#_1-h-函数变化" aria-label="Permalink to &quot;1. h 函数变化&quot;">​</a></h3><ul><li><code>h</code> 函数现在全局导入</li><li>参数格式变化：更一致的 props 结构</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { h } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onClick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="_2-插槽处理" tabindex="-1">2. 插槽处理 <a class="header-anchor" href="#_2-插槽处理" aria-label="Permalink to &quot;2. 插槽处理&quot;">​</a></h3><ul><li>插槽统一为函数形式</li><li><code>this.$slots</code> 现在是函数，需要调用</li><li><code>this.$scopedSlots</code> 移除</li></ul><h2 id="七、typescript-支持" tabindex="-1">七、TypeScript 支持 <a class="header-anchor" href="#七、typescript-支持" aria-label="Permalink to &quot;七、TypeScript 支持&quot;">​</a></h2><h3 id="_1-更好的类型推断" tabindex="-1">1. 更好的类型推断 <a class="header-anchor" href="#_1-更好的类型推断" aria-label="Permalink to &quot;1. 更好的类型推断&quot;">​</a></h3><ul><li>组件选项和 Composition API 都有良好类型支持</li><li>自定义事件和 props 的类型检查</li></ul><h3 id="_2-定义组件" tabindex="-1">2. 定义组件 <a class="header-anchor" href="#_2-定义组件" aria-label="Permalink to &quot;2. 定义组件&quot;">​</a></h3><ul><li>新的 <code>defineComponent</code> 方法提供类型推断</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineComponent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 类型推断可用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="八、迁移策略" tabindex="-1">八、迁移策略 <a class="header-anchor" href="#八、迁移策略" aria-label="Permalink to &quot;八、迁移策略&quot;">​</a></h2><ol><li><p><strong>逐步迁移</strong>：</p><ul><li>使用 <code>@vue/compat</code> 构建兼容版本</li><li>逐步修复兼容性警告</li></ul></li><li><p><strong>工具支持</strong>：</p><ul><li>使用 Vue CLI 或 Vite 创建新项目</li><li>使用迁移辅助工具识别问题</li></ul></li><li><p><strong>代码重构</strong>：</p><ul><li>逐步引入 Composition API</li><li>重构过滤器为 computed/methods</li><li>更新事件处理逻辑</li></ul></li><li><p><strong>测试验证</strong>：</p><ul><li>确保单元测试和 E2E 测试覆盖</li><li>逐步验证组件功能</li></ul></li></ol><h2 id="九、其他注意事项" tabindex="-1">九、其他注意事项 <a class="header-anchor" href="#九、其他注意事项" aria-label="Permalink to &quot;九、其他注意事项&quot;">​</a></h2><ol><li><p><strong>第三方库兼容性</strong>：</p><ul><li>检查依赖库是否有 Vue3 版本</li><li>常见库如 Vuex, Vue Router 需要升级到最新版</li></ul></li><li><p><strong>构建工具</strong>：</p><ul><li>Vue CLI 需要升级到 v4.5.0+</li><li>推荐使用 Vite 获得更好的开发体验</li></ul></li><li><p><strong>浏览器支持</strong>：</p><ul><li>Vue3 不再支持 IE11 (除非使用特殊构建版本)</li><li>确保目标浏览器兼容</li></ul></li><li><p><strong>DevTools</strong>：</p><ul><li>需要安装新的 Vue DevTools 扩展</li><li>调试体验有所改进</li></ul></li></ol><h2 id="十、资源推荐" tabindex="-1">十、资源推荐 <a class="header-anchor" href="#十、资源推荐" aria-label="Permalink to &quot;十、资源推荐&quot;">​</a></h2><ol><li>官方迁移指南：<a href="https://v3-migration.vuejs.org/" target="_blank" rel="noreferrer">https://v3-migration.vuejs.org/</a></li><li>迁移构建工具：<a href="https://github.com/vuejs/vue-next/tree/master/packages/vue-compat" target="_blank" rel="noreferrer">https://github.com/vuejs/vue-next/tree/master/packages/vue-compat</a></li><li>迁移检查清单：<a href="https://v3-migration.vuejs.org/migration-guide.html#overview" target="_blank" rel="noreferrer">https://v3-migration.vuejs.org/migration-guide.html#overview</a></li></ol><p>通过系统性地处理这些变化点，可以确保 Vue2 到 Vue3 的迁移过程顺利进行。</p>`,48)]))}const u=e(t,[["render",o]]);export{k as __pageData,u as default};
