import{_ as s,a as e,o as a,b0 as t}from"./chunks/framework.BBy0ZaTh.js";const E=JSON.parse('{"title":"keep-alive的实现原理和常用属性","description":"","frontmatter":{},"headers":[],"relativePath":"learning/vue/modules/page8.md","filePath":"learning/vue/modules/page8.md","lastUpdated":1752403471000}'),l={name:"learning/vue/modules/page8.md"};function n(p,i,h,k,d,o){return a(),e("div",null,i[0]||(i[0]=[t(`<h1 id="keep-alive的实现原理和常用属性" tabindex="-1">keep-alive的实现原理和常用属性 <a class="header-anchor" href="#keep-alive的实现原理和常用属性" aria-label="Permalink to &quot;keep-alive的实现原理和常用属性&quot;">​</a></h1><p><code>&lt;keep-alive&gt;</code> 是 Vue.js 中的一个抽象组件，它用于缓存动态组件实例，从而避免重复渲染和销毁过程，提高用户体验和性能。下面是 <code>&lt;keep-alive&gt;</code> 的一些常用属性及其简要说明：</p><h4 id="常用属性" tabindex="-1">常用属性 <a class="header-anchor" href="#常用属性" aria-label="Permalink to &quot;常用属性&quot;">​</a></h4><ol><li><strong>include</strong>：字符串或正则表达式。只有名称匹配的组件会被缓存。</li><li><strong>exclude</strong>：字符串或正则表达式。任何名称匹配的组件都不会被缓存。</li><li><strong>max</strong>：数字。定义缓存组中可以保存的最大组件实例数量。</li></ol><p>示例：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">keep-alive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exclude</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;c&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;component :is=&quot;currentView&quot;&gt;&lt;/component&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">keep-alive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>在这个例子中，仅当 <code>currentView</code> 是组件 <code>a</code> 或 <code>b</code> 时，它们才会被缓存，并且缓存的组件总数不会超过 10 个。</p><h4 id="实现原理" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理" aria-label="Permalink to &quot;实现原理&quot;">​</a></h4><p><code>&lt;keep-alive&gt;</code> 组件的工作原理主要依赖于 Vue 的生命周期钩子以及内部的状态管理机制。以下是其大致工作流程：</p><ol><li><p>当一个组件被包裹在 <code>&lt;keep-alive&gt;</code> 标签内并且开始渲染时，Vue 会检查该组件是否符合 <code>include</code> 和 <code>exclude</code> 规则（如果设置了的话）。符合条件的组件将进入缓存逻辑处理。</p></li><li><p>如果组件已经被缓存过，则 <code>&lt;keep-alive&gt;</code> 不会重新创建一个新的实例，而是直接从缓存中取出并激活这个组件实例。这通过调用组件的 <code>deactivated</code> 生命周期钩子来暂停组件，而再次进入可视状态时调用 <code>activated</code> 钩子来恢复组件。</p></li><li><p>对于新的组件或者不在缓存中的组件，Vue 将正常地挂载这些组件。一旦这些组件离开可视区域，它们的状态（包括 DOM 结构、组件实例等）会被存储在一个 LRU (Least Recently Used) 缓存中。</p></li><li><p>如果设置了 <code>max</code> 属性，当达到最大缓存限制时，最近最少使用的组件实例将会被移除以腾出空间给新的组件实例。</p></li></ol><p>通过这种方式，<code>&lt;keep-alive&gt;</code> 能够有效地管理组件的状态和生命周期，提升应用性能，特别是在需要频繁切换显示不同视图的情况下非常有用。</p>`,11)]))}const c=s(l,[["render",n]]);export{E as __pageData,c as default};
