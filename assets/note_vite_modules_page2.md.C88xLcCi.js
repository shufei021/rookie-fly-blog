import{_ as i,a,o as l,b0 as t}from"./chunks/framework.D10JOWeE.js";const o=JSON.parse('{"title":"Vite 中使用 CSS 的各种功能","description":"","frontmatter":{},"headers":[],"relativePath":"note/vite/modules/page2.md","filePath":"note/vite/modules/page2.md","lastUpdated":1753172304000}'),n={name:"note/vite/modules/page2.md"};function p(e,s,h,k,d,r){return l(),a("div",null,s[0]||(s[0]=[t(`<h1 id="vite-中使用-css-的各种功能" tabindex="-1">Vite 中使用 CSS 的各种功能 <a class="header-anchor" href="#vite-中使用-css-的各种功能" aria-label="Permalink to &quot;Vite 中使用 CSS 的各种功能&quot;">​</a></h1><p>以下是 Vite 中 CSS 功能的全面总结与配置指南，结合最佳实践和示例代码，帮助开发者高效管理样式：</p><h2 id="🎨-一、基础-css-支持" tabindex="-1">🎨 一、基础 CSS 支持 <a class="header-anchor" href="#🎨-一、基础-css-支持" aria-label="Permalink to &quot;🎨 一、基础 CSS 支持&quot;">​</a></h2><p>Vite 原生支持 CSS 文件，无需额外配置：</p><ul><li><p>直接导入 <code>CSS</code>：在 <code>JS/TS</code> 文件中通过 <code>import &#39;./style.css&#39;</code> 引入，<code>Vite</code> 会自动将样式注入 <code>&lt; style&gt;</code> 标签并插入 <code>HTML</code> 头部。</p></li><li><p>CSS 变量（自定义属性）：</p><p>支持通过 <code>:root</code> 定义全局变量，增强代码复用性：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">--primary-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#1890ff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span></code></pre></div></li></ul><h2 id="🔒-二、css-模块化-避免样式冲突" tabindex="-1">🔒 二、CSS 模块化（避免样式冲突） <a class="header-anchor" href="#🔒-二、css-模块化-避免样式冲突" aria-label="Permalink to &quot;🔒 二、CSS 模块化（避免样式冲突）&quot;">​</a></h2><p>通过 .module.css 后缀启用模块化，生成哈希类名：</p><ul><li>基本使用：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> styles </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./module.module.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{styles.container}&gt;内容&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li><p>配置选项（vite.config.js）：</p><p>可自定义类名生成规则和作用域：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  css: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modules: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      scopeBehaviour: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;local&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 局部作用域</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      generateScopedName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[name]__[local]___[hash:base64:5]&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 自定义命名格式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>通过 globalModulePaths 排除全局样式文件（如 /global.css/）。</p></li></ul><h2 id="⚙️-三、css-预处理器支持" tabindex="-1">⚙️ 三、CSS 预处理器支持 <a class="header-anchor" href="#⚙️-三、css-预处理器支持" aria-label="Permalink to &quot;⚙️ 三、CSS 预处理器支持&quot;">​</a></h2><p>Vite 内置 Sass、Less、Stylus 支持，需安装对应依赖（如 npm install sass -D）：</p><ul><li>全局变量注入（避免重复导入）：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // vite.config.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    css: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      preprocessorOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        scss: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          additionalData: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`@import &quot;@/styles/variables.scss&quot;;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 自动注入全局变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        less: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          modifyVars: { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;primary-color&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#1DA57A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 修改 Less 变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          javascriptEnabled: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        styl: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          import: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;~@/styles/variables.styl&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Stylus 全局导入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span></code></pre></div><h2 id="🛠️-四、postcss-集成" tabindex="-1">🛠️ 四、PostCSS 集成 <a class="header-anchor" href="#🛠️-四、postcss-集成" aria-label="Permalink to &quot;🛠️ 四、PostCSS 集成&quot;">​</a></h2><p>通过 PostCSS 插件增强 CSS 功能：</p><ul><li>自动添加浏览器前缀（使用 autoprefixer）：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // vite.config.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> autoprefixer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;autoprefixer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    css: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      postcss: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        plugins: [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">autoprefixer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ overrideBrowserslist: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Chrome &gt; 40&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] })]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span></code></pre></div><ul><li><p>常用插件推荐：</p><ul><li><p>postcss-nested：支持嵌套语法（如 Sass 风格）。</p></li><li><p>postcss-pxtorem：将 px 转换为 rem。</p></li><li><p>cssnano：生产环境压缩 CSS。</p></li></ul></li></ul><h2 id="✨-五、css-原子化框架" tabindex="-1">✨ 五、CSS 原子化框架 <a class="header-anchor" href="#✨-五、css-原子化框架" aria-label="Permalink to &quot;✨ 五、CSS 原子化框架&quot;">​</a></h2><p>推荐使用 Windi CSS 或 Tailwind CSS 提升开发效率：</p><ul><li><p>UnoCSS 接入步骤（Vite 官方推荐）：</p><ol><li>安装依赖：npm install -D unocss @unocss/vite</li><li>配置插件：</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // vite.config.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unocss </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;unocss/vite&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    plugins: [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unocss</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ presets: [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">presetUno</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">presetAttributify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()] })]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span></code></pre></div><ol start="3"><li>在组件中动态生成原子类：</li></ol><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\`text-\${color}-500 hover:bg-\${hoverColor}/50\`&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p>优势：</p><ul><li><p>体积减少 60%~80%，提升渲染性能。</p></li><li><p>支持属性化语法（如 &lt; button bg=&quot;blue-400&quot;&gt;）。</p></li></ul></li></ul><p>🚀 六、生产环境优化</p><ul><li><p>CSS 代码分割：</p><ul><li>Vite 默认将动态导入组件的 CSS 拆分为独立文件，减少首屏负载：</li><li>import(&#39;./HeavyComponent.vue&#39;); // 自动提取组件 CSS 为独立文件</li><li>禁用方式：build: { cssCodeSplit: false }。</li></ul></li><li><p>压缩 CSS：</p><p>使用 build: { minify: &#39;esbuild&#39; }（默认）或 terser 进一步压缩。</p></li></ul><h2 id="⚠️-常见问题解决" tabindex="-1">⚠️ 常见问题解决 <a class="header-anchor" href="#⚠️-常见问题解决" aria-label="Permalink to &quot;⚠️ 常见问题解决&quot;">​</a></h2><ol><li><p>路径别名配置：<br> // vite.config.js export default defineConfig({ resolve: { alias: { &#39;@styles&#39;: &#39;/src/styles&#39; } } });</p><p>使用：import &#39;@styles/global.css&#39;。</p></li><li><p>第三方样式不生效：<br> 在 css.modules.globalModulePaths 中配置排除路径（如 [/global.css/]）。</p></li><li><p>Sass 全局变量未注入：<br> 检查 preprocessorOptions.scss.additionalData 路径是否正确。</p></li></ol><h2 id="💎-总结-功能选择指南" tabindex="-1">💎 总结：功能选择指南 <a class="header-anchor" href="#💎-总结-功能选择指南" aria-label="Permalink to &quot;💎 总结：功能选择指南&quot;">​</a></h2><table tabindex="0"><thead><tr><th>场景</th><th>推荐方案</th><th>优势</th></tr></thead><tbody><tr><td>小型项目</td><td>原生 CSS + 变量</td><td>零配置、轻量快速</td></tr><tr><td>协作项目</td><td>CSS Modules + 预处理器 避</td><td>免命名冲突、支持编程语法</td></tr><tr><td>大型应用</td><td>原子化框架（UnoCSS） + 动态导入</td><td>极致性能、高复用性</td></tr><tr><td>生产部署</td><td>PostCSS 插件 + 代码分割/压缩</td><td>优化加载速度、减少体积</td></tr></tbody></table><p>更多实践细节参考：<a href="https://vitejs.dev/guide/features.html#css" target="_blank" rel="noreferrer">https://vitejs.dev/guide/features.html#css</a> 或 [CSS 模块化配置详解]。</p>`,29)]))}const c=i(n,[["render",p]]);export{o as __pageData,c as default};
