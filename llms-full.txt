---
url: /note/vitePress/page1.md
---
# 1.从零用VitePress搭建个人轻型博客的正确姿势(1)

## 一、写在前面

最近在想更新一把自己的前端吧小博客，但发现wordPress版本停留在了5年之前，发现变化挺大，不支持在线直接更新，服务器正在运行的php等环境完全不支持wordPress最新版本。如果想使用最新版本，服务器环境配置必须更新，只能慢慢折腾了。

然后在想能不能用vitePress + CMS探索重构的可能性，所以接下来这是自己用vitePress搭建的纯文档博客的步骤，在此记录一下。

## 二、vitePress相关文档

首先我们要知道，VitePress 是 [VuePress](https://vuepress.vuejs.org/) 小兄弟, 它基于 [Vite](https://github.com/vitejs/vite)构建的，而[VuePress](https://vuepress.vuejs.org/) 是基于 Webpack构建的。

VitePress使用vite和Vue3的驱动的静态站点生成器，比之VuePress更加简约、轻型和高效。特点如下

* 开发服务器启动更快
* 热更新更快
* 构建更快(内部使用 Rollup)

更多不同可以查看文档：https://vitejs.cn/vitepress/#motivation

**官方英文文档**：https://vitepress.dev/

**中文文档**：

https://vitejs.cn/vitepress/

https://vitepress.qzxdp.cn/reference/site-config.html

## 三、初始化项目

### 1、创建项目目录并初始化

创建一个qianduan8目录，进入到目录，执行初始化命令

```js
pnpm init
```

### 2、本地项目安装VitePress

```javascript
pnpm add -D vitepress
```

![image-20230928151359486](./images/1.png)

### 3、配置项目目录结构

我们创建一个**docs/.vitepress**的目录和配置文件、首页，public。

开始我们创建的目录结构如下所示:

```javascript
├─ docs
│  ├─ .vitepress
│  │  └─ config.js
│  └─ index.md
│  └─ public
└─ package.json
```

说明如下：

**docs/.vitepress:**  用于存放全局的配置、自定义组件， 自定义主题（theme）等。

* config.js:  项目配置文件。

**public:**  公共文件目录，存放静态资源目录。（之后在首页和主题配置里可以直接使用 “/logo.png”引入）

**index.md**：则是站点的首页。

其中，config.js是配置VitePress网站的必要条件，它将导出一个JS对象，如果项目越来越大时，配置可以抽出来。

config.js初步配置：

```javascript
export default {
  title: '前端吧',
  description: '关注web前端开发为主的博客网站和前端网址大全',
  // 打包目录
  outDir: './dist',
   head: [
		// 添加图标
		['link', { rel: 'icon', href: '/favicon.ico' }]
	],
}
```

如上所示，我们只简单地设置了**网站标题，网站描述，打包的 dist 目录，以及网站图标**，后面更多配置都是在config.js这个文件完成。

### 4、配置运行脚本

在package.json下配置，如下：

```javascript
  "scripts": {
    "docs-dev": "vitepress dev docs",
    "docs-build": "vitepress build docs",
    "docs-serve": "vitepress serve docs"
  }
```

### 5、本地运行

执行如下命令

```javascript
pnpm docs-dev
```

结果如下：

![image.png](./images/2.png)

运行成功，不过目前网站是空的，只有一个logo标题，那么，接下来我们需要不断完善，比如配置导航，首页、自定义模板等等

---

---
url: /note/vitePress/page2.md
---
# 2.VitePress默认首页和头部导航配置

更多内容请查
[VitePress搭建博客教程系列(2) – VitePress默认首页和头部导航配置](http://www.qianduan8.com/2024.html)

---

---
url: /note/vitePress/page3.md
---
# 3.VitePress默认主题相关细节配置

更多内容请查
[VitePress搭建博客教程系列(3) – VitePress默认主题相关细节配置](http://www.qianduan8.com/2030.html)

---

---
url: /note/vitePress/page4.md
---
# 4.如何自定义布局页面模板？

更多内容请查
[VitePress搭建博客教程系列(4) – 如何自定义首页布局和主题样式修改？](http://www.qianduan8.com/2041.html)

---

---
url: /note/vitePress/page5.md
---
# 5.第三方组件库的使用-作组件库文档

更多内容请查
[VitePress搭建博客教程系列(5) – 第三方组件库的使用-搭建组件库文档？](http://www.qianduan8.com/2048.html)

---

---
url: /note/vitePress/page6.md
---
# 6.如何用Github Actions自动化部署到Github Pages？

更多内容请查

[VitePress搭建博客教程系列(6) – 用Github Actions自动化部署到Github Pages](http://www.qianduan8.com/2072.html)

---

---
url: /note/vitePress/page7.md
---
# 7. vitePress如何非自动化部署到Github Pages？

更多内容请查

[VitePress搭建博客教程系列(7) – vitePress如何非自动化部署到Github Pages？](http://www.qianduan8.com/2097.html)

---

---
url: /note/vitePress/page8.md
---
# 8. vitePress部署到Github Pages后发现样式错乱怎么办？

更多内容请查

[VitePress部署到Github Pages后发现样式全错乱了怎么办？](http://www.qianduan8.com/2099.html)

---

---
url: /examples/button.md
---
# Button 按钮

## 基础用法

```vue
<template>
  <el-button type="primary">主要按钮</el-button>
  <el-button type="success">绿色按钮</el-button>
  <el-button type="info">灰色按钮</el-button>
  <el-button type="warning">黄色按钮</el-button>
  <el-button type="danger">红色按钮</el-button>
</template>
```

### plain用法

::: details CODE

```vue
<el-button type="primary" plain>主要按钮</el-button>
<el-button type="success" plain>绿色按钮</el-button>
<el-button type="info" plain>灰色按钮</el-button>
<el-button type="warning" plain>黄色按钮</el-button>
<el-button type="danger" plain>红色按钮</el-button>
```

:::

---

---
url: /note/electron/page1.md
---
# Electron+Vue3 硬件交互篇

> 当我们使用 `Electron+Vue3` 来开发我们的桌面应用程序，有时候我们需要硬件来与我们的`Vue3`进行交互，交互主要通过 `Electron` 的主进程和渲染进程通信机制来实现。以下是大致的实现方案：

## 技术方案

**Electron的角色**

* 1.1 主进程：Node.js环境，直接调用serialport库操作硬件串口37。

* 1.2 渲染进程：Vue3页面，通过预加载脚本(preload)安全访问Node.js能力29。

* 1.3 关键约束：浏览器无法直接访问串口，必须依赖Electron的Node.js环境710。

> 主要依赖`Electron`的`Node.js`环境访问系统底层`API`的能力，结合串口通信(`SerialPort`)和进程间通信(`IPC`)技术。

## 流程示意图

![流程](../../.vitepress/theme/icons/svg/deepseekMermaid.svg)

### 跨平台串口通信库

```bash
npm install electron serialport --save-dev
```

> SerialPort 是一个用于 Node.js 的跨平台串口通信库，允许 JavaScript 应用通过 RS-232、RS-485 和 USB 串行端口与硬件设备通信。它是 Electron 应用中实现硬件交互的核心工具。

### Electron主进程配置 (electron/main.js)

```js
const { app, BrowserWindow } = require('electron');
const path = require('path');

function createWindow() {
 const win = new BrowserWindow({
   webPreferences: {
     preload: path.join(__dirname, 'preload.js'),  // 关键：预加载脚本
     contextIsolation: true,  // 启用安全隔离
   }
 });
 win.loadURL(process.env.VITE_DEV_SERVER_URL || 'http://localhost:3000');
}
app.whenReady().then(createWindow);
```

### 预加载脚本 (electron/preload.js)

```js
const { contextBridge, ipcRenderer } = require('electron');
const { SerialPort } = require('serialport');

contextBridge.exposeInMainWorld('electronAPI', {
 // 获取串口列表
 getPorts: () => SerialPort.list(),
 // 监听串口数据
 onSerialData: (callback) => {
   ipcRenderer.on('serial-data', (_event, value) => callback(value));
 },
 // 发送数据到设备
 sendToDevice: (data) => ipcRenderer.send('send-to-device', data)
});
```

## 硬件接入

### 串口连接与数据监听 (主进程中)

```js
const { ipcMain } = require('electron');
const { SerialPort } = require('serialport');

let activePort = null;

// 初始化串口
ipcMain.handle('connect-serial', async (_, { path, baudRate = 9600 }) => {
 activePort = new SerialPort({ path, baudRate });
 
 activePort.on('data', data => {
   const weight = parseScaleData(data);  // 解析称重数据
   mainWindow.webContents.send('serial-data', weight); // 发送到Vue页面
 });
 
 activePort.on('error', err => console.error('串口错误:', err));
});

// 解析电子秤数据示例（根据设备协议调整）
function parseScaleData(buffer) {
 const dataStr = buffer.toString('utf-8').trim();
 // 示例：电子秤数据格式 "205   000   000"（重量在首位）
 return parseFloat(dataStr.split('    ')[0]); 
}
```

### Vue组件中调用硬件 (src/components/Scale.vue)

```vue
<template>
  <div>
    <select @change="connectScale">
      <option v-for="port in ports" :value="port.path">{{ port.path }}</option>
    </select>
    <p>当前重量: {{ currentWeight }} kg</p>
  </div>
</template>
<script setup>
import { ref, onMounted } from 'vue';

const ports = ref([]);
const currentWeight = ref(0);

// 获取可用串口列表
const loadPorts = async () => {
  ports.value = await window.electronAPI.getPorts();
};

// 监听电子秤数据
onMounted(() => {
  window.electronAPI.onSerialData((weight) => {
    currentWeight.value = weight;
  });
});
</script>
```

---

---
url: /about/page.md
---
## 关于我

**技术栈**

|                                |  Stack              |
| ---------------------------------- | :----------------- |
| Language             |                    |
| FrontEnd   |                        |
| CI/CD   |                |

**能做什么？**

|         端                       |  技术栈              |
| ---------------------------------- | :----------------- |
| PC端 | vue2/vue3 |
| H5端 | vue2/vue3 |
| 微信小程序 |uniapp |
| 桌面应用程序 |uniapp |

---

---
url: /note/react.md
---
## React学习笔记

::: tip 提示
这是一个专门写React相关的文档, 可在tip后面加 自定义标题
:::

---

---
url: /site/framework.md
---


---

---
url: /site/html-css.md
---


---

---
url: /site/page.md
---


---

---
url: /note/vue.md
---
# Vue学习笔记-调试测试

```javascript
const VNode = {
  type: 'div',
  props: {
    class: 'name'
  },
  children: '我是文本'
}

// 创建 render 渲染函数
function render(vnode) {
  // 根据 type 生成 element
  const ele = document.createElement(vnode.type)
  // 把 props 中的 class 赋值给 ele 的 className
  ele.className = vnode.props.class
  // 把 children 赋值给 ele 的 innerText
  ele.innerText = vnode.children
  // 把 ele 作为子节点插入 body 中
  document.body.appendChild(ele)
}

render(VNode)

```

---

---
url: /note/css/css.md
---
# 列表布局

> 在微信小程序 或是 移动端上，有时候会出现神秘的1px差异，如果你是商品列表 三个 一行，那么第一行的第三个将会挤到第二行去，从而导致样式错乱，以下布局可以解决以上问题

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
</head>
<style>
*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
.product-list {
  display: flex;
  flex-wrap: wrap;
  gap: 8px; /* 商品之间的间距 */
}

.product-item {
  flex: 0 0 calc((100% - 2 * 8px) / 3); /* 计算出正确的宽度，减去左右边距影响 */
  box-sizing: border-box;
  background-color: #f8f8f8;
  padding: 16px;
  text-align: center;
}
@media (max-width: 768px) {
  .product-item {
    flex: 0 0 calc((100% - 1 * 8px) / 2);
  }
}

@media (max-width: 480px) {
  .product-item {
    flex: 0 0 100%;
  }
}  
</style>

<body>
  <div class="product-list">
    <div class="product-item">商品 1</div>
    <div class="product-item">商品 2</div>
    <div class="product-item">商品 3</div>
    <div class="product-item">商品 4</div>
    <div class="product-item">商品 5</div>
    <div class="product-item">商品 6</div>
    <div class="product-item">商品 7</div>
    <div class="product-item">商品 8</div>
    <div class="product-item">商品 9</div>
    <div class="product-item">商品 10</div>
    <div class="product-item">商品 11</div>
    <div class="product-item">商品 12</div>
    <div class="product-item">商品 13</div>
    <div class="product-item">商品 14</div>
    <div class="product-item">商品 15</div>
    <div class="product-item">商品 16</div>
  </div>
</body>
</html>
```

---

---
url: /guide/start.md
---
# 前端前沿

---

---
url: /frontend/library.md
---
# 工具库 rutilsjs

## rutilsjs 简介

> `rutilsjs` 是一个前端原生`JavaScript`库，提供了大量工具函数给前端开发人员使用，以提供开发效率

## 如何使用

```bash
npm i rutilsjs
```

---

---
url: /openSource/open-source.md
---
# 我的开源项目

> 我的开源项目应用到项目中的目前有这三个，都有对应的文档 或 示例，还有其他开源项目后续补充

**技术社区**

[掘金社区](https://juejin.cn/user/4212984287071710)

**使用热区图片插件**

```bash
npm i img-hotspot
```

[去看示例](https://codesandbox.io/p/sandbox/image-hotspot-tu-pian-re-qu-lkczjc) [去看文档](https://www.npmjs.com/package/img-hotspot)

**使用常用工具函数库**

```bash
npm i rutilsjs
```

[去看文档](https://shufei021.github.io/rutils/)

**使用日期工具函数库**

```bash
npm i rdatejs
```

[去看文档](https://shufei021.github.io/rdate/)

---

---
url: /frontend/plugin.md
---
# 插件库
